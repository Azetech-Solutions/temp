<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Wed May 29 13:59:34 2024
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Boot_Main &rArr; Boot_Response_status &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[2b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5c]">Boot_Error_Notification</a> from boot_transmit_uc_to_tool.o(.text.Boot_Error_Notification) referenced from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[5a]">Boot_Req_Data_RxCbk</a> from bootloader_main.o(.text.Boot_Req_Data_RxCbk) referenced from comif_config.o(.data.ComIfRxMsgCfg_Boot)
 <LI><a href="#[5b]">Boot_Transmit_FUN</a> from boot_transmit_uc_to_tool.o(.text.Boot_Transmit_FUN) referenced from comif_config.o(.data.ComIf_ChannelConfig)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[57]">COMP1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[45]">CRS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2c]">DAC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[50]">DTS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[22]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[23]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[24]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[25]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[26]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[27]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[46]">GPDMA2_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[47]">GPDMA2_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[48]">GPDMA2_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[49]">GPDMA2_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4a]">GPDMA2_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4b]">GPDMA2_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4c]">GPDMA2_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4d]">GPDMA2_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[10]">GTZC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[52]">HASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[54]">I3C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[53]">I3C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[56]">I3C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[55]">I3C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4f]">ICACHE_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2a]">IWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[42]">LPTIM1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[43]">LPTIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[e]">RAMCFG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[51]">RNG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32h5xx.o(.text.SystemInit) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[d]">TAMP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from uart_driver.o(.text.USART3_IRQHandler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[44]">USB_DRD_FS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_stm32h503xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[60]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[61]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[cb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[da]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[db]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[de]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[df]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[67]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Boot_Main &rArr; Boot_Response_status &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ea]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I3C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I3C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I3C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I3C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_DRD_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bf]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
</UL>

<P><STRONG><a name="[6f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[eb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[69]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>Boot_Error_Notification</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, boot_transmit_uc_to_tool.o(.text.Boot_Error_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Boot_Error_Notification &rArr; Debug_SendNumberWithDescription &rArr; Debug_SendNumber &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[75]"></a>Boot_Main</STRONG> (Thumb, 2214 bytes, Stack size 104 bytes, bootloader_main.o(.text.Boot_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Boot_Main &rArr; Boot_Response_status &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateChecksum
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Nvm_Block
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_doubleSec_Erase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_SingleSec_Erase
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Sectors_Erase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DoubleSec_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multi_Word_write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Apps_Header
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Response_status
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Boot_Req_Data_RxCbk</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bootloader_main.o(.text.Boot_Req_Data_RxCbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Boot_Req_Data_RxCbk &rArr; Debug_SendString &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIfRxMsgCfg_Boot)
</UL>
<P><STRONG><a name="[77]"></a>Boot_Response_status</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bootloader_main.o(.text.Boot_Response_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Boot_Response_status &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Boot_Transmit_FUN</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, boot_transmit_uc_to_tool.o(.text.Boot_Transmit_FUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Boot_Transmit_FUN &rArr; ComIf_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_TxConfirmation
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uar3t_Tx_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> comif_config.o(.data.ComIf_ChannelConfig)
</UL>
<P><STRONG><a name="[85]"></a>Buffer_Clear</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buffer.o(.text.Buffer_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer_Clear &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
</UL>

<P><STRONG><a name="[87]"></a>Buffer_Create</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, buffer.o(.text.Buffer_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer_Create &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
</UL>

<P><STRONG><a name="[88]"></a>Buffer_DeQueue</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, buffer.o(.text.Buffer_DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer_DeQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugMain
</UL>

<P><STRONG><a name="[89]"></a>Buffer_EnQueue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, buffer.o(.text.Buffer_EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TX_Byte
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>Buffer_GetBuffer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, buffer.o(.text.Buffer_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_DeQueue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Length
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Clear
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_EnQueue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
</UL>

<P><STRONG><a name="[8a]"></a>Buffer_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, buffer_config.o(.text.Buffer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Buffer_Init &rArr; Buffer_Create &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[8b]"></a>Buffer_Length</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, buffer.o(.text.Buffer_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buffer_Length &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugMain
</UL>

<P><STRONG><a name="[8c]"></a>Chk_NVMTotal_Block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nvm_driver.o(.text.Chk_NVMTotal_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chk_NVMTotal_Block &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[98]"></a>ComIf_CalcChecksum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, comif_calcchecksum.o(.text.ComIf_CalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ComIf_CalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[90]"></a>ComIf_EncodeFromShadowToChannelBuffer</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, comif_transmit.o(.text.ComIf_EncodeFromShadowToChannelBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_AppendByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_AppendString
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertByteToString
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumAndTentativeDataLength
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>

<P><STRONG><a name="[92]"></a>ComIf_ErrorNotify</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, comif.o(.text.ComIf_ErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_StoreDataByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>

<P><STRONG><a name="[95]"></a>ComIf_GetChecksumMaskValue</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, comif_calcchecksum.o(.text.ComIf_GetChecksumMaskValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_GetChecksumMaskValue
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumAndTentativeDataLength
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[96]"></a>ComIf_RxIndication</STRONG> (Thumb, 794 bytes, Stack size 48 bytes, comif_rxindication.o(.text.ComIf_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_StoreDataByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetHandle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ResetRxInfo
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumMaskValue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_CalcChecksum
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_ASCIIString
</UL>

<P><STRONG><a name="[9b]"></a>ComIf_RxIndication_ASCIIString</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, comif_rxindication.o(.text.ComIf_RxIndication_ASCIIString))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ComIf_RxIndication_ASCIIString &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_Boot
</UL>

<P><STRONG><a name="[9c]"></a>ComIf_RxIndication_Boot</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, comif_config.o(.text.ComIf_RxIndication_Boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ComIf_RxIndication_Boot &rArr; ComIf_RxIndication_ASCIIString &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_ASCIIString
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
</UL>

<P><STRONG><a name="[82]"></a>ComIf_Transmit</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, comif_transmit.o(.text.ComIf_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_UpdateTxShadowBuffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Response_status
</UL>

<P><STRONG><a name="[84]"></a>ComIf_TxConfirmation</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, comif_transmit.o(.text.ComIf_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComIf_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Transmit_FUN
</UL>

<P><STRONG><a name="[9d]"></a>ComIf_UpdateTxShadowBuffer</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, comif_txshadowbuffer.o(.text.ComIf_UpdateTxShadowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ComIf_UpdateTxShadowBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Transmit
</UL>

<P><STRONG><a name="[9e]"></a>DEBUG_UART_SendString</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(.text.DEBUG_UART_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TX_string
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumber
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TransmitAggregatedData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
</UL>

<P><STRONG><a name="[a2]"></a>Debug_MainFunction</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, debug.o(.text.Debug_MainFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Debug_MainFunction &rArr; debugMain &rArr; Buffer_DeQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugMain
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Debug_SendNumber</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, debug.o(.text.Debug_SendNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Debug_SendNumber &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>

<P><STRONG><a name="[74]"></a>Debug_SendNumberWithDescription</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, debug.o(.text.Debug_SendNumberWithDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Debug_SendNumberWithDescription &rArr; Debug_SendNumber &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumber
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART_SendString
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TransmitAggregatedData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_AggregateByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_AggregateString
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_StartAggregation
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Error_Notification
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[76]"></a>Debug_SendString</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(.text.Debug_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Debug_SendString &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Req_Data_RxCbk
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Debug_TX_Byte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debug.o(.text.Debug_TX_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TX_string
</UL>

<P><STRONG><a name="[9f]"></a>Debug_TX_string</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, debug.o(.text.Debug_TX_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_TX_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART_SendString
</UL>

<P><STRONG><a name="[80]"></a>FLASH_Erase_NoofSectors</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, flash_main.o(.text.FLASH_Erase_NoofSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_Erase_NoofSectors &rArr; Verify_Sectors_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Sectors_Erase
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Sector_Erase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error_Check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_Lock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_main.o(.text.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Multi_Word_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DoubleSec_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multi_Word_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
</UL>

<P><STRONG><a name="[aa]"></a>FLASH_Sector_Erase</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, flash_main.o(.text.FLASH_Sector_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Sector_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DoubleSec_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
</UL>

<P><STRONG><a name="[a8]"></a>FLASH_Unlock</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, flash_main.o(.text.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Multi_Word_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DoubleSec_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multi_Word_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_Write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flash_main.o(.text.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Multi_Word_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multi_Word_write
</UL>

<P><STRONG><a name="[b1]"></a>FLASH_init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, flash_main.o(.text.FLASH_init))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7e]"></a>Flash_DoubleSec_Erase</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, flash_main.o(.text.Flash_DoubleSec_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_DoubleSec_Erase &rArr; FLASH_Sector_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Sector_Erase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error_Check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[a9]"></a>Flash_Error_Check</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, flash_main.o(.text.Flash_Error_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Flash_Error_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Multi_Word_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DoubleSec_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multi_Word_write
</UL>

<P><STRONG><a name="[8d]"></a>Flash_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_main.o(.text.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Block_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_data_ChkSum
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Block_Read_FUN
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Apps_Header
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_NVMTotal_Block
</UL>

<P><STRONG><a name="[78]"></a>Flash_SingleSec_Erase</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, flash_main.o(.text.Flash_SingleSec_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Flash_SingleSec_Erase &rArr; FLASH_Sector_Erase
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Sector_Erase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error_Check
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Nvm_Block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[ac]"></a>GpioClockEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ports_init.o(.text.GpioClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GpioClockEnable &rArr; Uart3_IO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 718 bytes, Stack size 20 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_IO_init
</UL>

<P><STRONG><a name="[ae]"></a>IS_Chk_LtBlk_NVMValid</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, nvm_driver.o(.text.IS_Chk_LtBlk_NVMValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IS_Chk_LtBlk_NVMValid &rArr; NVM_data_ChkSum &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_data_ChkSum
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Block_Write
</UL>

<P><STRONG><a name="[b0]"></a>Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(.text.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init &rArr; GpioClockEnable &rArr; Uart3_IO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Apps_Header
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClockEnable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chk_NVMTotal_Block
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>Multi_Word_write</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, flash_main.o(.text.Multi_Word_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Multi_Word_write &rArr; FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error_Check
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[b7]"></a>NVM_Block_Read_FUN</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, nvm_driver.o(.text.NVM_Block_Read_FUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVM_Block_Read_FUN &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Scan_Block
</UL>

<P><STRONG><a name="[b8]"></a>NVM_Block_Write</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nvm_driver.o(.text.NVM_Block_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NVM_Block_Write &rArr; IS_Chk_LtBlk_NVMValid &rArr; NVM_data_ChkSum &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Multi_Word_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Chk_LtBlk_NVMValid
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Nvm_Block
</UL>

<P><STRONG><a name="[b5]"></a>NVM_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nvm_driver.o(.text.NVM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVM_Init &rArr; NVM_Scan_Block &rArr; NVM_Block_Read_FUN &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Scan_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[b9]"></a>NVM_Multi_Word_write</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, nvm_driver.o(.text.NVM_Multi_Word_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVM_Multi_Word_write &rArr; FLASH_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Error_Check
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Block_Write
</UL>

<P><STRONG><a name="[ba]"></a>NVM_Scan_Block</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nvm_driver.o(.text.NVM_Scan_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NVM_Scan_Block &rArr; NVM_Block_Read_FUN &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Block_Read_FUN
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Init
</UL>

<P><STRONG><a name="[af]"></a>NVM_data_ChkSum</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nvm_driver.o(.text.NVM_data_ChkSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVM_data_ChkSum &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_Chk_LtBlk_NVMValid
</UL>

<P><STRONG><a name="[bb]"></a>NVS_Block_Read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nvs_driver.o(.text.NVS_Block_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVS_Block_Read &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Scan_Block
</UL>

<P><STRONG><a name="[b4]"></a>NVS_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvs_driver.o(.text.NVS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVS_Init &rArr; NVS_Scan_Block &rArr; NVS_Block_Read &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Scan_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[bc]"></a>NVS_Scan_Block</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, nvs_driver.o(.text.NVS_Scan_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NVS_Scan_Block &rArr; NVS_Block_Read &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Block_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVS_Init
</UL>

<P><STRONG><a name="[c3]"></a>PWREx_EnableBkupRAM_REG</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, backup_ram.o(.text.PWREx_EnableBkupRAM_REG))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
</UL>

<P><STRONG><a name="[c4]"></a>PWR_DisableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, backup_ram.o(.text.PWR_DisableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_WriteVariable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_ReadVariable
</UL>

<P><STRONG><a name="[c2]"></a>PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, backup_ram.o(.text.PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_WriteVariable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_ReadVariable
</UL>

<P><STRONG><a name="[79]"></a>Read_Apps_Header</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nvm_driver.o(.text.Read_Apps_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_Apps_Header &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 282 bytes, Stack size 4 bytes, system_stm32h5xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart_driver.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_EnQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>USART3_Main</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_driver.o(.text.USART3_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART3_Main &rArr; ComIf_RxIndication_Boot &rArr; ComIf_RxIndication_ASCIIString &rArr; ComIf_RxIndication &rArr; ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Clear
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication_Boot
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>Uar3t_Tx_Byte</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, uart_driver.o(.text.Uar3t_Tx_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uar3t_Tx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Transmit_FUN
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugMain
</UL>

<P><STRONG><a name="[ad]"></a>Uart3_IO_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ports_init.o(.text.Uart3_IO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart3_IO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClockEnable
</UL>

<P><STRONG><a name="[b3]"></a>Uart3_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart_driver.o(.text.Uart3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Uart3_Init &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[7a]"></a>Update_Nvm_Block</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, nvm_driver.o(.text.Update_Nvm_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Update_Nvm_Block &rArr; NVM_Block_Write &rArr; IS_Chk_LtBlk_NVMValid &rArr; NVM_data_ChkSum &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Block_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SingleSec_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[81]"></a>Verify_Sectors_Erase</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, flash_main.o(.text.Verify_Sectors_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Verify_Sectors_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_NoofSectors
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[7d]"></a>Verify_SingleSec_Erase</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, flash_main.o(.text.Verify_SingleSec_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Verify_SingleSec_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[7f]"></a>Verify_doubleSec_Erase</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, flash_main.o(.text.Verify_doubleSec_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Verify_doubleSec_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[b2]"></a>bkSRAM_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, backup_ram.o(.text.bkSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bkSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWREx_EnableBkupRAM_REG
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DisableBkUpAccess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnableBkUpAccess
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[c5]"></a>bkSRAM_ReadVariable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, backup_ram.o(.text.bkSRAM_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bkSRAM_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DisableBkUpAccess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>bkSRAM_WriteVariable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, backup_ram.o(.text.bkSRAM_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bkSRAM_WriteVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DisableBkUpAccess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>calculateChecksum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bootloader_main.o(.text.calculateChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calculateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
</UL>

<P><STRONG><a name="[a3]"></a>debugMain</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_driver.o(.text.debugMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debugMain &rArr; Buffer_DeQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_DeQueue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Length
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uar3t_Tx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_MainFunction
</UL>

<P><STRONG><a name="[c7]"></a>delay</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, main.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; Boot_Main &rArr; Boot_Response_status &rArr; ComIf_Transmit &rArr; ComIf_EncodeFromShadowToChannelBuffer &rArr; ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_MainFunction
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_WriteVariable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Response_status
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkSRAM_ReadVariable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[62]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[f7]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[f8]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, uart_driver.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Init
</UL>

<P><STRONG><a name="[97]"></a>ComIf_ResetRxInfo</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, comif_rxindication.o(.text.ComIf_ResetRxInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ComIf_ResetRxInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_StoreDataByte
</UL>

<P><STRONG><a name="[99]"></a>ComIf_GetHandle</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, comif_rxindication.o(.text.ComIf_GetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[9a]"></a>ComIf_StoreDataByte</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, comif_rxindication.o(.text.ComIf_StoreDataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ComIf_StoreDataByte &rArr; ComIf_ErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ResetRxInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_RxIndication
</UL>

<P><STRONG><a name="[91]"></a>ComIf_GetChecksumAndTentativeDataLength</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, comif_transmit.o(.text.ComIf_GetChecksumAndTentativeDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ComIf_GetChecksumAndTentativeDataLength &rArr; ComIf_GetChecksumMaskValue
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_IsNeedDelimiter
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumMaskValue
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
</UL>

<P><STRONG><a name="[8f]"></a>ConvertByteToString</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, comif_transmit.o(.text.ConvertByteToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConvertByteToString
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_AppendString
</UL>

<P><STRONG><a name="[8e]"></a>ComIf_AppendString</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, comif_transmit.o(.text.ComIf_AppendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComIf_AppendString &rArr; ConvertByteToString
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertByteToString
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
</UL>

<P><STRONG><a name="[93]"></a>ComIf_AppendByte</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, comif_transmit.o(.text.ComIf_AppendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_AppendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_EncodeFromShadowToChannelBuffer
</UL>

<P><STRONG><a name="[94]"></a>ComIf_IsNeedDelimiter</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, comif_transmit.o(.text.ComIf_IsNeedDelimiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ComIf_IsNeedDelimiter
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_GetChecksumAndTentativeDataLength
</UL>

<P><STRONG><a name="[a5]"></a>Debug_StartAggregation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debug.o(.text.Debug_StartAggregation))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>

<P><STRONG><a name="[a0]"></a>Debug_AggregateString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, debug.o(.text.Debug_AggregateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Debug_AggregateString &rArr; Debug_AggregateByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_AggregateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>

<P><STRONG><a name="[a1]"></a>Debug_AggregateByte</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, debug.o(.text.Debug_AggregateByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Debug_AggregateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_AggregateString
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>

<P><STRONG><a name="[a6]"></a>Debug_TransmitAggregatedData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, debug.o(.text.Debug_TransmitAggregatedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Debug_TransmitAggregatedData &rArr; DEBUG_UART_SendString &rArr; Debug_TX_string &rArr; Debug_TX_Byte &rArr; Buffer_EnQueue &rArr; Buffer_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_SendNumberWithDescription
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
