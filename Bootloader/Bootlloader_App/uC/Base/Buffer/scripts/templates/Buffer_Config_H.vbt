.imports system
.imports system.io
.Imports System.Collections.Generic
.public module Buffer_Config_H_VBT

. Public RingBuffer_Count As UInteger = 0
. Public RingBuffer_Maximum_Length As UInteger = 0

.    Private Function Buffer_Get_EnabledCount() As UInteger
.        RingBuffer_Count = 0
.        For Each myBuffer as RingBuffer in pBuffer.Config.RingBuffers
.            If CBool(myBuffer.Enabled) = True Then
.                RingBuffer_Count += 1
.                If (RingBuffer_Maximum_Length < myBuffer.Length) Then
.                    RingBuffer_Maximum_Length = myBuffer.Length
.                End If
.            End If
.        Next
.        Return RingBuffer_Count
.    End Function


.output Buffer_Config.h
.sw.writeline(CopyRightsComments())
#ifndef __BUFFER_CONFIG_H__
#define __BUFFER_CONFIG_H__

#include <Includes.h>
#include PLATFORM_TYPES_H

/*************************************************/
/* Functional Switches and Parameter Definitions */
/*************************************************/

/* Total number of Buffers */
#define BUFFER_MAX_COUNT                  $(Buffer_Get_EnabledCount())

/* Maximum Size of each configured Buffer */
#define BUFFER_MAX_SIZE                   $(RingBuffer_Maximum_Length)


.Dim i As UInteger = 0
.For Each myBuffer as RingBuffer in pBuffer.Config.RingBuffers
. If CBool(myBuffer.Enabled) = True Then
/* Buffer for $(myBuffer.Name) */
#define P_BUFFER_ID_$(myBuffer.Name)            $(i)
#define P_BUFFER_LENGTH_$(myBuffer.Name)        $(myBuffer.Length)

. i += 1
. End If
.next


/*************************************************/
/*               Macro Definitions               */
/*************************************************/

.For Each myBuffer as RingBuffer in pBuffer.Config.RingBuffers
. If CBool(myBuffer.Enabled) = True Then
#define $(myBuffer.Name)_Buffer_Create()             Buffer_Create(P_BUFFER_ID_$(myBuffer.Name), BufferArray_$(myBuffer.Name), P_BUFFER_LENGTH_$(myBuffer.Name))
#define $(myBuffer.Name)_Buffer_Get()                Buffer_GetBuffer(P_BUFFER_ID_$(myBuffer.Name))
#define $(myBuffer.Name)_Buffer_EnQueue(Data)        Buffer_EnQueue(P_BUFFER_ID_$(myBuffer.Name), Data)
#define $(myBuffer.Name)_Buffer_DeQueue(Data)        Buffer_DeQueue(P_BUFFER_ID_$(myBuffer.Name), Data)
#define $(myBuffer.Name)_Buffer_Length()             Buffer_Length(P_BUFFER_ID_$(myBuffer.Name))
#define $(myBuffer.Name)_Buffer_Clear()              Buffer_Clear(P_BUFFER_ID_$(myBuffer.Name))
#define $(myBuffer.Name)_IsBufferEmpty()             ($(myBuffer.Name)_Buffer_Length() == 0)

. End If
.next

/*************************************************/
/*               Type Definitions                */
/*************************************************/

. If RingBuffer_Maximum_Length < 256 Then
typedef UBYTE BufferLengthType;
. Else If RingBuffer_Maximum_Length < 65536 Then
typedef UWORD BufferLengthType;
. Else
typedef ULONG BufferLengthType;
. End If

/*************************************************/
/*               Global Variables                */
/*************************************************/

.For Each myBuffer as RingBuffer in pBuffer.Config.RingBuffers
. If CBool(myBuffer.Enabled) = True Then
extern UBYTE BufferArray_$(myBuffer.Name)[];
. End If
.next

/*************************************************/
/*          Extern Function Declarations         */
/*************************************************/



#endif /* __BUFFER_CONFIG_H__ */

.endoutput
.end module