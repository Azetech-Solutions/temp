
stm32f103c8_usb_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e0  080072e0  0000917c  2**0
                  CONTENTS
  4 .ARM          00000000  080072e0  080072e0  0000917c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072e0  080072e0  0000917c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e0  080072e0  000082e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072e4  080072e4  000082e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080072e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  2000017c  08007464  0000917c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001364  08007464  00009364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b603  00000000  00000000  000091a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002756  00000000  00000000  000147a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00016f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  00017918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e2f  00000000  00000000  00018071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d99e  00000000  00000000  00030ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842c0  00000000  00000000  0003e83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000268c  00000000  00000000  000c2b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c51d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800725c 	.word	0x0800725c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800725c 	.word	0x0800725c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f91e 	bl	8000390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f806 	bl	8000164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f85e 	bl	8000218 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fb7c 	bl	8006858 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b094      	sub	sp, #80	@ 0x50
 8000168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800016e:	2228      	movs	r2, #40	@ 0x28
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f007 f846 	bl	8007204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	f107 0314 	add.w	r3, r7, #20
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000194:	2301      	movs	r3, #1
 8000196:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800019c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 ffb8 	bl	8002130 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c6:	f000 f849 	bl	800025c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fa24 	bl	8002634 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f2:	f000 f833 	bl	800025c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f6:	2310      	movs	r3, #16
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f002 fb73 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800020c:	f000 f826 	bl	800025c <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3750      	adds	r7, #80	@ 0x50
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021e:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <MX_GPIO_Init+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <MX_GPIO_Init+0x40>)
 8000224:	f043 0320 	orr.w	r3, r3, #32
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a07      	ldr	r2, [pc, #28]	@ (8000258 <MX_GPIO_Init+0x40>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0304 	and.w	r3, r3, #4
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000

0800025c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <Error_Handler+0x8>

08000268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800026e:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <HAL_MspInit+0x5c>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a14      	ldr	r2, [pc, #80]	@ (80002c4 <HAL_MspInit+0x5c>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <HAL_MspInit+0x5c>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <HAL_MspInit+0x5c>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	4a0e      	ldr	r2, [pc, #56]	@ (80002c4 <HAL_MspInit+0x5c>)
 800028c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000290:	61d3      	str	r3, [r2, #28]
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <HAL_MspInit+0x5c>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800029e:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <HAL_MspInit+0x60>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <HAL_MspInit+0x60>)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <NMI_Handler+0x4>

080002d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d8:	bf00      	nop
 80002da:	e7fd      	b.n	80002d8 <HardFault_Handler+0x4>

080002dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <MemManage_Handler+0x4>

080002e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e8:	bf00      	nop
 80002ea:	e7fd      	b.n	80002e8 <BusFault_Handler+0x4>

080002ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <UsageFault_Handler+0x4>

080002f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031c:	f000 f87e 	bl	800041c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000328:	4802      	ldr	r0, [pc, #8]	@ (8000334 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800032a:	f000 fabc 	bl	80008a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000e6c 	.word	0x20000e6c

08000338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000344:	f7ff fff8 	bl	8000338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480b      	ldr	r0, [pc, #44]	@ (8000378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800034a:	490c      	ldr	r1, [pc, #48]	@ (800037c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800034c:	4a0c      	ldr	r2, [pc, #48]	@ (8000380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a09      	ldr	r2, [pc, #36]	@ (8000384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000360:	4c09      	ldr	r4, [pc, #36]	@ (8000388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800036e:	f006 ff51 	bl	8007214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff feeb 	bl	800014c <main>
  bx lr
 8000376:	4770      	bx	lr
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000380:	080072e8 	.word	0x080072e8
  ldr r2, =_sbss
 8000384:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000388:	20001364 	.word	0x20001364

0800038c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC1_2_IRQHandler>
	...

08000390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000394:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <HAL_Init+0x28>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a07      	ldr	r2, [pc, #28]	@ (80003b8 <HAL_Init+0x28>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a0:	2003      	movs	r0, #3
 80003a2:	f000 f923 	bl	80005ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003a6:	200f      	movs	r0, #15
 80003a8:	f000 f808 	bl	80003bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003ac:	f7ff ff5c 	bl	8000268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40022000 	.word	0x40022000

080003bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <HAL_InitTick+0x54>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <HAL_InitTick+0x58>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f93b 	bl	8000656 <HAL_SYSTICK_Config>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003e6:	2301      	movs	r3, #1
 80003e8:	e00e      	b.n	8000408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b0f      	cmp	r3, #15
 80003ee:	d80a      	bhi.n	8000406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003f0:	2200      	movs	r2, #0
 80003f2:	6879      	ldr	r1, [r7, #4]
 80003f4:	f04f 30ff 	mov.w	r0, #4294967295
 80003f8:	f000 f903 	bl	8000602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003fc:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <HAL_InitTick+0x5c>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000402:	2300      	movs	r3, #0
 8000404:	e000      	b.n	8000408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000406:	2301      	movs	r3, #1
}
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000000 	.word	0x20000000
 8000414:	20000008 	.word	0x20000008
 8000418:	20000004 	.word	0x20000004

0800041c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <HAL_IncTick+0x1c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b05      	ldr	r3, [pc, #20]	@ (800043c <HAL_IncTick+0x20>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4413      	add	r3, r2
 800042c:	4a03      	ldr	r2, [pc, #12]	@ (800043c <HAL_IncTick+0x20>)
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000008 	.word	0x20000008
 800043c:	20000198 	.word	0x20000198

08000440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return uwTick;
 8000444:	4b02      	ldr	r3, [pc, #8]	@ (8000450 <HAL_GetTick+0x10>)
 8000446:	681b      	ldr	r3, [r3, #0]
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	20000198 	.word	0x20000198

08000454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800047c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	60d3      	str	r3, [r2, #12]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a0:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <__NVIC_GetPriorityGrouping+0x18>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	f003 0307 	and.w	r3, r3, #7
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db0b      	blt.n	80004e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 021f 	and.w	r2, r3, #31
 80004d0:	4906      	ldr	r1, [pc, #24]	@ (80004ec <__NVIC_EnableIRQ+0x34>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	095b      	lsrs	r3, r3, #5
 80004d8:	2001      	movs	r0, #1
 80004da:	fa00 f202 	lsl.w	r2, r0, r2
 80004de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	e000e100 	.word	0xe000e100

080004f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	db0a      	blt.n	800051a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	b2da      	uxtb	r2, r3
 8000508:	490c      	ldr	r1, [pc, #48]	@ (800053c <__NVIC_SetPriority+0x4c>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	440b      	add	r3, r1
 8000514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000518:	e00a      	b.n	8000530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4908      	ldr	r1, [pc, #32]	@ (8000540 <__NVIC_SetPriority+0x50>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	3b04      	subs	r3, #4
 8000528:	0112      	lsls	r2, r2, #4
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	440b      	add	r3, r1
 800052e:	761a      	strb	r2, [r3, #24]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f003 0307 	and.w	r3, r3, #7
 8000556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	f1c3 0307 	rsb	r3, r3, #7
 800055e:	2b04      	cmp	r3, #4
 8000560:	bf28      	it	cs
 8000562:	2304      	movcs	r3, #4
 8000564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3304      	adds	r3, #4
 800056a:	2b06      	cmp	r3, #6
 800056c:	d902      	bls.n	8000574 <NVIC_EncodePriority+0x30>
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	3b03      	subs	r3, #3
 8000572:	e000      	b.n	8000576 <NVIC_EncodePriority+0x32>
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000578:	f04f 32ff 	mov.w	r2, #4294967295
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43da      	mvns	r2, r3
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	401a      	ands	r2, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43d9      	mvns	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	4313      	orrs	r3, r2
         );
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3724      	adds	r7, #36	@ 0x24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005b8:	d301      	bcc.n	80005be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00f      	b.n	80005de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <SysTick_Config+0x40>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005c6:	210f      	movs	r1, #15
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f7ff ff90 	bl	80004f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <SysTick_Config+0x40>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <SysTick_Config+0x40>)
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010

080005ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff2d 	bl	8000454 <__NVIC_SetPriorityGrouping>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000614:	f7ff ff42 	bl	800049c <__NVIC_GetPriorityGrouping>
 8000618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	6978      	ldr	r0, [r7, #20]
 8000620:	f7ff ff90 	bl	8000544 <NVIC_EncodePriority>
 8000624:	4602      	mov	r2, r0
 8000626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff5f 	bl	80004f0 <__NVIC_SetPriority>
}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff35 	bl	80004b8 <__NVIC_EnableIRQ>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ffa2 	bl	80005a8 <SysTick_Config>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d101      	bne.n	8000680 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e0e8      	b.n	8000852 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d106      	bne.n	800069a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f006 fb0b 	bl	8006cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2203      	movs	r2, #3
 800069e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f9f6 	bl	8002a9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3304      	adds	r3, #4
 80006ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006bc:	f002 f9cc 	bl	8002a58 <USB_CoreInit>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d005      	beq.n	80006d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2202      	movs	r2, #2
 80006ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0bf      	b.n	8000852 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 f9fa 	bl	8002ad2 <USB_SetCurrentMode>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d005      	beq.n	80006f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2202      	movs	r2, #2
 80006e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e0b0      	b.n	8000852 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e03e      	b.n	8000774 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80006f6:	7bfa      	ldrb	r2, [r7, #15]
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	3311      	adds	r3, #17
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800070a:	7bfa      	ldrb	r2, [r7, #15]
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	440b      	add	r3, r1
 8000718:	3310      	adds	r3, #16
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	440b      	add	r3, r1
 800072c:	3313      	adds	r3, #19
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000732:	7bfa      	ldrb	r2, [r7, #15]
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	3320      	adds	r3, #32
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	3324      	adds	r3, #36	@ 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	440b      	add	r3, r1
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	3301      	adds	r3, #1
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	7bfa      	ldrb	r2, [r7, #15]
 800077a:	429a      	cmp	r2, r3
 800077c:	d3bb      	bcc.n	80006f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e044      	b.n	800080e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000784:	7bfa      	ldrb	r2, [r7, #15]
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	440b      	add	r3, r1
 8000792:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800079a:	7bfa      	ldrb	r2, [r7, #15]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	440b      	add	r3, r1
 80007a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	440b      	add	r3, r1
 80007be:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4613      	mov	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	440b      	add	r3, r1
 80007d4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4613      	mov	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	3301      	adds	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3b5      	bcc.n	8000784 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3304      	adds	r3, #4
 8000820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000822:	f002 f962 	bl	8002aea <USB_DevInit>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d005      	beq.n	8000838 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2202      	movs	r2, #2
 8000830:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	e00c      	b.n	8000852 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2201      	movs	r2, #1
 8000842:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fbe1 	bl	8005012 <USB_DevDisconnect>

  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <HAL_PCD_Start+0x16>
 800086c:	2302      	movs	r3, #2
 800086e:	e016      	b.n	800089e <HAL_PCD_Start+0x44>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f002 f8f8 	bl	8002a72 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000882:	2101      	movs	r1, #1
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f006 fc86 	bl	8007196 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fbb5 	bl	8004ffe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b088      	sub	sp, #32
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 fbb7 	bl	8005026 <USB_ReadInterrupts>
 80008b8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fb1a 	bl	8000efe <PCD_EP_ISR_Handler>

    return;
 80008ca:	e119      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d013      	beq.n	80008fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80008de:	b29a      	uxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008e8:	b292      	uxth	r2, r2
 80008ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f006 fa59 	bl	8006da6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008f4:	2100      	movs	r1, #0
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f905 	bl	8000b06 <HAL_PCD_SetAddress>

    return;
 80008fc:	e100      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00c      	beq.n	8000922 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000910:	b29a      	uxth	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800091a:	b292      	uxth	r2, r2
 800091c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000920:	e0ee      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d00c      	beq.n	8000946 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000934:	b29a      	uxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800093e:	b292      	uxth	r2, r2
 8000940:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000944:	e0dc      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d027      	beq.n	80009a0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0204 	bic.w	r2, r2, #4
 8000962:	b292      	uxth	r2, r2
 8000964:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 0208 	bic.w	r2, r2, #8
 800097a:	b292      	uxth	r2, r2
 800097c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f006 fa49 	bl	8006e18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800098e:	b29a      	uxth	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000998:	b292      	uxth	r2, r2
 800099a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800099e:	e0af      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 8083 	beq.w	8000ab2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	77fb      	strb	r3, [r7, #31]
 80009b0:	e010      	b.n	80009d4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	441a      	add	r2, r3
 80009be:	7ffb      	ldrb	r3, [r7, #31]
 80009c0:	8812      	ldrh	r2, [r2, #0]
 80009c2:	b292      	uxth	r2, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	3320      	adds	r3, #32
 80009c8:	443b      	add	r3, r7
 80009ca:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80009ce:	7ffb      	ldrb	r3, [r7, #31]
 80009d0:	3301      	adds	r3, #1
 80009d2:	77fb      	strb	r3, [r7, #31]
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	2b07      	cmp	r3, #7
 80009d8:	d9eb      	bls.n	80009b2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f042 0201 	orr.w	r2, r2, #1
 80009ec:	b292      	uxth	r2, r2
 80009ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 0201 	bic.w	r2, r2, #1
 8000a04:	b292      	uxth	r2, r2
 8000a06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a0a:	bf00      	nop
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f6      	beq.n	8000a0c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a30:	b292      	uxth	r2, r2
 8000a32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	77fb      	strb	r3, [r7, #31]
 8000a3a:	e00f      	b.n	8000a5c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	4611      	mov	r1, r2
 8000a44:	7ffa      	ldrb	r2, [r7, #31]
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	440a      	add	r2, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	3320      	adds	r3, #32
 8000a4e:	443b      	add	r3, r7
 8000a50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a54:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	77fb      	strb	r3, [r7, #31]
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d9ec      	bls.n	8000a3c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0208 	orr.w	r2, r2, #8
 8000a74:	b292      	uxth	r2, r2
 8000a76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000a8c:	b292      	uxth	r2, r2
 8000a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f042 0204 	orr.w	r2, r2, #4
 8000aa4:	b292      	uxth	r2, r2
 8000aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f006 f99a 	bl	8006de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ab0:	e026      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00f      	beq.n	8000adc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000ace:	b292      	uxth	r2, r2
 8000ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f006 f958 	bl	8006d8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ada:	e011      	b.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00c      	beq.n	8000b00 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000af8:	b292      	uxth	r2, r2
 8000afa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000afe:	bf00      	nop
  }
}
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d101      	bne.n	8000b20 <HAL_PCD_SetAddress+0x1a>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e012      	b.n	8000b46 <HAL_PCD_SetAddress+0x40>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	78fa      	ldrb	r2, [r7, #3]
 8000b2c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fa4e 	bl	8004fd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	4608      	mov	r0, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	70fb      	strb	r3, [r7, #3]
 8000b60:	460b      	mov	r3, r1
 8000b62:	803b      	strh	r3, [r7, #0]
 8000b64:	4613      	mov	r3, r2
 8000b66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	da0e      	bge.n	8000b92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	f003 0207 	and.w	r2, r3, #7
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	3310      	adds	r3, #16
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	705a      	strb	r2, [r3, #1]
 8000b90:	e00e      	b.n	8000bb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	f003 0207 	and.w	r2, r3, #7
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bbc:	883a      	ldrh	r2, [r7, #0]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	78ba      	ldrb	r2, [r7, #2]
 8000bc6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bc8:	78bb      	ldrb	r3, [r7, #2]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d102      	bne.n	8000bd4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_PCD_EP_Open+0x94>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e00e      	b.n	8000c00 <HAL_PCD_EP_Open+0xb2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68f9      	ldr	r1, [r7, #12]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 ff97 	bl	8002b24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	da0e      	bge.n	8000c3a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	f003 0207 	and.w	r2, r3, #7
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	3310      	adds	r3, #16
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2201      	movs	r2, #1
 8000c36:	705a      	strb	r2, [r3, #1]
 8000c38:	e00e      	b.n	8000c58 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	f003 0207 	and.w	r2, r3, #7
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d101      	bne.n	8000c72 <HAL_PCD_EP_Close+0x6a>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e00e      	b.n	8000c90 <HAL_PCD_EP_Close+0x88>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68f9      	ldr	r1, [r7, #12]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fb0f 	bl	80032a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ca8:	7afb      	ldrb	r3, [r7, #11]
 8000caa:	f003 0207 	and.w	r2, r3, #7
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6979      	ldr	r1, [r7, #20]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fcc6 	bl	800367c <USB_EPStartXfer>

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	f003 0207 	and.w	r2, r3, #7
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000d1c:	681b      	ldr	r3, [r3, #0]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	460b      	mov	r3, r1
 8000d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d38:	7afb      	ldrb	r3, [r7, #11]
 8000d3a:	f003 0207 	and.w	r2, r3, #7
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	3310      	adds	r3, #16
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2201      	movs	r2, #1
 8000d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6979      	ldr	r1, [r7, #20]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fc78 	bl	800367c <USB_EPStartXfer>

  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	7912      	ldrb	r2, [r2, #4]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d901      	bls.n	8000db4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e04c      	b.n	8000e4e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da0e      	bge.n	8000dda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	f003 0207 	and.w	r2, r3, #7
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	3310      	adds	r3, #16
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	705a      	strb	r2, [r3, #1]
 8000dd8:	e00c      	b.n	8000df4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2201      	movs	r2, #1
 8000df8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_PCD_EP_SetStall+0x7e>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e01c      	b.n	8000e4e <HAL_PCD_EP_SetStall+0xb8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 ffdb 	bl	8004dde <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d108      	bne.n	8000e44 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f004 f900 	bl	8005044 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	7912      	ldrb	r2, [r2, #4]
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d901      	bls.n	8000e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e040      	b.n	8000ef6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	da0e      	bge.n	8000e9a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	f003 0207 	and.w	r2, r3, #7
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	3310      	adds	r3, #16
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2201      	movs	r2, #1
 8000e96:	705a      	strb	r2, [r3, #1]
 8000e98:	e00e      	b.n	8000eb8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	f003 0207 	and.w	r2, r3, #7
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_PCD_EP_ClrStall+0x82>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e00e      	b.n	8000ef6 <HAL_PCD_EP_ClrStall+0xa0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 ffc9 	bl	8004e7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b096      	sub	sp, #88	@ 0x58
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f06:	e3bb      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8000f22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 8175 	bne.w	8001216 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d14e      	bne.n	8000fd6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8000f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f48:	81fb      	strh	r3, [r7, #14]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	441a      	add	r2, r3
 8000f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f005 fed9 	bl	8006d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b5b      	ldrb	r3, [r3, #13]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8368 	beq.w	8001680 <PCD_EP_ISR_Handler+0x782>
 8000fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 8363 	bne.w	8001680 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7b5b      	ldrb	r3, [r3, #13]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	735a      	strb	r2, [r3, #13]
 8000fd4:	e354      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000fdc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d034      	beq.n	800105e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	461a      	mov	r2, r3
 8001000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	3306      	adds	r3, #6
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	4413      	add	r3, r2
 8001012:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800101c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800101e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800102a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800102c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800102e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001030:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001032:	b29b      	uxth	r3, r3
 8001034:	f004 f856 	bl	80050e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001044:	4013      	ands	r3, r2
 8001046:	823b      	strh	r3, [r7, #16]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	8a3a      	ldrh	r2, [r7, #16]
 800104e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001052:	b292      	uxth	r2, r2
 8001054:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f005 fe50 	bl	8006cfc <HAL_PCD_SetupStageCallback>
 800105c:	e310      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800105e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001062:	2b00      	cmp	r3, #0
 8001064:	f280 830c 	bge.w	8001680 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001074:	4013      	ands	r3, r2
 8001076:	83fb      	strh	r3, [r7, #30]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	8bfa      	ldrh	r2, [r7, #30]
 800107e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001082:	b292      	uxth	r2, r2
 8001084:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800108e:	b29b      	uxth	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	3306      	adds	r3, #6
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d019      	beq.n	80010ee <PCD_EP_ISR_Handler+0x1f0>
 80010ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010c8:	6959      	ldr	r1, [r3, #20]
 80010ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80010ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f004 f806 	bl	80050e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80010d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	441a      	add	r2, r3
 80010e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80010e6:	2100      	movs	r1, #0
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f005 fe19 	bl	8006d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80010fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001100:	2b00      	cmp	r3, #0
 8001102:	f040 82bd 	bne.w	8001680 <PCD_EP_ISR_Handler+0x782>
 8001106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800110a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800110e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001112:	f000 82b5 	beq.w	8001680 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	4413      	add	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001140:	b29a      	uxth	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	801a      	strh	r2, [r3, #0]
 8001146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b3e      	cmp	r3, #62	@ 0x3e
 800114c:	d91d      	bls.n	800118a <PCD_EP_ISR_Handler+0x28c>
 800114e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
 8001156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <PCD_EP_ISR_Handler+0x26a>
 8001162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001164:	3b01      	subs	r3, #1
 8001166:	647b      	str	r3, [r7, #68]	@ 0x44
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29a      	uxth	r2, r3
 800116e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001170:	b29b      	uxth	r3, r3
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	b29b      	uxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800117e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001182:	b29a      	uxth	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	801a      	strh	r2, [r3, #0]
 8001188:	e026      	b.n	80011d8 <PCD_EP_ISR_Handler+0x2da>
 800118a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <PCD_EP_ISR_Handler+0x2aa>
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800119c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	801a      	strh	r2, [r3, #0]
 80011a6:	e017      	b.n	80011d8 <PCD_EP_ISR_Handler+0x2da>
 80011a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80011b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <PCD_EP_ISR_Handler+0x2c4>
 80011bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011be:	3301      	adds	r3, #1
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	029b      	lsls	r3, r3, #10
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011e8:	827b      	strh	r3, [r7, #18]
 80011ea:	8a7b      	ldrh	r3, [r7, #18]
 80011ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80011f0:	827b      	strh	r3, [r7, #18]
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80011f8:	827b      	strh	r3, [r7, #18]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	8a7b      	ldrh	r3, [r7, #18]
 8001200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001210:	b29b      	uxth	r3, r3
 8001212:	8013      	strh	r3, [r2, #0]
 8001214:	e234      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800122a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800122e:	2b00      	cmp	r3, #0
 8001230:	f280 80fc 	bge.w	800142c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800124a:	4013      	ands	r3, r2
 800124c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001266:	b292      	uxth	r2, r2
 8001268:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800126a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001282:	7b1b      	ldrb	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d125      	bne.n	80012d4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4413      	add	r3, r2
 800129c:	3306      	adds	r3, #6
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80012b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8092 	beq.w	80013e2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012c4:	6959      	ldr	r1, [r3, #20]
 80012c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012c8:	88da      	ldrh	r2, [r3, #6]
 80012ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80012ce:	f003 ff09 	bl	80050e4 <USB_ReadPMA>
 80012d2:	e086      	b.n	80013e2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d10a      	bne.n	80012f2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80012e0:	461a      	mov	r2, r3
 80012e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f9d9 	bl	800169c <HAL_PCD_EP_DB_Receive>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80012f0:	e077      	b.n	80013e2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800130c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	441a      	add	r2, r3
 800131e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800132a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800132e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001332:	b29b      	uxth	r3, r3
 8001334:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d024      	beq.n	800139a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001358:	b29b      	uxth	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	3302      	adds	r3, #2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001378:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800137c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02e      	beq.n	80013e2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138a:	6959      	ldr	r1, [r3, #20]
 800138c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800138e:	891a      	ldrh	r2, [r3, #8]
 8001390:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001394:	f003 fea6 	bl	80050e4 <USB_ReadPMA>
 8001398:	e023      	b.n	80013e2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	3306      	adds	r3, #6
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80013c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013d4:	6959      	ldr	r1, [r3, #20]
 80013d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013d8:	895a      	ldrh	r2, [r3, #10]
 80013da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013de:	f003 fe81 	bl	80050e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80013e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013ea:	441a      	add	r2, r3
 80013ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013f8:	441a      	add	r2, r3
 80013fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <PCD_EP_ISR_Handler+0x514>
 8001406:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800140a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	429a      	cmp	r2, r3
 8001410:	d206      	bcs.n	8001420 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f005 fc81 	bl	8006d20 <HAL_PCD_DataOutStageCallback>
 800141e:	e005      	b.n	800142c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001426:	4618      	mov	r0, r3
 8001428:	f002 f928 	bl	800367c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800142c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 8123 	beq.w	8001680 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800143a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	3310      	adds	r3, #16
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001468:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	441a      	add	r2, r3
 800147a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800147e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001486:	b29b      	uxth	r3, r3
 8001488:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800148a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	2b01      	cmp	r3, #1
 8001490:	f040 80a2 	bne.w	80015d8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800149a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800149c:	7b1b      	ldrb	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8093 	beq.w	80015ca <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d046      	beq.n	800153e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b2:	785b      	ldrb	r3, [r3, #1]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d126      	bne.n	8001506 <PCD_EP_ISR_Handler+0x608>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	4413      	add	r3, r2
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	011a      	lsls	r2, r3, #4
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	4413      	add	r3, r2
 80014da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014fe:	b29a      	uxth	r2, r3
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	e061      	b.n	80015ca <PCD_EP_ISR_Handler+0x6cc>
 8001506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d15d      	bne.n	80015ca <PCD_EP_ISR_Handler+0x6cc>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001522:	4413      	add	r3, r2
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	011a      	lsls	r2, r3, #4
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	4413      	add	r3, r2
 8001530:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001538:	2200      	movs	r2, #0
 800153a:	801a      	strh	r2, [r3, #0]
 800153c:	e045      	b.n	80015ca <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d126      	bne.n	800159a <PCD_EP_ISR_Handler+0x69c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001560:	4413      	add	r3, r2
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
 8001564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	011a      	lsls	r2, r3, #4
 800156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156c:	4413      	add	r3, r2
 800156e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001572:	633b      	str	r3, [r7, #48]	@ 0x30
 8001574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b29b      	uxth	r3, r3
 800157a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800157e:	b29a      	uxth	r2, r3
 8001580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800158e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001592:	b29a      	uxth	r2, r3
 8001594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001596:	801a      	strh	r2, [r3, #0]
 8001598:	e017      	b.n	80015ca <PCD_EP_ISR_Handler+0x6cc>
 800159a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d113      	bne.n	80015ca <PCD_EP_ISR_Handler+0x6cc>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015b0:	4413      	add	r3, r2
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	011a      	lsls	r2, r3, #4
 80015ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015bc:	4413      	add	r3, r2
 80015be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015c6:	2200      	movs	r2, #0
 80015c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f005 fbc0 	bl	8006d56 <HAL_PCD_DataInStageCallback>
 80015d6:	e053      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d146      	bne.n	8001672 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	3302      	adds	r3, #2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800160c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001618:	429a      	cmp	r2, r3
 800161a:	d907      	bls.n	800162c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800161c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001624:	1ad2      	subs	r2, r2, r3
 8001626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001628:	619a      	str	r2, [r3, #24]
 800162a:	e002      	b.n	8001632 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800162c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800163a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f005 fb88 	bl	8006d56 <HAL_PCD_DataInStageCallback>
 8001646:	e01b      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001650:	441a      	add	r2, r3
 8001652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001654:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001658:	69da      	ldr	r2, [r3, #28]
 800165a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800165e:	441a      	add	r2, r3
 8001660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001662:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800166a:	4618      	mov	r0, r3
 800166c:	f002 f806 	bl	800367c <USB_EPStartXfer>
 8001670:	e006      	b.n	8001680 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001672:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001676:	461a      	mov	r2, r3
 8001678:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f91b 	bl	80018b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21b      	sxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f6ff ac3b 	blt.w	8000f08 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3758      	adds	r7, #88	@ 0x58
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d07e      	beq.n	80017b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016bc:	b29b      	uxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	3302      	adds	r3, #2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	8b7b      	ldrh	r3, [r7, #26]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d306      	bcc.n	80016f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	8b7b      	ldrh	r3, [r7, #26]
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e002      	b.n	80016fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d123      	bne.n	800174c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800171a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800171e:	833b      	strh	r3, [r7, #24]
 8001720:	8b3b      	ldrh	r3, [r7, #24]
 8001722:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001726:	833b      	strh	r3, [r7, #24]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	441a      	add	r2, r3
 8001736:	8b3b      	ldrh	r3, [r7, #24]
 8001738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800173c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001748:	b29b      	uxth	r3, r3
 800174a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01f      	beq.n	8001796 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800176c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001770:	82fb      	strh	r3, [r7, #22]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	441a      	add	r2, r3
 8001780:	8afb      	ldrh	r3, [r7, #22]
 8001782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001792:	b29b      	uxth	r3, r3
 8001794:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001796:	8b7b      	ldrh	r3, [r7, #26]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8087 	beq.w	80018ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	6959      	ldr	r1, [r3, #20]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	891a      	ldrh	r2, [r3, #8]
 80017aa:	8b7b      	ldrh	r3, [r7, #26]
 80017ac:	f003 fc9a 	bl	80050e4 <USB_ReadPMA>
 80017b0:	e07c      	b.n	80018ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	3306      	adds	r3, #6
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	699a      	ldr	r2, [r3, #24]
 80017e0:	8b7b      	ldrh	r3, [r7, #26]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d306      	bcc.n	80017f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	8b7b      	ldrh	r3, [r7, #26]
 80017ec:	1ad2      	subs	r2, r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	619a      	str	r2, [r3, #24]
 80017f2:	e002      	b.n	80017fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d123      	bne.n	800184a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800181c:	83fb      	strh	r3, [r7, #30]
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001824:	83fb      	strh	r3, [r7, #30]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	441a      	add	r2, r3
 8001834:	8bfb      	ldrh	r3, [r7, #30]
 8001836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800183a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800183e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001846:	b29b      	uxth	r3, r3
 8001848:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11f      	bne.n	8001894 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800186a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800186e:	83bb      	strh	r3, [r7, #28]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	441a      	add	r2, r3
 800187e:	8bbb      	ldrh	r3, [r7, #28]
 8001880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800188c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001890:	b29b      	uxth	r3, r3
 8001892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001894:	8b7b      	ldrh	r3, [r7, #26]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	6959      	ldr	r1, [r3, #20]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	895a      	ldrh	r2, [r3, #10]
 80018a6:	8b7b      	ldrh	r3, [r7, #26]
 80018a8:	f003 fc1c 	bl	80050e4 <USB_ReadPMA>
    }
  }

  return count;
 80018ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b0a4      	sub	sp, #144	@ 0x90
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 81dd 	beq.w	8001c8a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	3302      	adds	r3, #2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001904:	429a      	cmp	r2, r3
 8001906:	d907      	bls.n	8001918 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001910:	1ad2      	subs	r2, r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	619a      	str	r2, [r3, #24]
 8001916:	e002      	b.n	800191e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80b9 	bne.w	8001a9a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	785b      	ldrb	r3, [r3, #1]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d126      	bne.n	800197e <HAL_PCD_EP_DB_Transmit+0xc8>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	4413      	add	r3, r2
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	011a      	lsls	r2, r3, #4
 800194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001950:	4413      	add	r3, r2
 8001952:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001962:	b29a      	uxth	r2, r3
 8001964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001976:	b29a      	uxth	r2, r3
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	801a      	strh	r2, [r3, #0]
 800197c:	e01a      	b.n	80019b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	785b      	ldrb	r3, [r3, #1]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d116      	bne.n	80019b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	4413      	add	r3, r2
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	011a      	lsls	r2, r3, #4
 80019a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a6:	4413      	add	r3, r2
 80019a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d126      	bne.n	8001a10 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	011a      	lsls	r2, r3, #4
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	e017      	b.n	8001a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d113      	bne.n	8001a40 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	4413      	add	r3, r2
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	011a      	lsls	r2, r3, #4
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	4413      	add	r3, r2
 8001a34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f005 f985 	bl	8006d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 82fc 	beq.w	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a72:	82fb      	strh	r3, [r7, #22]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	441a      	add	r2, r3
 8001a82:	8afb      	ldrh	r3, [r7, #22]
 8001a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	8013      	strh	r3, [r2, #0]
 8001a98:	e2da      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d021      	beq.n	8001ae8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001abe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	441a      	add	r2, r3
 8001ad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	f040 82ae 	bne.w	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001afc:	441a      	add	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b0a:	441a      	add	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d30b      	bcc.n	8001b34 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	6a1a      	ldr	r2, [r3, #32]
 8001b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	621a      	str	r2, [r3, #32]
 8001b32:	e017      	b.n	8001b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001b4c:	e00a      	b.n	8001b64 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d165      	bne.n	8001c38 <HAL_PCD_EP_DB_Transmit+0x382>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b80:	4413      	add	r3, r2
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	011a      	lsls	r2, r3, #4
 8001b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba8:	2b3e      	cmp	r3, #62	@ 0x3e
 8001baa:	d91d      	bls.n	8001be8 <HAL_PCD_EP_DB_Transmit+0x332>
 8001bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PCD_EP_DB_Transmit+0x310>
 8001bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e044      	b.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_PCD_EP_DB_Transmit+0x350>
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	e035      	b.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c0a:	085b      	lsrs	r3, r3, #1
 8001c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	029b      	lsls	r3, r3, #10
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	e01c      	b.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d118      	bne.n	8001c72 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c54:	4413      	add	r3, r2
 8001c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	011a      	lsls	r2, r3, #4
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c60:	4413      	add	r3, r2
 8001c62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6959      	ldr	r1, [r3, #20]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	891a      	ldrh	r2, [r3, #8]
 8001c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f003 f9e9 	bl	800505a <USB_WritePMA>
 8001c88:	e1e2      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d307      	bcc.n	8001cd2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	619a      	str	r2, [r3, #24]
 8001cd0:	e002      	b.n	8001cd8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 80c0 	bne.w	8001e62 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d126      	bne.n	8001d38 <HAL_PCD_EP_DB_Transmit+0x482>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001cfe:	4413      	add	r3, r2
 8001d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	011a      	lsls	r2, r3, #4
 8001d08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	e01a      	b.n	8001d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d116      	bne.n	8001d6e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d54:	4413      	add	r3, r2
 8001d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	011a      	lsls	r2, r3, #4
 8001d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d60:	4413      	add	r3, r2
 8001d62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d90:	4413      	add	r3, r2
 8001d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	011a      	lsls	r2, r3, #4
 8001d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001da2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e017      	b.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d113      	bne.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dea:	4413      	add	r3, r2
 8001dec:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	011a      	lsls	r2, r3, #4
 8001df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001df6:	4413      	add	r3, r2
 8001df8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e00:	2200      	movs	r2, #0
 8001e02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f004 ffa3 	bl	8006d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 811a 	bne.w	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e36:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]
 8001e60:	e0f6      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d121      	bne.n	8001eb0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	441a      	add	r2, r3
 8001e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 80ca 	bne.w	8002050 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ed2:	441a      	add	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d30b      	bcc.n	8001efc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	e017      	b.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d108      	bne.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001f14:	e00a      	b.n	8001f2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d165      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0x750>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f4e:	4413      	add	r3, r2
 8001f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	011a      	lsls	r2, r3, #4
 8001f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f76:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f78:	d91d      	bls.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x700>
 8001f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_PCD_EP_DB_Transmit+0x6de>
 8001f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f90:	3b01      	subs	r3, #1
 8001f92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	e041      	b.n	800203a <HAL_PCD_EP_DB_Transmit+0x784>
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	e032      	b.n	800203a <HAL_PCD_EP_DB_Transmit+0x784>
 8001fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_PCD_EP_DB_Transmit+0x738>
 8001fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fea:	3301      	adds	r3, #1
 8001fec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002002:	801a      	strh	r2, [r3, #0]
 8002004:	e019      	b.n	800203a <HAL_PCD_EP_DB_Transmit+0x784>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	785b      	ldrb	r3, [r3, #1]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d115      	bne.n	800203a <HAL_PCD_EP_DB_Transmit+0x784>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	4413      	add	r3, r2
 800201e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	011a      	lsls	r2, r3, #4
 8002026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002028:	4413      	add	r3, r2
 800202a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800202e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002034:	b29a      	uxth	r2, r3
 8002036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002038:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6959      	ldr	r1, [r3, #20]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	895a      	ldrh	r2, [r3, #10]
 8002046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800204a:	b29b      	uxth	r3, r3
 800204c:	f003 f805 	bl	800505a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800206a:	82bb      	strh	r3, [r7, #20]
 800206c:	8abb      	ldrh	r3, [r7, #20]
 800206e:	f083 0310 	eor.w	r3, r3, #16
 8002072:	82bb      	strh	r3, [r7, #20]
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	f083 0320 	eor.w	r3, r3, #32
 800207a:	82bb      	strh	r3, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	441a      	add	r2, r3
 800208a:	8abb      	ldrh	r3, [r7, #20]
 800208c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3790      	adds	r7, #144	@ 0x90
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
 80020b8:	4613      	mov	r3, r2
 80020ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020bc:	897b      	ldrh	r3, [r7, #10]
 80020be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	f003 0207 	and.w	r2, r3, #7
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	3310      	adds	r3, #16
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020e0:	897a      	ldrh	r2, [r7, #10]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020f4:	893b      	ldrh	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d107      	bne.n	800210a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	b29a      	uxth	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	80da      	strh	r2, [r3, #6]
 8002108:	e00b      	b.n	8002122 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2201      	movs	r2, #1
 800210e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	b29a      	uxth	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b29a      	uxth	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e272      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002150:	4b92      	ldr	r3, [pc, #584]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00c      	beq.n	8002176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4b8f      	ldr	r3, [pc, #572]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d112      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
 8002168:	4b8c      	ldr	r3, [pc, #560]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002174:	d10b      	bne.n	800218e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	4b89      	ldr	r3, [pc, #548]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d06c      	beq.n	800225c <HAL_RCC_OscConfig+0x12c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d168      	bne.n	800225c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e24c      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x76>
 8002198:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7f      	ldr	r2, [pc, #508]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e02e      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b7b      	ldr	r3, [pc, #492]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7a      	ldr	r2, [pc, #488]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b78      	ldr	r3, [pc, #480]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a77      	ldr	r2, [pc, #476]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e01d      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0xbc>
 80021d2:	4b72      	ldr	r3, [pc, #456]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a71      	ldr	r2, [pc, #452]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b6f      	ldr	r3, [pc, #444]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6e      	ldr	r2, [pc, #440]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xd4>
 80021ec:	4b6b      	ldr	r3, [pc, #428]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a67      	ldr	r2, [pc, #412]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe f918 	bl	8000440 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe f914 	bl	8000440 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e200      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0xe4>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe f904 	bl	8000440 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe f900 	bl	8000440 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1ec      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x10c>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d11c      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1c0      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4939      	ldr	r1, [pc, #228]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	e03a      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe f8b9 	bl	8000440 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fe f8b5 	bl	8000440 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4927      	ldr	r1, [pc, #156]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe f898 	bl	8000440 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe f894 	bl	8000440 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e180      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d03a      	beq.n	80023b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe f878 	bl	8000440 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7fe f874 	bl	8000440 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e160      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_OscConfig+0x26c>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 fa9c 	bl	80028b0 <RCC_Delay>
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_RCC_OscConfig+0x274>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe f85e 	bl	8000440 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002386:	e00f      	b.n	80023a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe f85a 	bl	8000440 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d908      	bls.n	80023a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e146      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	42420000 	.word	0x42420000
 80023a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	4b92      	ldr	r3, [pc, #584]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e9      	bne.n	8002388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a6 	beq.w	800250e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8b      	ldr	r3, [pc, #556]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b88      	ldr	r3, [pc, #544]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a87      	ldr	r2, [pc, #540]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
 80023de:	4b85      	ldr	r3, [pc, #532]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b82      	ldr	r3, [pc, #520]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b7f      	ldr	r3, [pc, #508]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7e      	ldr	r2, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe f81b 	bl	8000440 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7fe f817 	bl	8000440 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	@ 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e103      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b75      	ldr	r3, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x4c8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x312>
 8002434:	4b6f      	ldr	r3, [pc, #444]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a6e      	ldr	r2, [pc, #440]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x334>
 800244a:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a69      	ldr	r2, [pc, #420]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x356>
 800246c:	4b61      	ldr	r3, [pc, #388]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a60      	ldr	r2, [pc, #384]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	4b5e      	ldr	r3, [pc, #376]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a5d      	ldr	r2, [pc, #372]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6213      	str	r3, [r2, #32]
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x36e>
 8002486:	4b5b      	ldr	r3, [pc, #364]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a5a      	ldr	r2, [pc, #360]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b58      	ldr	r3, [pc, #352]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a57      	ldr	r2, [pc, #348]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fd ffcb 	bl	8000440 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fd ffc7 	bl	8000440 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0b1      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4b      	ldr	r3, [pc, #300]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x37e>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fd ffb5 	bl	8000440 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fd ffb1 	bl	8000440 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b40      	ldr	r3, [pc, #256]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3c      	ldr	r3, [pc, #240]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	4a3b      	ldr	r2, [pc, #236]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8087 	beq.w	8002626 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d061      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d146      	bne.n	80025ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b33      	ldr	r3, [pc, #204]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fd ff85 	bl	8000440 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fd ff81 	bl	8000440 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e06d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254c:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d108      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4921      	ldr	r1, [pc, #132]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a19      	ldr	r1, [r3, #32]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	430b      	orrs	r3, r1
 8002586:	491b      	ldr	r1, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fd ff55 	bl	8000440 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fd ff51 	bl	8000440 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03d      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x46a>
 80025b8:	e035      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fd ff3e 	bl	8000440 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fd ff3a 	bl	8000440 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e026      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x498>
 80025e6:	e01e      	b.n	8002626 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e019      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_OscConfig+0x500>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fd fe8c 	bl	8000440 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fd fe88 	bl	8000440 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fdea 	bl	80003bc <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080072bc 	.word	0x080072bc
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e027      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e027      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	fb03 f202 	mul.w	r2, r3, r2
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e004      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	080072cc 	.word	0x080072cc
 80028a8:	080072dc 	.word	0x080072dc
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d07d      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b46      	ldr	r3, [pc, #280]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002940:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a42      	ldr	r2, [pc, #264]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294c:	f7fd fd78 	bl	8000440 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	e008      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fd fd74 	bl	8000440 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e06d      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b3a      	ldr	r3, [pc, #232]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002972:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d027      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fd fd43 	bl	8000440 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fd fd3f 	bl	8000440 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4917      	ldr	r1, [pc, #92]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	490b      	ldr	r1, [pc, #44]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4904      	ldr	r1, [pc, #16]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420440 	.word	0x42420440

08002a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4638      	mov	r0, r7
 8002a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a82:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002a86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002aa6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002aaa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	4638      	mov	r0, r7
 8002af4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b09d      	sub	sp, #116	@ 0x74
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8002b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	78db      	ldrb	r3, [r3, #3]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d81f      	bhi.n	8002b96 <USB_ActivateEndpoint+0x72>
 8002b56:	a201      	add	r2, pc, #4	@ (adr r2, 8002b5c <USB_ActivateEndpoint+0x38>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	08002b9f 	.word	0x08002b9f
 8002b68:	08002b7b 	.word	0x08002b7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002b70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002b78:	e012      	b.n	8002ba0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002b7e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002b82:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002b86:	e00b      	b.n	8002ba0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002b8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002b94:	e004      	b.n	8002ba0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8002b9c:	e000      	b.n	8002ba0 <USB_ActivateEndpoint+0x7c>
      break;
 8002b9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7b1b      	ldrb	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 8178 	bne.w	8002f00 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8084 	beq.w	8002d22 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	011a      	lsls	r2, r3, #4
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	88db      	ldrh	r3, [r3, #6]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	827b      	strh	r3, [r7, #18]
 8002c5c:	8a7b      	ldrh	r3, [r7, #18]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <USB_ActivateEndpoint+0x17a>
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7c:	823b      	strh	r3, [r7, #16]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	8a3b      	ldrh	r3, [r7, #16]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d020      	beq.n	8002ce8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cbc:	81bb      	strh	r3, [r7, #12]
 8002cbe:	89bb      	ldrh	r3, [r7, #12]
 8002cc0:	f083 0320 	eor.w	r3, r3, #32
 8002cc4:	81bb      	strh	r3, [r7, #12]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	441a      	add	r2, r3
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	8013      	strh	r3, [r2, #0]
 8002ce6:	e2d5      	b.n	8003294 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfe:	81fb      	strh	r3, [r7, #14]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8013      	strh	r3, [r2, #0]
 8002d20:	e2b8      	b.n	8003294 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	4413      	add	r3, r2
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	011a      	lsls	r2, r3, #4
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	88db      	ldrh	r3, [r3, #6]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d54:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	4413      	add	r3, r2
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	011a      	lsls	r2, r3, #4
 8002d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d72:	4413      	add	r3, r2
 8002d74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d90:	d91d      	bls.n	8002dce <USB_ActivateEndpoint+0x2aa>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <USB_ActivateEndpoint+0x288>
 8002da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da8:	3b01      	subs	r3, #1
 8002daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	801a      	strh	r2, [r3, #0]
 8002dcc:	e026      	b.n	8002e1c <USB_ActivateEndpoint+0x2f8>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <USB_ActivateEndpoint+0x2c8>
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e017      	b.n	8002e1c <USB_ActivateEndpoint+0x2f8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <USB_ActivateEndpoint+0x2e2>
 8002e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e02:	3301      	adds	r3, #1
 8002e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002e2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <USB_ActivateEndpoint+0x348>
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4a:	843b      	strh	r3, [r7, #32]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	8c3b      	ldrh	r3, [r7, #32]
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d124      	bne.n	8002ebe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8a:	83bb      	strh	r3, [r7, #28]
 8002e8c:	8bbb      	ldrh	r3, [r7, #28]
 8002e8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002e92:	83bb      	strh	r3, [r7, #28]
 8002e94:	8bbb      	ldrh	r3, [r7, #28]
 8002e96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e9a:	83bb      	strh	r3, [r7, #28]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	8bbb      	ldrh	r3, [r7, #28]
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	e1ea      	b.n	8003294 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed4:	83fb      	strh	r3, [r7, #30]
 8002ed6:	8bfb      	ldrh	r3, [r7, #30]
 8002ed8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002edc:	83fb      	strh	r3, [r7, #30]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	8bfb      	ldrh	r3, [r7, #30]
 8002eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]
 8002efe:	e1c9      	b.n	8003294 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	78db      	ldrb	r3, [r3, #3]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d11e      	bne.n	8002f46 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f38:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
 8002f44:	e01d      	b.n	8002f82 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8002f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f92:	4413      	add	r3, r2
 8002f94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	011a      	lsls	r2, r3, #4
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	891b      	ldrh	r3, [r3, #8]
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	4413      	add	r3, r2
 8002fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	011a      	lsls	r2, r3, #4
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	895b      	ldrh	r3, [r3, #10]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8093 	bne.w	800311a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <USB_ActivateEndpoint+0x524>
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003056:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <USB_ActivateEndpoint+0x574>
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003090:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003094:	b29b      	uxth	r3, r3
 8003096:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800310c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003114:	b29b      	uxth	r3, r3
 8003116:	8013      	strh	r3, [r2, #0]
 8003118:	e0bc      	b.n	8003294 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800312a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01d      	beq.n	8003172 <USB_ActivateEndpoint+0x64e>
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800315e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003166:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003182:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <USB_ActivateEndpoint+0x6a6>
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80031b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	78db      	ldrb	r3, [r3, #3]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d024      	beq.n	800321c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80031ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80031f0:	f083 0320 	eor.w	r3, r3, #32
 80031f4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800322e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003232:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800324c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800326a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003294:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003298:	4618      	mov	r0, r3
 800329a:	3774      	adds	r7, #116	@ 0x74
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b08d      	sub	sp, #52	@ 0x34
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7b1b      	ldrb	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 808e 	bne.w	80033d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d044      	beq.n	800334a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	81bb      	strh	r3, [r7, #12]
 80032ce:	89bb      	ldrh	r3, [r7, #12]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <USB_DeactivateEndpoint+0x6c>
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ee:	817b      	strh	r3, [r7, #10]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003308:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003326:	813b      	strh	r3, [r7, #8]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800333c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]
 8003348:	e192      	b.n	8003670 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	827b      	strh	r3, [r7, #18]
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01b      	beq.n	800339a <USB_DeactivateEndpoint+0xf6>
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003378:	823b      	strh	r3, [r7, #16]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	441a      	add	r2, r3
 8003384:	8a3b      	ldrh	r3, [r7, #16]
 8003386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800338a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800338e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b0:	81fb      	strh	r3, [r7, #14]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	89fb      	ldrh	r3, [r7, #14]
 80033be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	8013      	strh	r3, [r2, #0]
 80033d2:	e14d      	b.n	8003670 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f040 80a5 	bne.w	8003528 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	843b      	strh	r3, [r7, #32]
 80033ec:	8c3b      	ldrh	r3, [r7, #32]
 80033ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01b      	beq.n	800342e <USB_DeactivateEndpoint+0x18a>
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340c:	83fb      	strh	r3, [r7, #30]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003422:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	83bb      	strh	r3, [r7, #28]
 800343c:	8bbb      	ldrh	r3, [r7, #28]
 800343e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01b      	beq.n	800347e <USB_DeactivateEndpoint+0x1da>
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345c:	837b      	strh	r3, [r7, #26]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	8b7b      	ldrh	r3, [r7, #26]
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003476:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003494:	833b      	strh	r3, [r7, #24]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	8b3b      	ldrh	r3, [r7, #24]
 80034a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034cc:	82fb      	strh	r3, [r7, #22]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	441a      	add	r2, r3
 80034d8:	8afb      	ldrh	r3, [r7, #22]
 80034da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003504:	82bb      	strh	r3, [r7, #20]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	441a      	add	r2, r3
 8003510:	8abb      	ldrh	r3, [r7, #20]
 8003512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800351a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003522:	b29b      	uxth	r3, r3
 8003524:	8013      	strh	r3, [r2, #0]
 8003526:	e0a3      	b.n	8003670 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003536:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <USB_DeactivateEndpoint+0x2d4>
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800356c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003574:	b29b      	uxth	r3, r3
 8003576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003586:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <USB_DeactivateEndpoint+0x324>
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	441a      	add	r2, r3
 80035ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003616:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800362c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800365c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800366c:	b29b      	uxth	r3, r3
 800366e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3734      	adds	r7, #52	@ 0x34
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0c2      	sub	sp, #264	@ 0x108
 8003680:	af00      	add	r7, sp, #0
 8003682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800368a:	6018      	str	r0, [r3, #0]
 800368c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003694:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800369a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 86b7 	bne.w	8004416 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d908      	bls.n	80036d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80036c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036d4:	e007      	b.n	80036e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80036d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80036e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	7b1b      	ldrb	r3, [r3, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13a      	bne.n	800376c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80036f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6959      	ldr	r1, [r3, #20]
 8003702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	88da      	ldrh	r2, [r3, #6]
 800370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003712:	b29b      	uxth	r3, r3
 8003714:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003718:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800371c:	6800      	ldr	r0, [r0, #0]
 800371e:	f001 fc9c 	bl	800505a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800374a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	011a      	lsls	r2, r3, #4
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	f000 be1f 	b.w	80043aa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800376c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	78db      	ldrb	r3, [r3, #3]
 8003778:	2b02      	cmp	r3, #2
 800377a:	f040 8462 	bne.w	8004042 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800377e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800378e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	f240 83df 	bls.w	8003f5a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800379c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80037c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80037e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80037f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80037f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1a      	ldr	r2, [r3, #32]
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800380e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800381a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 81c7 	beq.w	8003bcc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800383e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
 800384a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800384e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d177      	bne.n	800394a <USB_EPStartXfer+0x2ce>
 800385a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800385e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800386a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	4413      	add	r3, r2
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800387e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	011a      	lsls	r2, r3, #4
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	4413      	add	r3, r2
 8003890:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80038ac:	d921      	bls.n	80038f2 <USB_EPStartXfer+0x276>
 80038ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <USB_EPStartXfer+0x252>
 80038c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80038c8:	3b01      	subs	r3, #1
 80038ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80038d8:	b29b      	uxth	r3, r3
 80038da:	029b      	lsls	r3, r3, #10
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	e050      	b.n	8003994 <USB_EPStartXfer+0x318>
 80038f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <USB_EPStartXfer+0x294>
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003908:	b29a      	uxth	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	e041      	b.n	8003994 <USB_EPStartXfer+0x318>
 8003910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <USB_EPStartXfer+0x2b4>
 8003926:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800392a:	3301      	adds	r3, #1
 800392c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29a      	uxth	r2, r3
 8003936:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800393a:	b29b      	uxth	r3, r3
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	b29b      	uxth	r3, r3
 8003940:	4313      	orrs	r3, r2
 8003942:	b29a      	uxth	r2, r3
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e024      	b.n	8003994 <USB_EPStartXfer+0x318>
 800394a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800394e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d11c      	bne.n	8003994 <USB_EPStartXfer+0x318>
 800395a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800395e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003968:	b29b      	uxth	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	4413      	add	r3, r2
 8003970:	633b      	str	r3, [r7, #48]	@ 0x30
 8003972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	011a      	lsls	r2, r3, #4
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	4413      	add	r3, r2
 8003984:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	b29a      	uxth	r2, r3
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	895b      	ldrh	r3, [r3, #10]
 80039a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6959      	ldr	r1, [r3, #20]
 80039b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80039ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80039be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80039c2:	6800      	ldr	r0, [r0, #0]
 80039c4:	f001 fb49 	bl	800505a <USB_WritePMA>
            ep->xfer_buff += len;
 80039c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d8:	441a      	add	r2, r3
 80039da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90f      	bls.n	8003a22 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	e00e      	b.n	8003a40 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d177      	bne.n	8003b40 <USB_EPStartXfer+0x4c4>
 8003a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003aa2:	d921      	bls.n	8003ae8 <USB_EPStartXfer+0x46c>
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <USB_EPStartXfer+0x448>
 8003aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e056      	b.n	8003b96 <USB_EPStartXfer+0x51a>
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <USB_EPStartXfer+0x48a>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	e047      	b.n	8003b96 <USB_EPStartXfer+0x51a>
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <USB_EPStartXfer+0x4aa>
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	e02a      	b.n	8003b96 <USB_EPStartXfer+0x51a>
 8003b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d122      	bne.n	8003b96 <USB_EPStartXfer+0x51a>
 8003b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	4413      	add	r3, r2
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	891b      	ldrh	r3, [r3, #8]
 8003ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003bbc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003bc0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003bc4:	6800      	ldr	r0, [r0, #0]
 8003bc6:	f001 fa48 	bl	800505a <USB_WritePMA>
 8003bca:	e3ee      	b.n	80043aa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d177      	bne.n	8003ccc <USB_EPStartXfer+0x650>
 8003bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bfc:	4413      	add	r3, r2
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	011a      	lsls	r2, r3, #4
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c10:	4413      	add	r3, r2
 8003c12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c26:	801a      	strh	r2, [r3, #0]
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c2e:	d921      	bls.n	8003c74 <USB_EPStartXfer+0x5f8>
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <USB_EPStartXfer+0x5d4>
 8003c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e056      	b.n	8003d22 <USB_EPStartXfer+0x6a6>
 8003c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <USB_EPStartXfer+0x616>
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e047      	b.n	8003d22 <USB_EPStartXfer+0x6a6>
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <USB_EPStartXfer+0x636>
 8003ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cac:	3301      	adds	r3, #1
 8003cae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	029b      	lsls	r3, r3, #10
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e02a      	b.n	8003d22 <USB_EPStartXfer+0x6a6>
 8003ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d122      	bne.n	8003d22 <USB_EPStartXfer+0x6a6>
 8003cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfc:	4413      	add	r3, r2
 8003cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	011a      	lsls	r2, r3, #4
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d10:	4413      	add	r3, r2
 8003d12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	891b      	ldrh	r3, [r3, #8]
 8003d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6959      	ldr	r1, [r3, #20]
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003d48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003d4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003d50:	6800      	ldr	r0, [r0, #0]
 8003d52:	f001 f982 	bl	800505a <USB_WritePMA>
            ep->xfer_buff += len;
 8003d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d66:	441a      	add	r2, r3
 8003d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d90f      	bls.n	8003db0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	621a      	str	r2, [r3, #32]
 8003dae:	e00e      	b.n	8003dce <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d177      	bne.n	8003eda <USB_EPStartXfer+0x85e>
 8003dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0a:	4413      	add	r3, r2
 8003e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	011a      	lsls	r2, r3, #4
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e3c:	d921      	bls.n	8003e82 <USB_EPStartXfer+0x806>
 8003e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <USB_EPStartXfer+0x7e2>
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	029b      	lsls	r3, r3, #10
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	e050      	b.n	8003f24 <USB_EPStartXfer+0x8a8>
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <USB_EPStartXfer+0x824>
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	e041      	b.n	8003f24 <USB_EPStartXfer+0x8a8>
 8003ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <USB_EPStartXfer+0x844>
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	e024      	b.n	8003f24 <USB_EPStartXfer+0x8a8>
 8003eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d11c      	bne.n	8003f24 <USB_EPStartXfer+0x8a8>
 8003eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efe:	4413      	add	r3, r2
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011a      	lsls	r2, r3, #4
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	895b      	ldrh	r3, [r3, #10]
 8003f30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6959      	ldr	r1, [r3, #20]
 8003f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003f4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f52:	6800      	ldr	r0, [r0, #0]
 8003f54:	f001 f881 	bl	800505a <USB_WritePMA>
 8003f58:	e227      	b.n	80043aa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f90:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe6:	4413      	add	r3, r2
 8003fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	011a      	lsls	r2, r3, #4
 8003ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004000:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004006:	b29a      	uxth	r2, r3
 8004008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800400a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800400c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	891b      	ldrh	r3, [r3, #8]
 8004018:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800401c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6959      	ldr	r1, [r3, #20]
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	b29b      	uxth	r3, r3
 800402e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004032:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004036:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f001 f80d 	bl	800505a <USB_WritePMA>
 8004040:	e1b3      	b.n	80043aa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	1ad2      	subs	r2, r2, r3
 8004054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800406e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80c6 	beq.w	8004214 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	673b      	str	r3, [r7, #112]	@ 0x70
 8004094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d177      	bne.n	8004194 <USB_EPStartXfer+0xb18>
 80040a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c4:	4413      	add	r3, r2
 80040c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	011a      	lsls	r2, r3, #4
 80040d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040d8:	4413      	add	r3, r2
 80040da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80040f6:	d921      	bls.n	800413c <USB_EPStartXfer+0xac0>
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <USB_EPStartXfer+0xa9c>
 800410e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004112:	3b01      	subs	r3, #1
 8004114:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29a      	uxth	r2, r3
 800411e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004122:	b29b      	uxth	r3, r3
 8004124:	029b      	lsls	r3, r3, #10
 8004126:	b29b      	uxth	r3, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004134:	b29a      	uxth	r2, r3
 8004136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004138:	801a      	strh	r2, [r3, #0]
 800413a:	e050      	b.n	80041de <USB_EPStartXfer+0xb62>
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <USB_EPStartXfer+0xade>
 8004144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004152:	b29a      	uxth	r2, r3
 8004154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	e041      	b.n	80041de <USB_EPStartXfer+0xb62>
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <USB_EPStartXfer+0xafe>
 8004170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004174:	3301      	adds	r3, #1
 8004176:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800417a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29a      	uxth	r2, r3
 8004180:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004184:	b29b      	uxth	r3, r3
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	b29b      	uxth	r3, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e024      	b.n	80041de <USB_EPStartXfer+0xb62>
 8004194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d11c      	bne.n	80041de <USB_EPStartXfer+0xb62>
 80041a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041b8:	4413      	add	r3, r2
 80041ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80041bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041cc:	4413      	add	r3, r2
 80041ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80041de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	895b      	ldrh	r3, [r3, #10]
 80041ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6959      	ldr	r1, [r3, #20]
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004204:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004208:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800420c:	6800      	ldr	r0, [r0, #0]
 800420e:	f000 ff24 	bl	800505a <USB_WritePMA>
 8004212:	e0ca      	b.n	80043aa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d177      	bne.n	8004314 <USB_EPStartXfer+0xc98>
 8004224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004244:	4413      	add	r3, r2
 8004246:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800424c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004258:	4413      	add	r3, r2
 800425a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800425e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	b29a      	uxth	r2, r3
 800426c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004274:	2b3e      	cmp	r3, #62	@ 0x3e
 8004276:	d921      	bls.n	80042bc <USB_EPStartXfer+0xc40>
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <USB_EPStartXfer+0xc1c>
 800428e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004292:	3b01      	subs	r3, #1
 8004294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	029b      	lsls	r3, r3, #10
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e05c      	b.n	8004376 <USB_EPStartXfer+0xcfa>
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <USB_EPStartXfer+0xc5e>
 80042c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	e04d      	b.n	8004376 <USB_EPStartXfer+0xcfa>
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <USB_EPStartXfer+0xc7e>
 80042f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80042f4:	3301      	adds	r3, #1
 80042f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004304:	b29b      	uxth	r3, r3
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	b29b      	uxth	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e030      	b.n	8004376 <USB_EPStartXfer+0xcfa>
 8004314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d128      	bne.n	8004376 <USB_EPStartXfer+0xcfa>
 8004324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004328:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004348:	4413      	add	r3, r2
 800434a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800434e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	011a      	lsls	r2, r3, #4
 800435c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004360:	4413      	add	r3, r2
 8004362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004366:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436e:	b29a      	uxth	r2, r3
 8004370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004374:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800437a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	891b      	ldrh	r3, [r3, #8]
 8004382:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6959      	ldr	r1, [r3, #20]
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004396:	b29b      	uxth	r3, r3
 8004398:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800439c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80043a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043a4:	6800      	ldr	r0, [r0, #0]
 80043a6:	f000 fe58 	bl	800505a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	f083 0310 	eor.w	r3, r3, #16
 80043d8:	817b      	strh	r3, [r7, #10]
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	f083 0320 	eor.w	r3, r3, #32
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	897b      	ldrh	r3, [r7, #10]
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]
 8004412:	f000 bcde 	b.w	8004dd2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800441a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80bb 	bne.w	800459e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699a      	ldr	r2, [r3, #24]
 8004434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d917      	bls.n	8004474 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004464:	1ad2      	subs	r2, r2, r3
 8004466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800446a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	619a      	str	r2, [r3, #24]
 8004472:	e00e      	b.n	8004492 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044b6:	4413      	add	r3, r2
 80044b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80044f2:	d924      	bls.n	800453e <USB_EPStartXfer+0xec2>
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <USB_EPStartXfer+0xe98>
 800450a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800450e:	3b01      	subs	r3, #1
 8004510:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004520:	b29b      	uxth	r3, r3
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	b29b      	uxth	r3, r3
 8004526:	4313      	orrs	r3, r2
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	f000 bc10 	b.w	8004d5e <USB_EPStartXfer+0x16e2>
 800453e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10c      	bne.n	8004560 <USB_EPStartXfer+0xee4>
 8004546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	e3fe      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <USB_EPStartXfer+0xf04>
 8004576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800457a:	3301      	adds	r3, #1
 800457c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29a      	uxth	r2, r3
 8004588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800458c:	b29b      	uxth	r3, r3
 800458e:	029b      	lsls	r3, r3, #10
 8004590:	b29b      	uxth	r3, r3
 8004592:	4313      	orrs	r3, r2
 8004594:	b29a      	uxth	r2, r3
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	e3df      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800459e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	78db      	ldrb	r3, [r3, #3]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	f040 8218 	bne.w	80049e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80045b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 809d 	bne.w	80046fc <USB_EPStartXfer+0x1080>
 80045c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045e6:	4413      	add	r3, r2
 80045e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	011a      	lsls	r2, r3, #4
 80045fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045fe:	4413      	add	r3, r2
 8004600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004614:	b29a      	uxth	r2, r3
 8004616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b3e      	cmp	r3, #62	@ 0x3e
 800462a:	d92b      	bls.n	8004684 <USB_EPStartXfer+0x1008>
 800462c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800463e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <USB_EPStartXfer+0xfe0>
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004656:	3b01      	subs	r3, #1
 8004658:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800465c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29a      	uxth	r2, r3
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29b      	uxth	r3, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800467a:	b29a      	uxth	r2, r3
 800467c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	e070      	b.n	8004766 <USB_EPStartXfer+0x10ea>
 8004684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10c      	bne.n	80046ae <USB_EPStartXfer+0x1032>
 8004694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e05b      	b.n	8004766 <USB_EPStartXfer+0x10ea>
 80046ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <USB_EPStartXfer+0x1062>
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e034      	b.n	8004766 <USB_EPStartXfer+0x10ea>
 80046fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d12c      	bne.n	8004766 <USB_EPStartXfer+0x10ea>
 800470c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800471a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800471e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004728:	b29b      	uxth	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004730:	4413      	add	r3, r2
 8004732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800473a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	011a      	lsls	r2, r3, #4
 8004744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004748:	4413      	add	r3, r2
 800474a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800474e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	b29a      	uxth	r2, r3
 8004760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800476a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 809d 	bne.w	80048c0 <USB_EPStartXfer+0x1244>
 8004786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047aa:	4413      	add	r3, r2
 80047ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	011a      	lsls	r2, r3, #4
 80047be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c2:	4413      	add	r3, r2
 80047c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80047ee:	d92b      	bls.n	8004848 <USB_EPStartXfer+0x11cc>
 80047f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <USB_EPStartXfer+0x11a4>
 8004816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800481a:	3b01      	subs	r3, #1
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29a      	uxth	r2, r3
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800482c:	b29b      	uxth	r3, r3
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	b29b      	uxth	r3, r3
 8004832:	4313      	orrs	r3, r2
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483e:	b29a      	uxth	r2, r3
 8004840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e069      	b.n	800491c <USB_EPStartXfer+0x12a0>
 8004848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800484c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10c      	bne.n	8004872 <USB_EPStartXfer+0x11f6>
 8004858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004868:	b29a      	uxth	r2, r3
 800486a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e054      	b.n	800491c <USB_EPStartXfer+0x12a0>
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <USB_EPStartXfer+0x1226>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	3301      	adds	r3, #1
 800489e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4313      	orrs	r3, r2
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	e02d      	b.n	800491c <USB_EPStartXfer+0x12a0>
 80048c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d125      	bne.n	800491c <USB_EPStartXfer+0x12a0>
 80048d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048e6:	4413      	add	r3, r2
 80048e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	011a      	lsls	r2, r3, #4
 80048fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048fe:	4413      	add	r3, r2
 8004900:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800490c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	b29a      	uxth	r2, r3
 8004916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800491a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800491c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8218 	beq.w	8004d5e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800492e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800493c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800494e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <USB_EPStartXfer+0x12ea>
 800495a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800495e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004966:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800496a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 81f5 	bne.w	8004d5e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004974:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	f040 81ee 	bne.w	8004d5e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80049ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80049ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049da:	b29b      	uxth	r3, r3
 80049dc:	8013      	strh	r3, [r2, #0]
 80049de:	e1be      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80049e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	78db      	ldrb	r3, [r3, #3]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	f040 81b4 	bne.w	8004d5a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80049f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d917      	bls.n	8004a3e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2e:	1ad2      	subs	r2, r2, r3
 8004a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	619a      	str	r2, [r3, #24]
 8004a3c:	e00e      	b.n	8004a5c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8085 	bne.w	8004b78 <USB_EPStartXfer+0x14fc>
 8004a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a92:	4413      	add	r3, r2
 8004a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	011a      	lsls	r2, r3, #4
 8004aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aaa:	4413      	add	r3, r2
 8004aac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ace:	d923      	bls.n	8004b18 <USB_EPStartXfer+0x149c>
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <USB_EPStartXfer+0x1474>
 8004ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e060      	b.n	8004bda <USB_EPStartXfer+0x155e>
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10c      	bne.n	8004b3a <USB_EPStartXfer+0x14be>
 8004b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e04f      	b.n	8004bda <USB_EPStartXfer+0x155e>
 8004b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <USB_EPStartXfer+0x14de>
 8004b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e030      	b.n	8004bda <USB_EPStartXfer+0x155e>
 8004b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d128      	bne.n	8004bda <USB_EPStartXfer+0x155e>
 8004b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bac:	4413      	add	r3, r2
 8004bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 8085 	bne.w	8004d04 <USB_EPStartXfer+0x1688>
 8004bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c1e:	4413      	add	r3, r2
 8004c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	011a      	lsls	r2, r3, #4
 8004c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c36:	4413      	add	r3, r2
 8004c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c5a:	d923      	bls.n	8004ca4 <USB_EPStartXfer+0x1628>
 8004c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <USB_EPStartXfer+0x1600>
 8004c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e05c      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10c      	bne.n	8004cc6 <USB_EPStartXfer+0x164a>
 8004cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e04b      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <USB_EPStartXfer+0x166a>
 8004cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e02c      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
 8004d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d124      	bne.n	8004d5e <USB_EPStartXfer+0x16e2>
 8004d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d42:	4413      	add	r3, r2
 8004d44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e001      	b.n	8004d5e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e03a      	b.n	8004dd4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d020      	beq.n	8004e32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	89bb      	ldrh	r3, [r7, #12]
 8004e0a:	f083 0310 	eor.w	r3, r3, #16
 8004e0e:	81bb      	strh	r3, [r7, #12]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	89bb      	ldrh	r3, [r7, #12]
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
 8004e30:	e01f      	b.n	8004e72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e48:	81fb      	strh	r3, [r7, #14]
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e50:	81fb      	strh	r3, [r7, #14]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	441a      	add	r2, r3
 8004e5c:	89fb      	ldrh	r3, [r7, #14]
 8004e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	7b1b      	ldrb	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 809d 	bne.w	8004fcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04c      	beq.n	8004f34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	823b      	strh	r3, [r7, #16]
 8004ea8:	8a3b      	ldrh	r3, [r7, #16]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01b      	beq.n	8004eea <USB_EPClearStall+0x6c>
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	81fb      	strh	r3, [r7, #14]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d06c      	beq.n	8004fcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f08:	81bb      	strh	r3, [r7, #12]
 8004f0a:	89bb      	ldrh	r3, [r7, #12]
 8004f0c:	f083 0320 	eor.w	r3, r3, #32
 8004f10:	81bb      	strh	r3, [r7, #12]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	89bb      	ldrh	r3, [r7, #12]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
 8004f32:	e04b      	b.n	8004fcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	82fb      	strh	r3, [r7, #22]
 8004f42:	8afb      	ldrh	r3, [r7, #22]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <USB_EPClearStall+0x106>
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	82bb      	strh	r3, [r7, #20]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	8abb      	ldrh	r3, [r7, #20]
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	827b      	strh	r3, [r7, #18]
 8004f9c:	8a7b      	ldrh	r3, [r7, #18]
 8004f9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fa2:	827b      	strh	r3, [r7, #18]
 8004fa4:	8a7b      	ldrh	r3, [r7, #18]
 8004fa6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004faa:	827b      	strh	r3, [r7, #18]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	8a7b      	ldrh	r3, [r7, #18]
 8004fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	@ 0x80
 8004fee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005034:	b29b      	uxth	r3, r3
 8005036:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005038:	68fb      	ldr	r3, [r7, #12]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800505a:	b480      	push	{r7}
 800505c:	b08b      	sub	sp, #44	@ 0x2c
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	4611      	mov	r1, r2
 8005066:	461a      	mov	r2, r3
 8005068:	460b      	mov	r3, r1
 800506a:	80fb      	strh	r3, [r7, #6]
 800506c:	4613      	mov	r3, r2
 800506e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005070:	88bb      	ldrh	r3, [r7, #4]
 8005072:	3301      	adds	r3, #1
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	005a      	lsls	r2, r3, #1
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800508c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
 8005092:	e01e      	b.n	80050d2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	b21a      	sxth	r2, r3
 80050a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b21b      	sxth	r3, r3
 80050ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	8a7a      	ldrh	r2, [r7, #18]
 80050b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	3302      	adds	r3, #2
 80050b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	3302      	adds	r3, #2
 80050be:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	3b01      	subs	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1dd      	bne.n	8005094 <USB_WritePMA+0x3a>
  }
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	372c      	adds	r7, #44	@ 0x2c
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b08b      	sub	sp, #44	@ 0x2c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	460b      	mov	r3, r1
 80050f4:	80fb      	strh	r3, [r7, #6]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	b29b      	uxth	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	005a      	lsls	r2, r3, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005116:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
 800511c:	e01b      	b.n	8005156 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	3302      	adds	r3, #2
 800512a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	b2da      	uxtb	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	3302      	adds	r3, #2
 800514e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	3b01      	subs	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e0      	bne.n	800511e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800515c:	88bb      	ldrh	r3, [r7, #4]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	701a      	strb	r2, [r3, #0]
  }
}
 8005178:	bf00      	nop
 800517a:	372c      	adds	r7, #44	@ 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	7c1b      	ldrb	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d115      	bne.n	80051c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800519a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800519e:	2202      	movs	r2, #2
 80051a0:	2181      	movs	r1, #129	@ 0x81
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 febb 	bl	8006f1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051b2:	2202      	movs	r2, #2
 80051b4:	2101      	movs	r1, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 feb1 	bl	8006f1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80051c4:	e012      	b.n	80051ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80051c6:	2340      	movs	r3, #64	@ 0x40
 80051c8:	2202      	movs	r2, #2
 80051ca:	2181      	movs	r1, #129	@ 0x81
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fea6 	bl	8006f1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80051d8:	2340      	movs	r3, #64	@ 0x40
 80051da:	2202      	movs	r2, #2
 80051dc:	2101      	movs	r1, #1
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f001 fe9d 	bl	8006f1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051ec:	2308      	movs	r3, #8
 80051ee:	2203      	movs	r2, #3
 80051f0:	2182      	movs	r1, #130	@ 0x82
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fe93 	bl	8006f1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80051fe:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005202:	f001 ffb3 	bl	800716c <USBD_static_malloc>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
 800521c:	e026      	b.n	800526c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005224:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2200      	movs	r2, #0
 8005234:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	7c1b      	ldrb	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800524e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005252:	2101      	movs	r1, #1
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 ff52 	bl	80070fe <USBD_LL_PrepareReceive>
 800525a:	e007      	b.n	800526c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005262:	2340      	movs	r3, #64	@ 0x40
 8005264:	2101      	movs	r1, #1
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 ff49 	bl	80070fe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	460b      	mov	r3, r1
 8005280:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005286:	2181      	movs	r1, #129	@ 0x81
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fe6e 	bl	8006f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005294:	2101      	movs	r1, #1
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fe67 	bl	8006f6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80052a4:	2182      	movs	r1, #130	@ 0x82
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fe5f 	bl	8006f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 ff59 	bl	8007184 <USBD_static_free>
    pdev->pClassData = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800530a:	2b00      	cmp	r3, #0
 800530c:	d039      	beq.n	8005382 <USBD_CDC_Setup+0x9e>
 800530e:	2b20      	cmp	r3, #32
 8005310:	d17f      	bne.n	8005412 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d029      	beq.n	800536e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b25b      	sxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	da11      	bge.n	8005348 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005330:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	88d2      	ldrh	r2, [r2, #6]
 8005336:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005338:	6939      	ldr	r1, [r7, #16]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	88db      	ldrh	r3, [r3, #6]
 800533e:	461a      	mov	r2, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 fa05 	bl	8006750 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005346:	e06b      	b.n	8005420 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	785a      	ldrb	r2, [r3, #1]
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	88db      	ldrh	r3, [r3, #6]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	88db      	ldrh	r3, [r3, #6]
 8005364:	461a      	mov	r2, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fa20 	bl	80067ac <USBD_CtlPrepareRx>
      break;
 800536c:	e058      	b.n	8005420 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	7850      	ldrb	r0, [r2, #1]
 800537a:	2200      	movs	r2, #0
 800537c:	6839      	ldr	r1, [r7, #0]
 800537e:	4798      	blx	r3
      break;
 8005380:	e04e      	b.n	8005420 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b0b      	cmp	r3, #11
 8005388:	d02e      	beq.n	80053e8 <USBD_CDC_Setup+0x104>
 800538a:	2b0b      	cmp	r3, #11
 800538c:	dc38      	bgt.n	8005400 <USBD_CDC_Setup+0x11c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <USBD_CDC_Setup+0xb4>
 8005392:	2b0a      	cmp	r3, #10
 8005394:	d014      	beq.n	80053c0 <USBD_CDC_Setup+0xdc>
 8005396:	e033      	b.n	8005400 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d107      	bne.n	80053b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	2202      	movs	r2, #2
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f9d0 	bl	8006750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053b0:	e02e      	b.n	8005410 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 f961 	bl	800667c <USBD_CtlError>
            ret = USBD_FAIL;
 80053ba:	2302      	movs	r3, #2
 80053bc:	75fb      	strb	r3, [r7, #23]
          break;
 80053be:	e027      	b.n	8005410 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d107      	bne.n	80053da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80053ca:	f107 030f 	add.w	r3, r7, #15
 80053ce:	2201      	movs	r2, #1
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 f9bc 	bl	8006750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053d8:	e01a      	b.n	8005410 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 f94d 	bl	800667c <USBD_CtlError>
            ret = USBD_FAIL;
 80053e2:	2302      	movs	r3, #2
 80053e4:	75fb      	strb	r3, [r7, #23]
          break;
 80053e6:	e013      	b.n	8005410 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d00d      	beq.n	800540e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 f941 	bl	800667c <USBD_CtlError>
            ret = USBD_FAIL;
 80053fa:	2302      	movs	r3, #2
 80053fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80053fe:	e006      	b.n	800540e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f93a 	bl	800667c <USBD_CtlError>
          ret = USBD_FAIL;
 8005408:	2302      	movs	r3, #2
 800540a:	75fb      	strb	r3, [r7, #23]
          break;
 800540c:	e000      	b.n	8005410 <USBD_CDC_Setup+0x12c>
          break;
 800540e:	bf00      	nop
      }
      break;
 8005410:	e006      	b.n	8005420 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 f931 	bl	800667c <USBD_CtlError>
      ret = USBD_FAIL;
 800541a:	2302      	movs	r3, #2
 800541c:	75fb      	strb	r3, [r7, #23]
      break;
 800541e:	bf00      	nop
  }

  return ret;
 8005420:	7dfb      	ldrb	r3, [r7, #23]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800543c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005444:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d03a      	beq.n	80054c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	331c      	adds	r3, #28
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d029      	beq.n	80054ba <USBD_CDC_DataIn+0x90>
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	331c      	adds	r3, #28
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	78f9      	ldrb	r1, [r7, #3]
 800547a:	68b8      	ldr	r0, [r7, #8]
 800547c:	460b      	mov	r3, r1
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4403      	add	r3, r0
 8005486:	3320      	adds	r3, #32
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	fbb2 f1f3 	udiv	r1, r2, r3
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d110      	bne.n	80054ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	331c      	adds	r3, #28
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054ac:	78f9      	ldrb	r1, [r7, #3]
 80054ae:	2300      	movs	r3, #0
 80054b0:	2200      	movs	r2, #0
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fe00 	bl	80070b8 <USBD_LL_Transmit>
 80054b8:	e003      	b.n	80054c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e000      	b.n	80054c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fe2b 	bl	8007144 <USBD_LL_GetRxDataSize>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00d      	beq.n	800551c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005514:	4611      	mov	r1, r2
 8005516:	4798      	blx	r3

    return USBD_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005534:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800553c:	2b00      	cmp	r3, #0
 800553e:	d014      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x44>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005546:	2bff      	cmp	r3, #255	@ 0xff
 8005548:	d00f      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005558:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005560:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	@ 0xff
 8005566:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2243      	movs	r2, #67	@ 0x43
 8005580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005582:	4b03      	ldr	r3, [pc, #12]	@ (8005590 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000094 	.word	0x20000094

08005594 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2243      	movs	r2, #67	@ 0x43
 80055a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80055a2:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000050 	.word	0x20000050

080055b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2243      	movs	r2, #67	@ 0x43
 80055c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80055c2:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	200000d8 	.word	0x200000d8

080055d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	220a      	movs	r2, #10
 80055e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80055e2:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2000000c 	.word	0x2000000c

080055f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80055fe:	2302      	movs	r3, #2
 8005600:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005634:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005662:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01c      	beq.n	80056cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005698:	2b00      	cmp	r3, #0
 800569a:	d115      	bne.n	80056c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2181      	movs	r1, #129	@ 0x81
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fcfa 	bl	80070b8 <USBD_LL_Transmit>

      return USBD_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e002      	b.n	80056ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d017      	beq.n	8005720 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7c1b      	ldrb	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005702:	2101      	movs	r1, #1
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fcfa 	bl	80070fe <USBD_LL_PrepareReceive>
 800570a:	e007      	b.n	800571c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005712:	2340      	movs	r3, #64	@ 0x40
 8005714:	2101      	movs	r1, #1
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fcf1 	bl	80070fe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	4613      	mov	r3, r2
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800573e:	2302      	movs	r3, #2
 8005740:	e01a      	b.n	8005778 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	79fa      	ldrb	r2, [r7, #7]
 800576e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f001 fb5f 	bl	8006e34 <USBD_LL_Init>

  return USBD_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d006      	beq.n	80057a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e001      	b.n	80057a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80057a2:	2302      	movs	r3, #2
 80057a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fb94 	bl	8006ee8 <USBD_LL_Start>

  return USBD_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80057ea:	2302      	movs	r3, #2
 80057ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00c      	beq.n	8005812 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	4611      	mov	r1, r2
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	4611      	mov	r1, r2
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fed8 	bl	800660a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2b02      	cmp	r3, #2
 800587c:	d016      	beq.n	80058ac <USBD_LL_SetupStage+0x6a>
 800587e:	2b02      	cmp	r3, #2
 8005880:	d81c      	bhi.n	80058bc <USBD_LL_SetupStage+0x7a>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <USBD_LL_SetupStage+0x4a>
 8005886:	2b01      	cmp	r3, #1
 8005888:	d008      	beq.n	800589c <USBD_LL_SetupStage+0x5a>
 800588a:	e017      	b.n	80058bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f9cb 	bl	8005c30 <USBD_StdDevReq>
      break;
 800589a:	e01a      	b.n	80058d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fa2d 	bl	8005d04 <USBD_StdItfReq>
      break;
 80058aa:	e012      	b.n	80058d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa6d 	bl	8005d94 <USBD_StdEPReq>
      break;
 80058ba:	e00a      	b.n	80058d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80058c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 fb6c 	bl	8006fa8 <USBD_LL_StallEP>
      break;
 80058d0:	bf00      	nop
  }

  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	460b      	mov	r3, r1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d14b      	bne.n	8005988 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80058f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d134      	bne.n	800596c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	429a      	cmp	r2, r3
 800590c:	d919      	bls.n	8005942 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	1ad2      	subs	r2, r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005924:	429a      	cmp	r2, r3
 8005926:	d203      	bcs.n	8005930 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800592c:	b29b      	uxth	r3, r3
 800592e:	e002      	b.n	8005936 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005934:	b29b      	uxth	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 ff54 	bl	80067e8 <USBD_CtlContinueRx>
 8005940:	e038      	b.n	80059b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005954:	2b03      	cmp	r3, #3
 8005956:	d105      	bne.n	8005964 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 ff51 	bl	800680c <USBD_CtlSendStatus>
 800596a:	e023      	b.n	80059b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005972:	2b05      	cmp	r3, #5
 8005974:	d11e      	bne.n	80059b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800597e:	2100      	movs	r1, #0
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fb11 	bl	8006fa8 <USBD_LL_StallEP>
 8005986:	e015      	b.n	80059b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800599a:	2b03      	cmp	r3, #3
 800599c:	d108      	bne.n	80059b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	7afa      	ldrb	r2, [r7, #11]
 80059a8:	4611      	mov	r1, r2
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	4798      	blx	r3
 80059ae:	e001      	b.n	80059b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80059b0:	2302      	movs	r3, #2
 80059b2:	e000      	b.n	80059b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	460b      	mov	r3, r1
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059cc:	7afb      	ldrb	r3, [r7, #11]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d17f      	bne.n	8005ad2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3314      	adds	r3, #20
 80059d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d15c      	bne.n	8005a9c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d915      	bls.n	8005a1a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 febe 	bl	8006788 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f001 fb73 	bl	80070fe <USBD_LL_PrepareReceive>
 8005a18:	e04e      	b.n	8005ab8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	6912      	ldr	r2, [r2, #16]
 8005a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a26:	fb01 f202 	mul.w	r2, r1, r2
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11c      	bne.n	8005a6a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d316      	bcc.n	8005a6a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d20f      	bcs.n	8005a6a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fe9a 	bl	8006788 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f001 fb4b 	bl	80070fe <USBD_LL_PrepareReceive>
 8005a68:	e026      	b.n	8005ab8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d105      	bne.n	8005a8c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005a8c:	2180      	movs	r1, #128	@ 0x80
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f001 fa8a 	bl	8006fa8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fecc 	bl	8006832 <USBD_CtlReceiveStatus>
 8005a9a:	e00d      	b.n	8005ab8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d004      	beq.n	8005ab0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d103      	bne.n	8005ab8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005ab0:	2180      	movs	r1, #128	@ 0x80
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f001 fa78 	bl	8006fa8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d11d      	bne.n	8005afe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fe81 	bl	80057ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ad0:	e015      	b.n	8005afe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00d      	beq.n	8005afa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d108      	bne.n	8005afa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	7afa      	ldrb	r2, [r7, #11]
 8005af2:	4611      	mov	r1, r2
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	4798      	blx	r3
 8005af8:	e001      	b.n	8005afe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005afa:	2302      	movs	r3, #2
 8005afc:	e000      	b.n	8005b00 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b10:	2340      	movs	r3, #64	@ 0x40
 8005b12:	2200      	movs	r2, #0
 8005b14:	2100      	movs	r1, #0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fa01 	bl	8006f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2240      	movs	r2, #64	@ 0x40
 8005b28:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b2c:	2340      	movs	r3, #64	@ 0x40
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2180      	movs	r1, #128	@ 0x80
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 f9f3 	bl	8006f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2240      	movs	r2, #64	@ 0x40
 8005b42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6852      	ldr	r2, [r2, #4]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
  }

  return USBD_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d105      	bne.n	8005bee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr

08005bfa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d10b      	bne.n	8005c24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d005      	beq.n	8005c56 <USBD_StdDevReq+0x26>
 8005c4a:	2b40      	cmp	r3, #64	@ 0x40
 8005c4c:	d84f      	bhi.n	8005cee <USBD_StdDevReq+0xbe>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <USBD_StdDevReq+0x36>
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d14b      	bne.n	8005cee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
      break;
 8005c64:	e048      	b.n	8005cf8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b09      	cmp	r3, #9
 8005c6c:	d839      	bhi.n	8005ce2 <USBD_StdDevReq+0xb2>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <USBD_StdDevReq+0x44>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005cd9 	.word	0x08005cd9
 8005c7c:	08005ce3 	.word	0x08005ce3
 8005c80:	08005ccf 	.word	0x08005ccf
 8005c84:	08005ce3 	.word	0x08005ce3
 8005c88:	08005ca7 	.word	0x08005ca7
 8005c8c:	08005c9d 	.word	0x08005c9d
 8005c90:	08005ce3 	.word	0x08005ce3
 8005c94:	08005cbb 	.word	0x08005cbb
 8005c98:	08005cb1 	.word	0x08005cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9dc 	bl	800605c <USBD_GetDescriptor>
          break;
 8005ca4:	e022      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb3f 	bl	800632c <USBD_SetAddress>
          break;
 8005cae:	e01d      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fb7e 	bl	80063b4 <USBD_SetConfig>
          break;
 8005cb8:	e018      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc07 	bl	80064d0 <USBD_GetConfig>
          break;
 8005cc2:	e013      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fc37 	bl	800653a <USBD_GetStatus>
          break;
 8005ccc:	e00e      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fc65 	bl	80065a0 <USBD_SetFeature>
          break;
 8005cd6:	e009      	b.n	8005cec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc74 	bl	80065c8 <USBD_ClrFeature>
          break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fcc9 	bl	800667c <USBD_CtlError>
          break;
 8005cea:	bf00      	nop
      }
      break;
 8005cec:	e004      	b.n	8005cf8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fcc3 	bl	800667c <USBD_CtlError>
      break;
 8005cf6:	bf00      	nop
  }

  return ret;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d1a:	2b40      	cmp	r3, #64	@ 0x40
 8005d1c:	d005      	beq.n	8005d2a <USBD_StdItfReq+0x26>
 8005d1e:	2b40      	cmp	r3, #64	@ 0x40
 8005d20:	d82e      	bhi.n	8005d80 <USBD_StdItfReq+0x7c>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <USBD_StdItfReq+0x26>
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d12a      	bne.n	8005d80 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d30:	3b01      	subs	r3, #1
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d81d      	bhi.n	8005d72 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	889b      	ldrh	r3, [r3, #4]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d813      	bhi.n	8005d68 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d110      	bne.n	8005d7c <USBD_StdItfReq+0x78>
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fd53 	bl	800680c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d66:	e009      	b.n	8005d7c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fc86 	bl	800667c <USBD_CtlError>
          break;
 8005d70:	e004      	b.n	8005d7c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fc81 	bl	800667c <USBD_CtlError>
          break;
 8005d7a:	e000      	b.n	8005d7e <USBD_StdItfReq+0x7a>
          break;
 8005d7c:	bf00      	nop
      }
      break;
 8005d7e:	e004      	b.n	8005d8a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fc7a 	bl	800667c <USBD_CtlError>
      break;
 8005d88:	bf00      	nop
  }

  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	889b      	ldrh	r3, [r3, #4]
 8005da6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d007      	beq.n	8005dc4 <USBD_StdEPReq+0x30>
 8005db4:	2b40      	cmp	r3, #64	@ 0x40
 8005db6:	f200 8146 	bhi.w	8006046 <USBD_StdEPReq+0x2b2>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <USBD_StdEPReq+0x40>
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	f040 8141 	bne.w	8006046 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
      break;
 8005dd2:	e13d      	b.n	8006050 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d10a      	bne.n	8005df6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	e12d      	b.n	8006052 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d007      	beq.n	8005e0e <USBD_StdEPReq+0x7a>
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	f300 811b 	bgt.w	800603a <USBD_StdEPReq+0x2a6>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d072      	beq.n	8005eee <USBD_StdEPReq+0x15a>
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d03a      	beq.n	8005e82 <USBD_StdEPReq+0xee>
 8005e0c:	e115      	b.n	800603a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d002      	beq.n	8005e1e <USBD_StdEPReq+0x8a>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d015      	beq.n	8005e48 <USBD_StdEPReq+0xb4>
 8005e1c:	e02b      	b.n	8005e76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <USBD_StdEPReq+0xaa>
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b80      	cmp	r3, #128	@ 0x80
 8005e28:	d009      	beq.n	8005e3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 f8ba 	bl	8006fa8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005e34:	2180      	movs	r1, #128	@ 0x80
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 f8b6 	bl	8006fa8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e3c:	e020      	b.n	8005e80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc1b 	bl	800667c <USBD_CtlError>
              break;
 8005e46:	e01b      	b.n	8005e80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	885b      	ldrh	r3, [r3, #2]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10e      	bne.n	8005e6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00b      	beq.n	8005e6e <USBD_StdEPReq+0xda>
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b80      	cmp	r3, #128	@ 0x80
 8005e5a:	d008      	beq.n	8005e6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	88db      	ldrh	r3, [r3, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e64:	7bbb      	ldrb	r3, [r7, #14]
 8005e66:	4619      	mov	r1, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 f89d 	bl	8006fa8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fccc 	bl	800680c <USBD_CtlSendStatus>

              break;
 8005e74:	e004      	b.n	8005e80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbff 	bl	800667c <USBD_CtlError>
              break;
 8005e7e:	bf00      	nop
          }
          break;
 8005e80:	e0e0      	b.n	8006044 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d002      	beq.n	8005e92 <USBD_StdEPReq+0xfe>
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d015      	beq.n	8005ebc <USBD_StdEPReq+0x128>
 8005e90:	e026      	b.n	8005ee0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <USBD_StdEPReq+0x11e>
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b80      	cmp	r3, #128	@ 0x80
 8005e9c:	d009      	beq.n	8005eb2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 f880 	bl	8006fa8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ea8:	2180      	movs	r1, #128	@ 0x80
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 f87c 	bl	8006fa8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb0:	e01c      	b.n	8005eec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fbe1 	bl	800667c <USBD_CtlError>
              break;
 8005eba:	e017      	b.n	8005eec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	885b      	ldrh	r3, [r3, #2]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d112      	bne.n	8005eea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 f887 	bl	8006fe6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fc97 	bl	800680c <USBD_CtlSendStatus>
              }
              break;
 8005ede:	e004      	b.n	8005eea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fbca 	bl	800667c <USBD_CtlError>
              break;
 8005ee8:	e000      	b.n	8005eec <USBD_StdEPReq+0x158>
              break;
 8005eea:	bf00      	nop
          }
          break;
 8005eec:	e0aa      	b.n	8006044 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d002      	beq.n	8005efe <USBD_StdEPReq+0x16a>
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d032      	beq.n	8005f62 <USBD_StdEPReq+0x1ce>
 8005efc:	e097      	b.n	800602e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <USBD_StdEPReq+0x180>
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d004      	beq.n	8005f14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbb5 	bl	800667c <USBD_CtlError>
                break;
 8005f12:	e091      	b.n	8006038 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da0b      	bge.n	8005f34 <USBD_StdEPReq+0x1a0>
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	e00b      	b.n	8005f4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2202      	movs	r2, #2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fbf8 	bl	8006750 <USBD_CtlSendData>
              break;
 8005f60:	e06a      	b.n	8006038 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da11      	bge.n	8005f8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3318      	adds	r3, #24
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d117      	bne.n	8005fb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fb78 	bl	800667c <USBD_CtlError>
                  break;
 8005f8c:	e054      	b.n	8006038 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb65 	bl	800667c <USBD_CtlError>
                  break;
 8005fb2:	e041      	b.n	8006038 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da0b      	bge.n	8005fd4 <USBD_StdEPReq+0x240>
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	3310      	adds	r3, #16
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	e00b      	b.n	8005fec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <USBD_StdEPReq+0x266>
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	2b80      	cmp	r3, #128	@ 0x80
 8005ff8:	d103      	bne.n	8006002 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e00e      	b.n	8006020 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f001 f80c 	bl	8007024 <USBD_LL_IsStallEP>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e002      	b.n	8006020 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2202      	movs	r2, #2
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb92 	bl	8006750 <USBD_CtlSendData>
              break;
 800602c:	e004      	b.n	8006038 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fb23 	bl	800667c <USBD_CtlError>
              break;
 8006036:	bf00      	nop
          }
          break;
 8006038:	e004      	b.n	8006044 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800603a:	6839      	ldr	r1, [r7, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fb1d 	bl	800667c <USBD_CtlError>
          break;
 8006042:	bf00      	nop
      }
      break;
 8006044:	e004      	b.n	8006050 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb17 	bl	800667c <USBD_CtlError>
      break;
 800604e:	bf00      	nop
  }

  return ret;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	2b06      	cmp	r3, #6
 800607e:	f200 8128 	bhi.w	80062d2 <USBD_GetDescriptor+0x276>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <USBD_GetDescriptor+0x2c>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060a5 	.word	0x080060a5
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060fd 	.word	0x080060fd
 8006094:	080062d3 	.word	0x080062d3
 8006098:	080062d3 	.word	0x080062d3
 800609c:	08006273 	.word	0x08006273
 80060a0:	0800629f 	.word	0x0800629f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	7c12      	ldrb	r2, [r2, #16]
 80060b0:	f107 0108 	add.w	r1, r7, #8
 80060b4:	4610      	mov	r0, r2
 80060b6:	4798      	blx	r3
 80060b8:	60f8      	str	r0, [r7, #12]
      break;
 80060ba:	e112      	b.n	80062e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	7c1b      	ldrb	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10d      	bne.n	80060e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	f107 0208 	add.w	r2, r7, #8
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
 80060d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	2202      	movs	r2, #2
 80060dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060de:	e100      	b.n	80062e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	f107 0208 	add.w	r2, r7, #8
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
 80060f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	2202      	movs	r2, #2
 80060f8:	701a      	strb	r2, [r3, #0]
      break;
 80060fa:	e0f2      	b.n	80062e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	885b      	ldrh	r3, [r3, #2]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b05      	cmp	r3, #5
 8006104:	f200 80ac 	bhi.w	8006260 <USBD_GetDescriptor+0x204>
 8006108:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <USBD_GetDescriptor+0xb4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006129 	.word	0x08006129
 8006114:	0800615d 	.word	0x0800615d
 8006118:	08006191 	.word	0x08006191
 800611c:	080061c5 	.word	0x080061c5
 8006120:	080061f9 	.word	0x080061f9
 8006124:	0800622d 	.word	0x0800622d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	7c12      	ldrb	r2, [r2, #16]
 8006140:	f107 0108 	add.w	r1, r7, #8
 8006144:	4610      	mov	r0, r2
 8006146:	4798      	blx	r3
 8006148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800614a:	e091      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa94 	bl	800667c <USBD_CtlError>
            err++;
 8006154:	7afb      	ldrb	r3, [r7, #11]
 8006156:	3301      	adds	r3, #1
 8006158:	72fb      	strb	r3, [r7, #11]
          break;
 800615a:	e089      	b.n	8006270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	7c12      	ldrb	r2, [r2, #16]
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
 800617c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800617e:	e077      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa7a 	bl	800667c <USBD_CtlError>
            err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
          break;
 800618e:	e06f      	b.n	8006270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7c12      	ldrb	r2, [r2, #16]
 80061a8:	f107 0108 	add.w	r1, r7, #8
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061b2:	e05d      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa60 	bl	800667c <USBD_CtlError>
            err++;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
 80061be:	3301      	adds	r3, #1
 80061c0:	72fb      	strb	r3, [r7, #11]
          break;
 80061c2:	e055      	b.n	8006270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7c12      	ldrb	r2, [r2, #16]
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061e6:	e043      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa46 	bl	800667c <USBD_CtlError>
            err++;
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	3301      	adds	r3, #1
 80061f4:	72fb      	strb	r3, [r7, #11]
          break;
 80061f6:	e03b      	b.n	8006270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7c12      	ldrb	r2, [r2, #16]
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800621a:	e029      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa2c 	bl	800667c <USBD_CtlError>
            err++;
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	3301      	adds	r3, #1
 8006228:	72fb      	strb	r3, [r7, #11]
          break;
 800622a:	e021      	b.n	8006270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	7c12      	ldrb	r2, [r2, #16]
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624e:	e00f      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa12 	bl	800667c <USBD_CtlError>
            err++;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	3301      	adds	r3, #1
 800625c:	72fb      	strb	r3, [r7, #11]
          break;
 800625e:	e007      	b.n	8006270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa0a 	bl	800667c <USBD_CtlError>
          err++;
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	3301      	adds	r3, #1
 800626c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800626e:	e038      	b.n	80062e2 <USBD_GetDescriptor+0x286>
 8006270:	e037      	b.n	80062e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7c1b      	ldrb	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800628c:	e029      	b.n	80062e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f9f3 	bl	800667c <USBD_CtlError>
        err++;
 8006296:	7afb      	ldrb	r3, [r7, #11]
 8006298:	3301      	adds	r3, #1
 800629a:	72fb      	strb	r3, [r7, #11]
      break;
 800629c:	e021      	b.n	80062e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7c1b      	ldrb	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10d      	bne.n	80062c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	f107 0208 	add.w	r2, r7, #8
 80062b2:	4610      	mov	r0, r2
 80062b4:	4798      	blx	r3
 80062b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	2207      	movs	r2, #7
 80062be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062c0:	e00f      	b.n	80062e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f9d9 	bl	800667c <USBD_CtlError>
        err++;
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	3301      	adds	r3, #1
 80062ce:	72fb      	strb	r3, [r7, #11]
      break;
 80062d0:	e007      	b.n	80062e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f9d1 	bl	800667c <USBD_CtlError>
      err++;
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	3301      	adds	r3, #1
 80062de:	72fb      	strb	r3, [r7, #11]
      break;
 80062e0:	bf00      	nop
  }

  if (err != 0U)
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d11c      	bne.n	8006322 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80062e8:	893b      	ldrh	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d011      	beq.n	8006312 <USBD_GetDescriptor+0x2b6>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88da      	ldrh	r2, [r3, #6]
 80062fa:	893b      	ldrh	r3, [r7, #8]
 80062fc:	4293      	cmp	r3, r2
 80062fe:	bf28      	it	cs
 8006300:	4613      	movcs	r3, r2
 8006302:	b29b      	uxth	r3, r3
 8006304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006306:	893b      	ldrh	r3, [r7, #8]
 8006308:	461a      	mov	r2, r3
 800630a:	68f9      	ldr	r1, [r7, #12]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fa1f 	bl	8006750 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	88db      	ldrh	r3, [r3, #6]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa76 	bl	800680c <USBD_CtlSendStatus>
 8006320:	e000      	b.n	8006324 <USBD_GetDescriptor+0x2c8>
    return;
 8006322:	bf00      	nop
    }
  }
}
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	889b      	ldrh	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d130      	bne.n	80063a0 <USBD_SetAddress+0x74>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	88db      	ldrh	r3, [r3, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d12c      	bne.n	80063a0 <USBD_SetAddress+0x74>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	885b      	ldrh	r3, [r3, #2]
 800634a:	2b7f      	cmp	r3, #127	@ 0x7f
 800634c:	d828      	bhi.n	80063a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006360:	2b03      	cmp	r3, #3
 8006362:	d104      	bne.n	800636e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f988 	bl	800667c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636c:	e01d      	b.n	80063aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7bfa      	ldrb	r2, [r7, #15]
 8006372:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fe7d 	bl	800707a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fa43 	bl	800680c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006394:	e009      	b.n	80063aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639e:	e004      	b.n	80063aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f96a 	bl	800667c <USBD_CtlError>
  }
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	885b      	ldrh	r3, [r3, #2]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	4b41      	ldr	r3, [pc, #260]	@ (80064cc <USBD_SetConfig+0x118>)
 80063c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063c8:	4b40      	ldr	r3, [pc, #256]	@ (80064cc <USBD_SetConfig+0x118>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d904      	bls.n	80063da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f952 	bl	800667c <USBD_CtlError>
 80063d8:	e075      	b.n	80064c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d002      	beq.n	80063ea <USBD_SetConfig+0x36>
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d023      	beq.n	8006430 <USBD_SetConfig+0x7c>
 80063e8:	e062      	b.n	80064b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80063ea:	4b38      	ldr	r3, [pc, #224]	@ (80064cc <USBD_SetConfig+0x118>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01a      	beq.n	8006428 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80063f2:	4b36      	ldr	r3, [pc, #216]	@ (80064cc <USBD_SetConfig+0x118>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2203      	movs	r2, #3
 8006400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006404:	4b31      	ldr	r3, [pc, #196]	@ (80064cc <USBD_SetConfig+0x118>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff f9e7 	bl	80057de <USBD_SetClassConfig>
 8006410:	4603      	mov	r3, r0
 8006412:	2b02      	cmp	r3, #2
 8006414:	d104      	bne.n	8006420 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f92f 	bl	800667c <USBD_CtlError>
            return;
 800641e:	e052      	b.n	80064c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f9f3 	bl	800680c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006426:	e04e      	b.n	80064c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9ef 	bl	800680c <USBD_CtlSendStatus>
        break;
 800642e:	e04a      	b.n	80064c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006430:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <USBD_SetConfig+0x118>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d112      	bne.n	800645e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006440:	4b22      	ldr	r3, [pc, #136]	@ (80064cc <USBD_SetConfig+0x118>)
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800644a:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <USBD_SetConfig+0x118>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff f9e3 	bl	800581c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9d8 	bl	800680c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800645c:	e033      	b.n	80064c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800645e:	4b1b      	ldr	r3, [pc, #108]	@ (80064cc <USBD_SetConfig+0x118>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d01d      	beq.n	80064a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff f9d1 	bl	800581c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800647a:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <USBD_SetConfig+0x118>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006484:	4b11      	ldr	r3, [pc, #68]	@ (80064cc <USBD_SetConfig+0x118>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff f9a7 	bl	80057de <USBD_SetClassConfig>
 8006490:	4603      	mov	r3, r0
 8006492:	2b02      	cmp	r3, #2
 8006494:	d104      	bne.n	80064a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f8ef 	bl	800667c <USBD_CtlError>
            return;
 800649e:	e012      	b.n	80064c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f9b3 	bl	800680c <USBD_CtlSendStatus>
        break;
 80064a6:	e00e      	b.n	80064c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f9af 	bl	800680c <USBD_CtlSendStatus>
        break;
 80064ae:	e00a      	b.n	80064c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8e2 	bl	800667c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80064b8:	4b04      	ldr	r3, [pc, #16]	@ (80064cc <USBD_SetConfig+0x118>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff f9ac 	bl	800581c <USBD_ClrClassConfig>
        break;
 80064c4:	bf00      	nop
    }
  }
}
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	2000019c 	.word	0x2000019c

080064d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	88db      	ldrh	r3, [r3, #6]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d004      	beq.n	80064ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8c9 	bl	800667c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064ea:	e022      	b.n	8006532 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	dc02      	bgt.n	80064fc <USBD_GetConfig+0x2c>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc03      	bgt.n	8006502 <USBD_GetConfig+0x32>
 80064fa:	e015      	b.n	8006528 <USBD_GetConfig+0x58>
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d00b      	beq.n	8006518 <USBD_GetConfig+0x48>
 8006500:	e012      	b.n	8006528 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3308      	adds	r3, #8
 800650c:	2201      	movs	r2, #1
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f91d 	bl	8006750 <USBD_CtlSendData>
        break;
 8006516:	e00c      	b.n	8006532 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	2201      	movs	r2, #1
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f915 	bl	8006750 <USBD_CtlSendData>
        break;
 8006526:	e004      	b.n	8006532 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8a6 	bl	800667c <USBD_CtlError>
        break;
 8006530:	bf00      	nop
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800654a:	3b01      	subs	r3, #1
 800654c:	2b02      	cmp	r3, #2
 800654e:	d81e      	bhi.n	800658e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d004      	beq.n	8006562 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f88e 	bl	800667c <USBD_CtlError>
        break;
 8006560:	e01a      	b.n	8006598 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f043 0202 	orr.w	r2, r3, #2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	330c      	adds	r3, #12
 8006582:	2202      	movs	r2, #2
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8e2 	bl	8006750 <USBD_CtlSendData>
      break;
 800658c:	e004      	b.n	8006598 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f873 	bl	800667c <USBD_CtlError>
      break;
 8006596:	bf00      	nop
  }
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	885b      	ldrh	r3, [r3, #2]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d106      	bne.n	80065c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f926 	bl	800680c <USBD_CtlSendStatus>
  }
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065d8:	3b01      	subs	r3, #1
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d80b      	bhi.n	80065f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10c      	bne.n	8006600 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f90c 	bl	800680c <USBD_CtlSendStatus>
      }
      break;
 80065f4:	e004      	b.n	8006600 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f83f 	bl	800667c <USBD_CtlError>
      break;
 80065fe:	e000      	b.n	8006602 <USBD_ClrFeature+0x3a>
      break;
 8006600:	bf00      	nop
  }
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785a      	ldrb	r2, [r3, #1]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	3302      	adds	r3, #2
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3303      	adds	r3, #3
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	4413      	add	r3, r2
 8006638:	b29a      	uxth	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	3304      	adds	r3, #4
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	3305      	adds	r3, #5
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	b29b      	uxth	r3, r3
 8006650:	4413      	add	r3, r2
 8006652:	b29a      	uxth	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	3306      	adds	r3, #6
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	3307      	adds	r3, #7
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	b29b      	uxth	r3, r3
 800666a:	4413      	add	r3, r2
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	80da      	strh	r2, [r3, #6]

}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	bc80      	pop	{r7}
 800667a:	4770      	bx	lr

0800667c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006686:	2180      	movs	r1, #128	@ 0x80
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fc8d 	bl	8006fa8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800668e:	2100      	movs	r1, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc89 	bl	8006fa8 <USBD_LL_StallEP>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b086      	sub	sp, #24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d032      	beq.n	800671a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f834 	bl	8006722 <USBD_GetLen>
 80066ba:	4603      	mov	r3, r0
 80066bc:	3301      	adds	r3, #1
 80066be:	b29b      	uxth	r3, r3
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	75fa      	strb	r2, [r7, #23]
 80066ce:	461a      	mov	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4413      	add	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	7812      	ldrb	r2, [r2, #0]
 80066d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	75fa      	strb	r2, [r7, #23]
 80066e0:	461a      	mov	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	2203      	movs	r2, #3
 80066e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80066ea:	e012      	b.n	8006712 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	60fa      	str	r2, [r7, #12]
 80066f2:	7dfa      	ldrb	r2, [r7, #23]
 80066f4:	1c51      	adds	r1, r2, #1
 80066f6:	75f9      	strb	r1, [r7, #23]
 80066f8:	4611      	mov	r1, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	440a      	add	r2, r1
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	75fa      	strb	r2, [r7, #23]
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e8      	bne.n	80066ec <USBD_GetString+0x4e>
    }
  }
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800672e:	e005      	b.n	800673c <USBD_GetLen+0x1a>
  {
    len++;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	3301      	adds	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3301      	adds	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f5      	bne.n	8006730 <USBD_GetLen+0xe>
  }

  return len;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2202      	movs	r2, #2
 8006762:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 fc9d 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	2100      	movs	r1, #0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fc8b 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	2100      	movs	r1, #0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fc90 	bl	80070fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	2100      	movs	r1, #0
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fc7e 	bl	80070fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2204      	movs	r2, #4
 8006818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800681c:	2300      	movs	r3, #0
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fc48 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2205      	movs	r2, #5
 800683e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006842:	2300      	movs	r3, #0
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fc58 	bl	80070fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800685c:	2200      	movs	r2, #0
 800685e:	4912      	ldr	r1, [pc, #72]	@ (80068a8 <MX_USB_DEVICE_Init+0x50>)
 8006860:	4812      	ldr	r0, [pc, #72]	@ (80068ac <MX_USB_DEVICE_Init+0x54>)
 8006862:	f7fe ff62 	bl	800572a <USBD_Init>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800686c:	f7f9 fcf6 	bl	800025c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006870:	490f      	ldr	r1, [pc, #60]	@ (80068b0 <MX_USB_DEVICE_Init+0x58>)
 8006872:	480e      	ldr	r0, [pc, #56]	@ (80068ac <MX_USB_DEVICE_Init+0x54>)
 8006874:	f7fe ff84 	bl	8005780 <USBD_RegisterClass>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800687e:	f7f9 fced 	bl	800025c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006882:	490c      	ldr	r1, [pc, #48]	@ (80068b4 <MX_USB_DEVICE_Init+0x5c>)
 8006884:	4809      	ldr	r0, [pc, #36]	@ (80068ac <MX_USB_DEVICE_Init+0x54>)
 8006886:	f7fe feb5 	bl	80055f4 <USBD_CDC_RegisterInterface>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006890:	f7f9 fce4 	bl	800025c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006894:	4805      	ldr	r0, [pc, #20]	@ (80068ac <MX_USB_DEVICE_Init+0x54>)
 8006896:	f7fe ff8c 	bl	80057b2 <USBD_Start>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068a0:	f7f9 fcdc 	bl	800025c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068a4:	bf00      	nop
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	2000012c 	.word	0x2000012c
 80068ac:	200001a0 	.word	0x200001a0
 80068b0:	20000018 	.word	0x20000018
 80068b4:	2000011c 	.word	0x2000011c

080068b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068bc:	2200      	movs	r2, #0
 80068be:	4905      	ldr	r1, [pc, #20]	@ (80068d4 <CDC_Init_FS+0x1c>)
 80068c0:	4805      	ldr	r0, [pc, #20]	@ (80068d8 <CDC_Init_FS+0x20>)
 80068c2:	f7fe fead 	bl	8005620 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068c6:	4905      	ldr	r1, [pc, #20]	@ (80068dc <CDC_Init_FS+0x24>)
 80068c8:	4803      	ldr	r0, [pc, #12]	@ (80068d8 <CDC_Init_FS+0x20>)
 80068ca:	f7fe fec2 	bl	8005652 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	2000086c 	.word	0x2000086c
 80068d8:	200001a0 	.word	0x200001a0
 80068dc:	2000046c 	.word	0x2000046c

080068e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80068e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
	...

080068f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b23      	cmp	r3, #35	@ 0x23
 8006904:	f200 808c 	bhi.w	8006a20 <CDC_Control_FS+0x130>
 8006908:	a201      	add	r2, pc, #4	@ (adr r2, 8006910 <CDC_Control_FS+0x20>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006a21 	.word	0x08006a21
 8006914:	08006a21 	.word	0x08006a21
 8006918:	08006a21 	.word	0x08006a21
 800691c:	08006a21 	.word	0x08006a21
 8006920:	08006a21 	.word	0x08006a21
 8006924:	08006a21 	.word	0x08006a21
 8006928:	08006a21 	.word	0x08006a21
 800692c:	08006a21 	.word	0x08006a21
 8006930:	08006a21 	.word	0x08006a21
 8006934:	08006a21 	.word	0x08006a21
 8006938:	08006a21 	.word	0x08006a21
 800693c:	08006a21 	.word	0x08006a21
 8006940:	08006a21 	.word	0x08006a21
 8006944:	08006a21 	.word	0x08006a21
 8006948:	08006a21 	.word	0x08006a21
 800694c:	08006a21 	.word	0x08006a21
 8006950:	08006a21 	.word	0x08006a21
 8006954:	08006a21 	.word	0x08006a21
 8006958:	08006a21 	.word	0x08006a21
 800695c:	08006a21 	.word	0x08006a21
 8006960:	08006a21 	.word	0x08006a21
 8006964:	08006a21 	.word	0x08006a21
 8006968:	08006a21 	.word	0x08006a21
 800696c:	08006a21 	.word	0x08006a21
 8006970:	08006a21 	.word	0x08006a21
 8006974:	08006a21 	.word	0x08006a21
 8006978:	08006a21 	.word	0x08006a21
 800697c:	08006a21 	.word	0x08006a21
 8006980:	08006a21 	.word	0x08006a21
 8006984:	08006a21 	.word	0x08006a21
 8006988:	08006a21 	.word	0x08006a21
 800698c:	08006a21 	.word	0x08006a21
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069db 	.word	0x080069db
 8006998:	08006a21 	.word	0x08006a21
 800699c:	08006a21 	.word	0x08006a21
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

    	buf[0] = pbuf[0];
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	4b22      	ldr	r3, [pc, #136]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069a6:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	785a      	ldrb	r2, [r3, #1]
 80069ac:	4b20      	ldr	r3, [pc, #128]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069ae:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	789a      	ldrb	r2, [r3, #2]
 80069b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069b6:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	78da      	ldrb	r2, [r3, #3]
 80069bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069be:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	791a      	ldrb	r2, [r3, #4]
 80069c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069c6:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	795a      	ldrb	r2, [r3, #5]
 80069cc:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069ce:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	799a      	ldrb	r2, [r3, #6]
 80069d4:	4b16      	ldr	r3, [pc, #88]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069d6:	719a      	strb	r2, [r3, #6]

    break;
 80069d8:	e023      	b.n	8006a22 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = buf[1];
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	4a12      	ldr	r2, [pc, #72]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069e8:	7852      	ldrb	r2, [r2, #1]
 80069ea:	701a      	strb	r2, [r3, #0]
		pbuf[2] = buf[2];
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	3302      	adds	r3, #2
 80069f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069f2:	7892      	ldrb	r2, [r2, #2]
 80069f4:	701a      	strb	r2, [r3, #0]
		pbuf[3] = buf[3];
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3303      	adds	r3, #3
 80069fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006a30 <CDC_Control_FS+0x140>)
 80069fc:	78d2      	ldrb	r2, [r2, #3]
 80069fe:	701a      	strb	r2, [r3, #0]
		pbuf[4] = buf[4];
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4a0a      	ldr	r2, [pc, #40]	@ (8006a30 <CDC_Control_FS+0x140>)
 8006a06:	7912      	ldrb	r2, [r2, #4]
 8006a08:	701a      	strb	r2, [r3, #0]
		pbuf[5] = buf[5];
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	3305      	adds	r3, #5
 8006a0e:	4a08      	ldr	r2, [pc, #32]	@ (8006a30 <CDC_Control_FS+0x140>)
 8006a10:	7952      	ldrb	r2, [r2, #5]
 8006a12:	701a      	strb	r2, [r3, #0]
		pbuf[6] = buf[6];
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	3306      	adds	r3, #6
 8006a18:	4a05      	ldr	r2, [pc, #20]	@ (8006a30 <CDC_Control_FS+0x140>)
 8006a1a:	7992      	ldrb	r2, [r2, #6]
 8006a1c:	701a      	strb	r2, [r3, #0]
    break;
 8006a1e:	e000      	b.n	8006a22 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006a20:	bf00      	nop
  }

  return (USBD_OK);
 8006a22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20000464 	.word	0x20000464

08006a34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4808      	ldr	r0, [pc, #32]	@ (8006a64 <CDC_Receive_FS+0x30>)
 8006a42:	f7fe fe06 	bl	8005652 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006a46:	4807      	ldr	r0, [pc, #28]	@ (8006a64 <CDC_Receive_FS+0x30>)
 8006a48:	f7fe fe45 	bl	80056d6 <USBD_CDC_ReceivePacket>

  uint16_t len = (uint16_t)Len;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	81fb      	strh	r3, [r7, #14]

  CDC_Transmit_FS(Buf, len);
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f807 	bl	8006a68 <CDC_Transmit_FS>
  return (USBD_OK);
 8006a5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	200001a0 	.word	0x200001a0

08006a68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a78:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <CDC_Transmit_FS+0x48>)
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00b      	b.n	8006aa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a8e:	887b      	ldrh	r3, [r7, #2]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	4806      	ldr	r0, [pc, #24]	@ (8006ab0 <CDC_Transmit_FS+0x48>)
 8006a96:	f7fe fdc3 	bl	8005620 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a9a:	4805      	ldr	r0, [pc, #20]	@ (8006ab0 <CDC_Transmit_FS+0x48>)
 8006a9c:	f7fe fdec 	bl	8005678 <USBD_CDC_TransmitPacket>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200001a0 	.word	0x200001a0

08006ab4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2212      	movs	r2, #18
 8006ac4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ac6:	4b03      	ldr	r3, [pc, #12]	@ (8006ad4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000148 	.word	0x20000148

08006ad8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	6039      	str	r1, [r7, #0]
 8006ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006aea:	4b03      	ldr	r3, [pc, #12]	@ (8006af8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	2000015c 	.word	0x2000015c

08006afc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	6039      	str	r1, [r7, #0]
 8006b06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	4907      	ldr	r1, [pc, #28]	@ (8006b30 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b12:	4808      	ldr	r0, [pc, #32]	@ (8006b34 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b14:	f7ff fdc3 	bl	800669e <USBD_GetString>
 8006b18:	e004      	b.n	8006b24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4904      	ldr	r1, [pc, #16]	@ (8006b30 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b1e:	4805      	ldr	r0, [pc, #20]	@ (8006b34 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b20:	f7ff fdbd 	bl	800669e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b24:	4b02      	ldr	r3, [pc, #8]	@ (8006b30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000c6c 	.word	0x20000c6c
 8006b34:	08007274 	.word	0x08007274

08006b38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	6039      	str	r1, [r7, #0]
 8006b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	4904      	ldr	r1, [pc, #16]	@ (8006b58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b48:	4804      	ldr	r0, [pc, #16]	@ (8006b5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b4a:	f7ff fda8 	bl	800669e <USBD_GetString>
  return USBD_StrDesc;
 8006b4e:	4b02      	ldr	r3, [pc, #8]	@ (8006b58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000c6c 	.word	0x20000c6c
 8006b5c:	0800728c 	.word	0x0800728c

08006b60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	6039      	str	r1, [r7, #0]
 8006b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	221a      	movs	r2, #26
 8006b70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b72:	f000 f843 	bl	8006bfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b76:	4b02      	ldr	r3, [pc, #8]	@ (8006b80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000160 	.word	0x20000160

08006b84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	6039      	str	r1, [r7, #0]
 8006b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4907      	ldr	r1, [pc, #28]	@ (8006bb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b9a:	4808      	ldr	r0, [pc, #32]	@ (8006bbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b9c:	f7ff fd7f 	bl	800669e <USBD_GetString>
 8006ba0:	e004      	b.n	8006bac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4904      	ldr	r1, [pc, #16]	@ (8006bb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ba6:	4805      	ldr	r0, [pc, #20]	@ (8006bbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ba8:	f7ff fd79 	bl	800669e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bac:	4b02      	ldr	r3, [pc, #8]	@ (8006bb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000c6c 	.word	0x20000c6c
 8006bbc:	080072a0 	.word	0x080072a0

08006bc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	6039      	str	r1, [r7, #0]
 8006bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	4907      	ldr	r1, [pc, #28]	@ (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bd6:	4808      	ldr	r0, [pc, #32]	@ (8006bf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bd8:	f7ff fd61 	bl	800669e <USBD_GetString>
 8006bdc:	e004      	b.n	8006be8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	4904      	ldr	r1, [pc, #16]	@ (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006be2:	4805      	ldr	r0, [pc, #20]	@ (8006bf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006be4:	f7ff fd5b 	bl	800669e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be8:	4b02      	ldr	r3, [pc, #8]	@ (8006bf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000c6c 	.word	0x20000c6c
 8006bf8:	080072ac 	.word	0x080072ac

08006bfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4413      	add	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d009      	beq.n	8006c24 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c10:	2208      	movs	r2, #8
 8006c12:	4906      	ldr	r1, [pc, #24]	@ (8006c2c <Get_SerialNum+0x30>)
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f80d 	bl	8006c34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	4904      	ldr	r1, [pc, #16]	@ (8006c30 <Get_SerialNum+0x34>)
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f808 	bl	8006c34 <IntToUnicode>
  }
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000162 	.word	0x20000162
 8006c30:	20000172 	.word	0x20000172

08006c34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
 8006c4a:	e027      	b.n	8006c9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	0f1b      	lsrs	r3, r3, #28
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	d80b      	bhi.n	8006c6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	0f1b      	lsrs	r3, r3, #28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	440b      	add	r3, r1
 8006c64:	3230      	adds	r2, #48	@ 0x30
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e00a      	b.n	8006c82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	0f1b      	lsrs	r3, r3, #28
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	4619      	mov	r1, r3
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3237      	adds	r2, #55	@ 0x37
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
 8006c9c:	7dfa      	ldrb	r2, [r7, #23]
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d3d3      	bcc.n	8006c4c <IntToUnicode+0x18>
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf4 <HAL_PCD_MspInit+0x44>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d113      	bne.n	8006cea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <HAL_PCD_MspInit+0x48>)
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf8 <HAL_PCD_MspInit+0x48>)
 8006cc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ccc:	61d3      	str	r3, [r2, #28]
 8006cce:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <HAL_PCD_MspInit+0x48>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2100      	movs	r1, #0
 8006cde:	2014      	movs	r0, #20
 8006ce0:	f7f9 fc8f 	bl	8000602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006ce4:	2014      	movs	r0, #20
 8006ce6:	f7f9 fca8 	bl	800063a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40005c00 	.word	0x40005c00
 8006cf8:	40021000 	.word	0x40021000

08006cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f7fe fd95 	bl	8005842 <USBD_LL_SetupStage>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	440b      	add	r3, r1
 8006d40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f7fe fdc7 	bl	80058dc <USBD_LL_DataOutStage>
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	440b      	add	r3, r1
 8006d76:	3324      	adds	r3, #36	@ 0x24
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f7fe fe1e 	bl	80059be <USBD_LL_DataInStage>
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe ff2e 	bl	8005bfa <USBD_LL_SOF>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	799b      	ldrb	r3, [r3, #6]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d001      	beq.n	8006dbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006dba:	f7f9 fa4f 	bl	800025c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dc4:	7bfa      	ldrb	r2, [r7, #15]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe fede 	bl	8005b8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fe97 	bl	8005b08 <USBD_LL_Reset>
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fed8 	bl	8005ba8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7a9b      	ldrb	r3, [r3, #10]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e00:	4b04      	ldr	r3, [pc, #16]	@ (8006e14 <HAL_PCD_SuspendCallback+0x30>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	4a03      	ldr	r2, [pc, #12]	@ (8006e14 <HAL_PCD_SuspendCallback+0x30>)
 8006e06:	f043 0306 	orr.w	r3, r3, #6
 8006e0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fed2 	bl	8005bd0 <USBD_LL_Resume>
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a26      	ldr	r2, [pc, #152]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e48:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006e4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e4e:	4a25      	ldr	r2, [pc, #148]	@ (8006ee4 <USBD_LL_Init+0xb0>)
 8006e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006e52:	4b23      	ldr	r3, [pc, #140]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e54:	2208      	movs	r2, #8
 8006e56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006e58:	4b21      	ldr	r3, [pc, #132]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006e5e:	4b20      	ldr	r3, [pc, #128]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006e64:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006e70:	481b      	ldr	r0, [pc, #108]	@ (8006ee0 <USBD_LL_Init+0xac>)
 8006e72:	f7f9 fbfc 	bl	800066e <HAL_PCD_Init>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006e7c:	f7f9 f9ee 	bl	800025c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006e86:	2318      	movs	r3, #24
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f7fb f90d 	bl	80020aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006e96:	2358      	movs	r3, #88	@ 0x58
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2180      	movs	r1, #128	@ 0x80
 8006e9c:	f7fb f905 	bl	80020aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ea6:	23c0      	movs	r3, #192	@ 0xc0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2181      	movs	r1, #129	@ 0x81
 8006eac:	f7fb f8fd 	bl	80020aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006eb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	f7fb f8f4 	bl	80020aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2182      	movs	r1, #130	@ 0x82
 8006ed0:	f7fb f8eb 	bl	80020aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000e6c 	.word	0x20000e6c
 8006ee4:	40005c00 	.word	0x40005c00

08006ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 fcab 	bl	800085a <HAL_PCD_Start>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f94e 	bl	80071ac <USBD_Get_USB_Status>
 8006f10:	4603      	mov	r3, r0
 8006f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	70fb      	strb	r3, [r7, #3]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70bb      	strb	r3, [r7, #2]
 8006f34:	4613      	mov	r3, r2
 8006f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006f46:	78bb      	ldrb	r3, [r7, #2]
 8006f48:	883a      	ldrh	r2, [r7, #0]
 8006f4a:	78f9      	ldrb	r1, [r7, #3]
 8006f4c:	f7f9 fdff 	bl	8000b4e <HAL_PCD_EP_Open>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f928 	bl	80071ac <USBD_Get_USB_Status>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f84:	78fa      	ldrb	r2, [r7, #3]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7f9 fe3d 	bl	8000c08 <HAL_PCD_EP_Close>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f909 	bl	80071ac <USBD_Get_USB_Status>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7f9 fee5 	bl	8000d96 <HAL_PCD_EP_SetStall>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f8ea 	bl	80071ac <USBD_Get_USB_Status>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7f9 ff26 	bl	8000e56 <HAL_PCD_EP_ClrStall>
 800700a:	4603      	mov	r3, r0
 800700c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f8cb 	bl	80071ac <USBD_Get_USB_Status>
 8007016:	4603      	mov	r3, r0
 8007018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800701a:	7bbb      	ldrb	r3, [r7, #14]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800703c:	2b00      	cmp	r3, #0
 800703e:	da0b      	bge.n	8007058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	440b      	add	r3, r1
 8007052:	3312      	adds	r3, #18
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	e00b      	b.n	8007070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	440b      	add	r3, r1
 800706a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800706e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr

0800707a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f7f9 fd34 	bl	8000b06 <HAL_PCD_SetAddress>
 800709e:	4603      	mov	r3, r0
 80070a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f881 	bl	80071ac <USBD_Get_USB_Status>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	461a      	mov	r2, r3
 80070c4:	460b      	mov	r3, r1
 80070c6:	72fb      	strb	r3, [r7, #11]
 80070c8:	4613      	mov	r3, r2
 80070ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80070da:	893b      	ldrh	r3, [r7, #8]
 80070dc:	7af9      	ldrb	r1, [r7, #11]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	f7f9 fe22 	bl	8000d28 <HAL_PCD_EP_Transmit>
 80070e4:	4603      	mov	r3, r0
 80070e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f85e 	bl	80071ac <USBD_Get_USB_Status>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	461a      	mov	r2, r3
 800710a:	460b      	mov	r3, r1
 800710c:	72fb      	strb	r3, [r7, #11]
 800710e:	4613      	mov	r3, r2
 8007110:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007120:	893b      	ldrh	r3, [r7, #8]
 8007122:	7af9      	ldrb	r1, [r7, #11]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	f7f9 fdb7 	bl	8000c98 <HAL_PCD_EP_Receive>
 800712a:	4603      	mov	r3, r0
 800712c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	4618      	mov	r0, r3
 8007132:	f000 f83b 	bl	80071ac <USBD_Get_USB_Status>
 8007136:	4603      	mov	r3, r0
 8007138:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800713a:	7dbb      	ldrb	r3, [r7, #22]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7f9 fdcd 	bl	8000cfa <HAL_PCD_EP_GetRxCount>
 8007160:	4603      	mov	r3, r0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007174:	4b02      	ldr	r3, [pc, #8]	@ (8007180 <USBD_static_malloc+0x14>)
}
 8007176:	4618      	mov	r0, r3
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	bc80      	pop	{r7}
 800717e:	4770      	bx	lr
 8007180:	20001144 	.word	0x20001144

08007184 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d817      	bhi.n	80071f0 <USBD_Get_USB_Status+0x44>
 80071c0:	a201      	add	r2, pc, #4	@ (adr r2, 80071c8 <USBD_Get_USB_Status+0x1c>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071df 	.word	0x080071df
 80071d0:	080071e5 	.word	0x080071e5
 80071d4:	080071eb 	.word	0x080071eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
    break;
 80071dc:	e00b      	b.n	80071f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071de:	2302      	movs	r3, #2
 80071e0:	73fb      	strb	r3, [r7, #15]
    break;
 80071e2:	e008      	b.n	80071f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
    break;
 80071e8:	e005      	b.n	80071f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071ea:	2302      	movs	r3, #2
 80071ec:	73fb      	strb	r3, [r7, #15]
    break;
 80071ee:	e002      	b.n	80071f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071f0:	2302      	movs	r3, #2
 80071f2:	73fb      	strb	r3, [r7, #15]
    break;
 80071f4:	bf00      	nop
  }
  return usb_status;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop

08007204 <memset>:
 8007204:	4603      	mov	r3, r0
 8007206:	4402      	add	r2, r0
 8007208:	4293      	cmp	r3, r2
 800720a:	d100      	bne.n	800720e <memset+0xa>
 800720c:	4770      	bx	lr
 800720e:	f803 1b01 	strb.w	r1, [r3], #1
 8007212:	e7f9      	b.n	8007208 <memset+0x4>

08007214 <__libc_init_array>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	2600      	movs	r6, #0
 8007218:	4d0c      	ldr	r5, [pc, #48]	@ (800724c <__libc_init_array+0x38>)
 800721a:	4c0d      	ldr	r4, [pc, #52]	@ (8007250 <__libc_init_array+0x3c>)
 800721c:	1b64      	subs	r4, r4, r5
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	42a6      	cmp	r6, r4
 8007222:	d109      	bne.n	8007238 <__libc_init_array+0x24>
 8007224:	f000 f81a 	bl	800725c <_init>
 8007228:	2600      	movs	r6, #0
 800722a:	4d0a      	ldr	r5, [pc, #40]	@ (8007254 <__libc_init_array+0x40>)
 800722c:	4c0a      	ldr	r4, [pc, #40]	@ (8007258 <__libc_init_array+0x44>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	42a6      	cmp	r6, r4
 8007234:	d105      	bne.n	8007242 <__libc_init_array+0x2e>
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	f855 3b04 	ldr.w	r3, [r5], #4
 800723c:	4798      	blx	r3
 800723e:	3601      	adds	r6, #1
 8007240:	e7ee      	b.n	8007220 <__libc_init_array+0xc>
 8007242:	f855 3b04 	ldr.w	r3, [r5], #4
 8007246:	4798      	blx	r3
 8007248:	3601      	adds	r6, #1
 800724a:	e7f2      	b.n	8007232 <__libc_init_array+0x1e>
 800724c:	080072e0 	.word	0x080072e0
 8007250:	080072e0 	.word	0x080072e0
 8007254:	080072e0 	.word	0x080072e0
 8007258:	080072e4 	.word	0x080072e4

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
