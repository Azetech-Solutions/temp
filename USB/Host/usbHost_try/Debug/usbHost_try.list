
usbHost_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a2c  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009c84  08009c84  0000ac84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd8  08009cd8  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000000  08009cd8  08009cd8  0000b07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cd8  08009cd8  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cdc  08009cdc  0000acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009ce0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000930  2000007c  08009d5c  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  200009ac  08009d5c  0000b9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122fd  00000000  00000000  0000b0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303f  00000000  00000000  0001d3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000203f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000933  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020add  00000000  00000000  00021993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c14  00000000  00000000  00042470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1c7d  00000000  00000000  00053084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  00114d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0011848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000007c 	.word	0x2000007c
 8000274:	00000000 	.word	0x00000000
 8000278:	08009c6c 	.word	0x08009c6c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000080 	.word	0x20000080
 8000294:	08009c6c 	.word	0x08009c6c

08000298 <CDC_HANDLE>:

CDC_StateTypedef CDC_STATE = CDC_STATE_IDLE;

uint8_t i=0;
void CDC_HANDLE (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
	switch (CDC_STATE)
 800029e:	4b1c      	ldr	r3, [pc, #112]	@ (8000310 <CDC_HANDLE+0x78>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d002      	beq.n	80002ac <CDC_HANDLE+0x14>
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d01e      	beq.n	80002e8 <CDC_HANDLE+0x50>
			  CDC_STATE = CDC_STATE_IDLE;
		}
		break;

		default:
			  break;
 80002aa:	e02d      	b.n	8000308 <CDC_HANDLE+0x70>
			  USBH_CDC_Stop(&hUsbHostFS);
 80002ac:	4819      	ldr	r0, [pc, #100]	@ (8000314 <CDC_HANDLE+0x7c>)
 80002ae:	f007 f93a 	bl	8007526 <USBH_CDC_Stop>
			  int len = sprintf ((char *)CDC_TX_Buffer, "DATA = %d", i);
 80002b2:	4b19      	ldr	r3, [pc, #100]	@ (8000318 <CDC_HANDLE+0x80>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4918      	ldr	r1, [pc, #96]	@ (800031c <CDC_HANDLE+0x84>)
 80002ba:	4819      	ldr	r0, [pc, #100]	@ (8000320 <CDC_HANDLE+0x88>)
 80002bc:	f009 f8d2 	bl	8009464 <siprintf>
 80002c0:	6078      	str	r0, [r7, #4]
			  if (USBH_CDC_Transmit (&hUsbHostFS, CDC_TX_Buffer, len) == USBH_OK)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	461a      	mov	r2, r3
 80002c6:	4916      	ldr	r1, [pc, #88]	@ (8000320 <CDC_HANDLE+0x88>)
 80002c8:	4812      	ldr	r0, [pc, #72]	@ (8000314 <CDC_HANDLE+0x7c>)
 80002ca:	f007 f993 	bl	80075f4 <USBH_CDC_Transmit>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d102      	bne.n	80002da <CDC_HANDLE+0x42>
				  CDC_STATE = CDC_RECEIVE;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <CDC_HANDLE+0x78>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
			  i++;
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <CDC_HANDLE+0x80>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000318 <CDC_HANDLE+0x80>)
 80002e4:	701a      	strb	r2, [r3, #0]
			  break;
 80002e6:	e00f      	b.n	8000308 <CDC_HANDLE+0x70>
			  USBH_CDC_Stop(&hUsbHostFS);
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <CDC_HANDLE+0x7c>)
 80002ea:	f007 f91c 	bl	8007526 <USBH_CDC_Stop>
			  usbresult = USBH_CDC_Receive(&hUsbHostFS, (uint8_t *) CDC_RX_Buffer, RX_BUFF_SIZE);
 80002ee:	2240      	movs	r2, #64	@ 0x40
 80002f0:	490c      	ldr	r1, [pc, #48]	@ (8000324 <CDC_HANDLE+0x8c>)
 80002f2:	4808      	ldr	r0, [pc, #32]	@ (8000314 <CDC_HANDLE+0x7c>)
 80002f4:	f007 f9ac 	bl	8007650 <USBH_CDC_Receive>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <CDC_HANDLE+0x90>)
 80002fe:	701a      	strb	r2, [r3, #0]
			  CDC_STATE = CDC_STATE_IDLE;
 8000300:	4b03      	ldr	r3, [pc, #12]	@ (8000310 <CDC_HANDLE+0x78>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
		break;
 8000306:	bf00      	nop
	}
}
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000118 	.word	0x20000118
 8000314:	20000488 	.word	0x20000488
 8000318:	20000119 	.word	0x20000119
 800031c:	08009c84 	.word	0x08009c84
 8000320:	200000d8 	.word	0x200000d8
 8000324:	20000098 	.word	0x20000098
 8000328:	20000861 	.word	0x20000861

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000330:	f000 fa50 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f810 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f000 f87a 	bl	8000430 <MX_GPIO_Init>
  //MX_USB_HCD_Init();
  /* USER CODE BEGIN 2 */
  MX_USB_HOST_Init();
 800033c:	f006 fdec 	bl	8006f18 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_USB_HOST_Process();
 8000340:	f006 fe32 	bl	8006fa8 <MX_USB_HOST_Process>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Appli_state == APPLICATION_READY)
 8000344:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <main+0x28>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d1f9      	bne.n	8000340 <main+0x14>
	  {
		  CDC_HANDLE();
 800034c:	f7ff ffa4 	bl	8000298 <CDC_HANDLE>
	  MX_USB_HOST_Process();
 8000350:	e7f6      	b.n	8000340 <main+0x14>
 8000352:	bf00      	nop
 8000354:	20000860 	.word	0x20000860

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b09c      	sub	sp, #112	@ 0x70
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0320 	add.w	r3, r7, #32
 8000362:	2250      	movs	r2, #80	@ 0x50
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f009 f89c 	bl	80094a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
 800037c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800037e:	4b2b      	ldr	r3, [pc, #172]	@ (800042c <SystemClock_Config+0xd4>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	4a2a      	ldr	r2, [pc, #168]	@ (800042c <SystemClock_Config+0xd4>)
 8000384:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000388:	6113      	str	r3, [r2, #16]
 800038a:	4b28      	ldr	r3, [pc, #160]	@ (800042c <SystemClock_Config+0xd4>)
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000396:	bf00      	nop
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <SystemClock_Config+0xd4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0308 	and.w	r3, r3, #8
 80003a0:	2b08      	cmp	r3, #8
 80003a2:	d1f9      	bne.n	8000398 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80003a4:	2322      	movs	r3, #34	@ 0x22
 80003a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80003ac:	2308      	movs	r3, #8
 80003ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2340      	movs	r3, #64	@ 0x40
 80003b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 80003be:	2301      	movs	r3, #1
 80003c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80003c6:	2308      	movs	r3, #8
 80003c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80003d6:	230c      	movs	r3, #12
 80003d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80003da:	2300      	movs	r3, #0
 80003dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0320 	add.w	r3, r7, #32
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 f826 	bl	8004438 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003f2:	f000 f863 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	231f      	movs	r3, #31
 80003f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2303      	movs	r3, #3
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	2103      	movs	r1, #3
 8000414:	4618      	mov	r0, r3
 8000416:	f004 fc47 	bl	8004ca8 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000420:	f000 f84c 	bl	80004bc <Error_Handler>
  }
}
 8000424:	bf00      	nop
 8000426:	3770      	adds	r7, #112	@ 0x70
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	44020800 	.word	0x44020800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_GPIO_Init+0x84>)
 8000448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800044c:	4a19      	ldr	r2, [pc, #100]	@ (80004b4 <MX_GPIO_Init+0x84>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <MX_GPIO_Init+0x84>)
 8000458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000464:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_GPIO_Init+0x84>)
 8000466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800046a:	4a12      	ldr	r2, [pc, #72]	@ (80004b4 <MX_GPIO_Init+0x84>)
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_GPIO_Init+0x84>)
 8000476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800047a:	f003 0304 	and.w	r3, r3, #4
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000488:	480b      	ldr	r0, [pc, #44]	@ (80004b8 <MX_GPIO_Init+0x88>)
 800048a:	f000 fd67 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800048e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	4619      	mov	r1, r3
 80004a6:	4804      	ldr	r0, [pc, #16]	@ (80004b8 <MX_GPIO_Init+0x88>)
 80004a8:	f000 fc06 	bl	8000cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	44020c00 	.word	0x44020c00
 80004b8:	42020800 	.word	0x42020800

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0ac      	sub	sp, #176	@ 0xb0
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2288      	movs	r2, #136	@ 0x88
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f008 ffd3 	bl	80094a4 <memset>
  if(hhcd->Instance==USB_DRD_FS)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a2b      	ldr	r2, [pc, #172]	@ (80005b0 <HAL_HCD_MspInit+0xd8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d14e      	bne.n	80005a6 <HAL_HCD_MspInit+0xce>
//
  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000508:	f04f 0200 	mov.w	r2, #0
 800050c:	f04f 0310 	mov.w	r3, #16
 8000510:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000514:	2330      	movs	r3, #48	@ 0x30
 8000516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4618      	mov	r0, r3
 8000520:	f004 fec2 	bl	80052a8 <HAL_RCCEx_PeriphCLKConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 800052a:	f7ff ffc7 	bl	80004bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 8000530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000534:	4a1f      	ldr	r2, [pc, #124]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 8000536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800053a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800053e:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 8000540:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */
    /**USB GPIO Configuration
          PA11     ------> USB_DM
          PA12     ------> USB_DP
          */
          GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800054c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
          GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000554:	2302      	movs	r3, #2
 8000556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
          GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
          GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
          GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000566:	230a      	movs	r3, #10
 8000568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
          HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000570:	4619      	mov	r1, r3
 8000572:	4811      	ldr	r0, [pc, #68]	@ (80005b8 <HAL_HCD_MspInit+0xe0>)
 8000574:	f000 fba0 	bl	8000cb8 <HAL_GPIO_Init>

          /* Peripheral clock enable */
          __HAL_RCC_USB_CLK_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 800057a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 8000580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000584:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_HCD_MspInit+0xdc>)
 800058a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800058e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
          /* USB_DRD_FS interrupt Init */
          HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	204a      	movs	r0, #74	@ 0x4a
 800059c:	f000 fab4 	bl	8000b08 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80005a0:	204a      	movs	r0, #74	@ 0x4a
 80005a2:	f000 facb 	bl	8000b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 80005a6:	bf00      	nop
 80005a8:	37b0      	adds	r7, #176	@ 0xb0
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40016000 	.word	0x40016000
 80005b4:	44020c00 	.word	0x44020c00
 80005b8:	42020000 	.word	0x42020000

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f97d 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_DRD_FS);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <USB_DRD_FS_IRQHandler+0x10>)
 8000622:	f001 fb09 	bl	8001c38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000124 	.word	0x20000124

08000630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000638:	4a14      	ldr	r2, [pc, #80]	@ (800068c <_sbrk+0x5c>)
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <_sbrk+0x60>)
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <_sbrk+0x64>)
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <_sbrk+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d207      	bcs.n	8000670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000660:	f008 ff38 	bl	80094d4 <__errno>
 8000664:	4603      	mov	r3, r0
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e009      	b.n	8000684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4a05      	ldr	r2, [pc, #20]	@ (8000694 <_sbrk+0x64>)
 8000680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20008000 	.word	0x20008000
 8000690:	00000800 	.word	0x00000800
 8000694:	2000011c 	.word	0x2000011c
 8000698:	200009b0 	.word	0x200009b0

0800069c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <SystemInit+0xc8>)
 80006a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000764 <SystemInit+0xc8>)
 80006aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <SystemInit+0xcc>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <SystemInit+0xcc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <SystemInit+0xcc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemInit+0xcc>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4927      	ldr	r1, [pc, #156]	@ (8000768 <SystemInit+0xcc>)
 80006ca:	4b28      	ldr	r3, [pc, #160]	@ (800076c <SystemInit+0xd0>)
 80006cc:	4013      	ands	r3, r2
 80006ce:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemInit+0xcc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <SystemInit+0xcc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemInit+0xcc>)
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0xd4>)
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <SystemInit+0xcc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemInit+0xcc>)
 80006ea:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <SystemInit+0xd4>)
 80006ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <SystemInit+0xcc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <SystemInit+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <SystemInit+0xcc>)
 80006fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <SystemInit+0xcc>)
 8000702:	2200      	movs	r2, #0
 8000704:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <SystemInit+0xc8>)
 8000708:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800070c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <SystemInit+0xd8>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000716:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800071e:	d003      	beq.n	8000728 <SystemInit+0x8c>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000726:	d117      	bne.n	8000758 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0xd8>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d005      	beq.n	8000740 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0xd8>)
 8000736:	4a10      	ldr	r2, [pc, #64]	@ (8000778 <SystemInit+0xdc>)
 8000738:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <SystemInit+0xd8>)
 800073c:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <SystemInit+0xe0>)
 800073e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <SystemInit+0xd8>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a0b      	ldr	r2, [pc, #44]	@ (8000774 <SystemInit+0xd8>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <SystemInit+0xd8>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a08      	ldr	r2, [pc, #32]	@ (8000774 <SystemInit+0xd8>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	61d3      	str	r3, [r2, #28]
  }
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00
 8000768:	44020c00 	.word	0x44020c00
 800076c:	fae2eae3 	.word	0xfae2eae3
 8000770:	01010280 	.word	0x01010280
 8000774:	40022000 	.word	0x40022000
 8000778:	08192a3b 	.word	0x08192a3b
 800077c:	4c5d6e7f 	.word	0x4c5d6e7f

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000784:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000786:	e003      	b.n	8000790 <LoopCopyDataInit>

08000788 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800078a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800078c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800078e:	3104      	adds	r1, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000794:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000796:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000798:	d3f6      	bcc.n	8000788 <CopyDataInit>
	ldr	r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800079c:	e002      	b.n	80007a4 <LoopFillZerobss>

0800079e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800079e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007a0:	f842 3b04 	str.w	r3, [r2], #4

080007a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <LoopForever+0x16>)
	cmp	r2, r3
 80007a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007a8:	d3f9      	bcc.n	800079e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007aa:	f7ff ff77 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f008 fe97 	bl	80094e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff fdbb 	bl	800032c <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80007b8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80007bc:	08009ce0 	.word	0x08009ce0
	ldr	r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007c4:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80007c8:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80007cc:	200009ac 	.word	0x200009ac

080007d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f98a 	bl	8000af2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80007de:	f004 fc1b 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 80007e2:	4602      	mov	r2, r0
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_Init+0x44>)
 80007e6:	6a1b      	ldr	r3, [r3, #32]
 80007e8:	f003 030f 	and.w	r3, r3, #15
 80007ec:	490b      	ldr	r1, [pc, #44]	@ (800081c <HAL_Init+0x48>)
 80007ee:	5ccb      	ldrb	r3, [r1, r3]
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <HAL_Init+0x4c>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 f9cf 	bl	8000b9c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f810 	bl	8000824 <HAL_InitTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e002      	b.n	8000814 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800080e:	f7ff fe5b 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	bd80      	pop	{r7, pc}
 8000818:	44020c00 	.word	0x44020c00
 800081c:	08009c94 	.word	0x08009c94
 8000820:	20000000 	.word	0x20000000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000830:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <HAL_InitTick+0xdc>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e05c      	b.n	80008f6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800083c:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <HAL_InitTick+0xe0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	2b04      	cmp	r3, #4
 8000846:	d10c      	bne.n	8000862 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000848:	4b2f      	ldr	r3, [pc, #188]	@ (8000908 <HAL_InitTick+0xe4>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <HAL_InitTick+0xdc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e037      	b.n	80008d2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000862:	f000 f9f3 	bl	8000c4c <HAL_SYSTICK_GetCLKSourceConfig>
 8000866:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d023      	beq.n	80008b6 <HAL_InitTick+0x92>
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d82d      	bhi.n	80008d0 <HAL_InitTick+0xac>
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <HAL_InitTick+0x5e>
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d00d      	beq.n	800089c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000880:	e026      	b.n	80008d0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <HAL_InitTick+0xe4>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <HAL_InitTick+0xdc>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000890:	fbb3 f3f1 	udiv	r3, r3, r1
 8000894:	fbb2 f3f3 	udiv	r3, r2, r3
 8000898:	60fb      	str	r3, [r7, #12]
        break;
 800089a:	e01a      	b.n	80008d2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_InitTick+0xdc>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80008aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	60fb      	str	r3, [r7, #12]
        break;
 80008b4:	e00d      	b.n	80008d2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0xdc>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	60fb      	str	r3, [r7, #12]
        break;
 80008ce:	e000      	b.n	80008d2 <HAL_InitTick+0xae>
        break;
 80008d0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 f940 	bl	8000b58 <HAL_SYSTICK_Config>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e009      	b.n	80008f6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e2:	2200      	movs	r2, #0
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ea:	f000 f90d 	bl	8000b08 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80008ee:	4a07      	ldr	r2, [pc, #28]	@ (800090c <HAL_InitTick+0xe8>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	e000e010 	.word	0xe000e010
 8000908:	20000000 	.word	0x20000000
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000120 	.word	0x20000120

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000120 	.word	0x20000120

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	@ (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff4c 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b16:	f7ff ff63 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	6978      	ldr	r0, [r7, #20]
 8000b22:	f7ff ffb3 	bl	8000a8c <NVIC_EncodePriority>
 8000b26:	4602      	mov	r2, r0
 8000b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff82 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff56 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00d      	b.n	8000b8a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_SYSTICK_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <HAL_SYSTICK_Config+0x40>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_SYSTICK_Config+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <HAL_SYSTICK_Config+0x40>)
 8000b82:	f043 0303 	orr.w	r3, r3, #3
 8000b86:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d844      	bhi.n	8000c34 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000baa:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000bd3 	.word	0x08000bd3
 8000bb4:	08000bf1 	.word	0x08000bf1
 8000bb8:	08000c13 	.word	0x08000c13
 8000bbc:	08000c35 	.word	0x08000c35
 8000bc0:	08000bc5 	.word	0x08000bc5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6013      	str	r3, [r2, #0]
      break;
 8000bd0:	e031      	b.n	8000c36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000be4:	4a18      	ldr	r2, [pc, #96]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000be6:	f023 030c 	bic.w	r3, r3, #12
 8000bea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000bee:	e022      	b.n	8000c36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a13      	ldr	r2, [pc, #76]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bf6:	f023 0304 	bic.w	r3, r3, #4
 8000bfa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000c02:	f023 030c 	bic.w	r3, r3, #12
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000c10:	e011      	b.n	8000c36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c18:	f023 0304 	bic.w	r3, r3, #4
 8000c1c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000c24:	f023 030c 	bic.w	r3, r3, #12
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000c32:	e000      	b.n	8000c36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000c34:	bf00      	nop
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010
 8000c48:	44020c00 	.word	0x44020c00

08000c4c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e01e      	b.n	8000ca2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d00f      	beq.n	8000c96 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d80f      	bhi.n	8000c9c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d003      	beq.n	8000c90 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000c88:	e008      	b.n	8000c9c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
        break;
 8000c8e:	e008      	b.n	8000ca2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000c90:	2301      	movs	r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
        break;
 8000c94:	e005      	b.n	8000ca2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000c96:	2302      	movs	r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
        break;
 8000c9a:	e002      	b.n	8000ca2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
        break;
 8000ca0:	bf00      	nop
    }
  }
  return systick_source;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e010 	.word	0xe000e010
 8000cb4:	44020c00 	.word	0x44020c00

08000cb8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cc6:	e136      	b.n	8000f36 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8128 	beq.w	8000f30 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x38>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d125      	bne.n	8000d3c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	4013      	ands	r3, r2
 8000d12:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	f003 020f 	and.w	r2, r3, #15
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3208      	adds	r2, #8
 8000d36:	6979      	ldr	r1, [r7, #20]
 8000d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0203 	and.w	r2, r3, #3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d00b      	beq.n	8000d90 <HAL_GPIO_Init+0xd8>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d84:	2b11      	cmp	r3, #17
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b12      	cmp	r3, #18
 8000d8e:	d130      	bne.n	8000df2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	f003 0201 	and.w	r2, r3, #1
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d07c      	beq.n	8000f30 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e36:	4a47      	ldr	r2, [pc, #284]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	4013      	ands	r3, r2
 8000e58:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	0a9a      	lsrs	r2, r3, #10
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e72:	4938      	ldr	r1, [pc, #224]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3318      	adds	r3, #24
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e80:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000ece:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000eda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_GPIO_Init+0x29c>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	3301      	adds	r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f aec1 	bne.w	8000cc8 <HAL_GPIO_Init+0x10>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	44022000 	.word	0x44022000
 8000f58:	002f7f7f 	.word	0x002f7f7f

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HCD_GET_CH_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bChNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t HCD_GET_CH_RX_CNT(HCD_TypeDef *Instance, uint16_t bChNum)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
  uint32_t HostCoreSpeed;
  uint32_t ep_reg = USB_DRD_GET_CHEP(Instance, bChNum);
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 10U;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	60fb      	str	r3, [r7, #12]

  /* Get Host core Speed */
  HostCoreSpeed = USB_GetHostSpeed(Instance);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f005 f9bb 	bl	8006324 <USB_GetHostSpeed>
 8000fae:	6138      	str	r0, [r7, #16]

  /* Count depends on device LS */
  if ((HostCoreSpeed == USB_DRD_SPEED_LS) || ((ep_reg & USB_CHEP_LSEP) == USB_CHEP_LSEP))
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d004      	beq.n	8000fc0 <HCD_GET_CH_RX_CNT+0x34>
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <HCD_GET_CH_RX_CNT+0x52>
  {
    count = (70U * (HAL_RCC_GetHCLKFreq() / 1000000U)) / 100U;
 8000fc0:	f004 f956 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <HCD_GET_CH_RX_CNT+0x98>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	2246      	movs	r2, #70	@ 0x46
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <HCD_GET_CH_RX_CNT+0x9c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  if (count > 15U)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d90c      	bls.n	8000ffe <HCD_GET_CH_RX_CNT+0x72>
  {
    count = HCD_MAX(10U, (count - 15U));
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3b0f      	subs	r3, #15
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d902      	bls.n	8000ff2 <HCD_GET_CH_RX_CNT+0x66>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3b0f      	subs	r3, #15
 8000ff0:	e000      	b.n	8000ff4 <HCD_GET_CH_RX_CNT+0x68>
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8000ff6:	e002      	b.n	8000ffe <HCD_GET_CH_RX_CNT+0x72>
  {
    count--;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f9      	bne.n	8000ff8 <HCD_GET_CH_RX_CNT+0x6c>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bChNum));
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800100c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800101a:	b29b      	uxth	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	431bde83 	.word	0x431bde83
 8001028:	51eb851f 	.word	0x51eb851f

0800102c <HCD_GET_CH_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bChNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t HCD_GET_CH_DBUF0_CNT(const HCD_TypeDef *Instance, uint16_t bChNum)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8001038:	230a      	movs	r3, #10
 800103a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800103c:	e002      	b.n	8001044 <HCD_GET_CH_DBUF0_CNT+0x18>
  {
    count--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3b01      	subs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HCD_GET_CH_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bChNum));
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001052:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	b29b      	uxth	r3, r3
 800105c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HCD_GET_CH_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bChNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t HCD_GET_CH_DBUF1_CNT(const HCD_TypeDef *Instance, uint16_t bChNum)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 800107a:	230a      	movs	r3, #10
 800107c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800107e:	e002      	b.n	8001086 <HCD_GET_CH_DBUF1_CNT+0x18>
  {
    count--;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3b01      	subs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f9      	bne.n	8001080 <HCD_GET_CH_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bChNum));
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	b29b      	uxth	r3, r3
 800109e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a2:	b29b      	uxth	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e042      	b.n	8001148 <HAL_HCD_Init+0x98>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 335a 	ldrb.w	r3, [r3, #858]	@ 0x35a
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff f9fe 	bl	80004d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  /* Disable the Interrupts */
  (void)__HAL_HCD_DISABLE(hhcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 ffce 	bl	800608a <USB_DisableGlobalInt>

  /* Dma not supported, force to zero */
  hhcd->Init.dma_enable = 0U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	719a      	strb	r2, [r3, #6]

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7c1a      	ldrb	r2, [r3, #16]
 80010fc:	f88d 2000 	strb.w	r2, [sp]
 8001100:	3304      	adds	r3, #4
 8001102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001104:	f004 ffa3 	bl	800604e <USB_CoreInit>

  /* Force Host Mode */
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f004 ffd0 	bl	80060b4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7c1a      	ldrb	r2, [r3, #16]
 800111c:	f88d 2000 	strb.w	r2, [sp]
 8001120:	3304      	adds	r3, #4
 8001122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001124:	f005 f8b6 	bl	8006294 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  /* Host Port State */
  hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

  /* Init PMA Address */
  (void)HAL_HCD_PMAReset(hhcd);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f003 f8ca 	bl	80042d2 <HAL_HCD_PMAReset>

  hhcd->State = HAL_HCD_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_HCD_HC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                                  uint8_t epnum, uint8_t dev_address,
                                  uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08d      	sub	sp, #52	@ 0x34
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	460b      	mov	r3, r1
 8001164:	70bb      	strb	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint8_t used_channel;
  uint8_t ep0_virtual_channel;

  __HAL_LOCK(hhcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3359 	ldrb.w	r3, [r3, #857]	@ 0x359
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_HCD_HC_Init+0x28>
 8001174:	2302      	movs	r3, #2
 8001176:	e377      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  if (ch_num > 16U)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b10      	cmp	r3, #16
 8001184:	d905      	bls.n	8001192 <HAL_HCD_HC_Init+0x42>
  {
    __HAL_UNLOCK(hhcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e36a      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
  }

  if (((epnum & 0xFU)== 0U) && ((hhcd->ep0_PmaAllocState & 0xF000U) != 0U))
 8001192:	78bb      	ldrb	r3, [r7, #2]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	2b00      	cmp	r3, #0
 800119a:	d164      	bne.n	8001266 <HAL_HCD_HC_Init+0x116>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 80011a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d05d      	beq.n	8001266 <HAL_HCD_HC_Init+0x116>
  {
    hhcd->hc[ch_num & 0xFU].pmaadress = hhcd->hc[0U].pmaadress;
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	8f10      	ldrh	r0, [r2, #56]	@ 0x38
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	3308      	adds	r3, #8
 80011c4:	4602      	mov	r2, r0
 80011c6:	801a      	strh	r2, [r3, #0]
    hhcd->hc[ch_num & 0xFU].pmaaddr0 = hhcd->hc[0U].pmaaddr0;
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	8f50      	ldrh	r0, [r2, #58]	@ 0x3a
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	440b      	add	r3, r1
 80011e0:	330a      	adds	r3, #10
 80011e2:	4602      	mov	r2, r0
 80011e4:	801a      	strh	r2, [r3, #0]
    hhcd->hc[ch_num & 0xFU].pmaaddr1 = hhcd->hc[0U].pmaaddr1;
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	f003 020f 	and.w	r2, r3, #15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8f98      	ldrh	r0, [r3, #60]	@ 0x3c
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	440b      	add	r3, r1
 80011fc:	333c      	adds	r3, #60	@ 0x3c
 80011fe:	4602      	mov	r2, r0
 8001200:	801a      	strh	r2, [r3, #0]

    hhcd->phy_chin_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	b29a      	uxth	r2, r3
                               ((uint16_t)ep_type + 1U) |
 800120e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001212:	b29b      	uxth	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b29b      	uxth	r3, r3
    hhcd->phy_chin_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 8001218:	4313      	orrs	r3, r2
 800121a:	b29a      	uxth	r2, r3
                               (((uint16_t)epnum & 0x0FU) << 8U);
 800121c:	78bb      	ldrb	r3, [r7, #2]
 800121e:	b29b      	uxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001228:	b29b      	uxth	r3, r3
                               ((uint16_t)ep_type + 1U) |
 800122a:	4313      	orrs	r3, r2
 800122c:	b29a      	uxth	r2, r3
    hhcd->phy_chin_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8a3 2318 	strh.w	r2, [r3, #792]	@ 0x318

    hhcd->phy_chout_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	b29a      	uxth	r2, r3
                                ((uint16_t)ep_type + 1U) |
 8001240:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001244:	b29b      	uxth	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b29b      	uxth	r3, r3
    hhcd->phy_chout_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 800124a:	4313      	orrs	r3, r2
 800124c:	b29a      	uxth	r2, r3
                                (((uint16_t)epnum & 0x0FU) << 8U);
 800124e:	78bb      	ldrb	r3, [r7, #2]
 8001250:	b29b      	uxth	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800125a:	b29b      	uxth	r3, r3
                                ((uint16_t)ep_type + 1U) |
 800125c:	4313      	orrs	r3, r2
 800125e:	b29a      	uxth	r2, r3
    hhcd->phy_chout_state[0U] = (((uint16_t)ch_num + 1U) << 4U) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8a3 2328 	strh.w	r2, [r3, #808]	@ 0x328
  }

  /* Check if the logical channel are already allocated */
  used_channel = HAL_HCD_Check_usedChannel(hhcd, ch_num);
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f002 fc77 	bl	8003b5e <HAL_HCD_Check_usedChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	77fb      	strb	r3, [r7, #31]

  /* Check if the channel is not already opened */
  if (used_channel == 0U)
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d127      	bne.n	80012ca <HAL_HCD_HC_Init+0x17a>
  {
    /* Allocate New Physical channel */
    hhcd->hc[ch_num & 0xFU].phy_ch_num = HAL_HCD_Get_FreePhyChannel(hhcd, ch_num, epnum, ep_type);
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f003 040f 	and.w	r4, r3, #15
 8001280:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001284:	78ba      	ldrb	r2, [r7, #2]
 8001286:	78f9      	ldrb	r1, [r7, #3]
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 fd06 	bl	8003c9a <HAL_HCD_Get_FreePhyChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	4619      	mov	r1, r3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4623      	mov	r3, r4
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4423      	add	r3, r4
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	3315      	adds	r3, #21
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]

    /* No free Channel available, return error */
    if (hhcd->hc[ch_num & 0xFU].phy_ch_num == HCD_FREE_CH_NOT_FOUND)
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	f003 020f 	and.w	r2, r3, #15
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	3315      	adds	r3, #21
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2bff      	cmp	r3, #255	@ 0xff
 80012bc:	d114      	bne.n	80012e8 <HAL_HCD_HC_Init+0x198>
    {
      __HAL_UNLOCK(hhcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e2ce      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
  }
  /* Channel already opened */
  else
  {
    /* Get Physical Channel number */
    hhcd->hc[ch_num & 0xFU].phy_ch_num = (used_channel & 0xF0U) >> 4U;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	f003 020f 	and.w	r2, r3, #15
 80012d0:	7ffb      	ldrb	r3, [r7, #31]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	440b      	add	r3, r1
 80012e2:	3315      	adds	r3, #21
 80012e4:	4602      	mov	r2, r0
 80012e6:	701a      	strb	r2, [r3, #0]
  }

  if ((epnum & 0x80U) != 0U)
 80012e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da0c      	bge.n	800130a <HAL_HCD_HC_Init+0x1ba>
  {
    hhcd->hc[ch_num & 0xFU].ch_dir = CH_IN_DIR;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	f003 020f 	and.w	r2, r3, #15
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3317      	adds	r3, #23
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e00b      	b.n	8001322 <HAL_HCD_HC_Init+0x1d2>
  }
  else
  {
    hhcd->hc[ch_num & 0xFU].ch_dir = CH_OUT_DIR;
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 020f 	and.w	r2, r3, #15
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	3317      	adds	r3, #23
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num & 0xFU].dev_addr   = dev_address;
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 020f 	and.w	r2, r3, #15
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	440b      	add	r3, r1
 8001334:	3314      	adds	r3, #20
 8001336:	787a      	ldrb	r2, [r7, #1]
 8001338:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].max_packet = mps;
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	f003 020f 	and.w	r2, r3, #15
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	440b      	add	r3, r1
 800134c:	331c      	adds	r3, #28
 800134e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001350:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].ep_type    = ep_type;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 020f 	and.w	r2, r3, #15
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	331b      	adds	r3, #27
 8001366:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800136a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].ep_num     = epnum & 0x7FU;
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	f003 020f 	and.w	r2, r3, #15
 8001372:	78bb      	ldrb	r3, [r7, #2]
 8001374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001378:	b2d8      	uxtb	r0, r3
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	440b      	add	r3, r1
 8001386:	3316      	adds	r3, #22
 8001388:	4602      	mov	r2, r0
 800138a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].speed      = speed;
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	f003 020f 	and.w	r2, r3, #15
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	3318      	adds	r3, #24
 80013a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80013a4:	701a      	strb	r2, [r3, #0]

  /* Check if the channel is not already opened */
  if (used_channel == 0U)
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 81a2 	bne.w	80016f2 <HAL_HCD_HC_Init+0x5a2>
  {
    if (((ep_type == EP_TYPE_ISOC) && (hhcd->Init.iso_singlebuffer_enable == 0U)) ||
 80013ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d103      	bne.n	80013be <HAL_HCD_HC_Init+0x26e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7c1b      	ldrb	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_HCD_HC_Init+0x282>
 80013be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	f040 809a 	bne.w	80014fc <HAL_HCD_HC_Init+0x3ac>
        ((ep_type == EP_TYPE_BULK) && (hhcd->Init.bulk_doublebuffer_enable == 1U)))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7bdb      	ldrb	r3, [r3, #15]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 8095 	bne.w	80014fc <HAL_HCD_HC_Init+0x3ac>
    {
      /* PMA Dynamic Allocation */
      status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_DBL_BUF, mps);
 80013d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80013d4:	78f9      	ldrb	r1, [r7, #3]
 80013d6:	2201      	movs	r2, #1
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f002 fec0 	bl	800415e <HAL_HCD_PMAlloc>
 80013de:	4603      	mov	r3, r0
 80013e0:	77bb      	strb	r3, [r7, #30]

      if (status == HAL_ERROR)
 80013e2:	7fbb      	ldrb	r3, [r7, #30]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_HCD_HC_Init+0x2a4>
      {
        __HAL_UNLOCK(hhcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e239      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
      }

      /* Clear Channel DTOG_TX */
      HCD_CLEAR_TX_DTOG(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 020f 	and.w	r2, r3, #15
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	3315      	adds	r3, #21
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4403      	add	r3, r0
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141e:	2b00      	cmp	r3, #0
 8001420:	d029      	beq.n	8001476 <HAL_HCD_HC_Init+0x326>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	f003 020f 	and.w	r2, r3, #15
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	3315      	adds	r3, #21
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4ba9      	ldr	r3, [pc, #676]	@ (80016ec <HAL_HCD_HC_Init+0x59c>)
 8001446:	4013      	ands	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f003 020f 	and.w	r2, r3, #15
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	440b      	add	r3, r1
 8001462:	3315      	adds	r3, #21
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	18c2      	adds	r2, r0, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001470:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001474:	6013      	str	r3, [r2, #0]

      /* Clear Channel DTOG RX */
      HCD_CLEAR_RX_DTOG(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 020f 	and.w	r2, r3, #15
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	3315      	adds	r3, #21
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4403      	add	r3, r0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8120 	beq.w	80016e6 <HAL_HCD_HC_Init+0x596>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	f003 020f 	and.w	r2, r3, #15
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	3315      	adds	r3, #21
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4403      	add	r3, r0
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b88      	ldr	r3, [pc, #544]	@ (80016ec <HAL_HCD_HC_Init+0x59c>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	3315      	adds	r3, #21
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	18c2      	adds	r2, r0, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e0f4      	b.n	80016e6 <HAL_HCD_HC_Init+0x596>

    }
    else
    {
      if (hhcd->hc[ch_num & 0xFU].ep_num != 0U)
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	f003 020f 	and.w	r2, r3, #15
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	440b      	add	r3, r1
 800150e:	3316      	adds	r3, #22
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d011      	beq.n	800153a <HAL_HCD_HC_Init+0x3ea>
      {
        status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_SNG_BUF, mps);
 8001516:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001518:	78f9      	ldrb	r1, [r7, #3]
 800151a:	2200      	movs	r2, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f002 fe1e 	bl	800415e <HAL_HCD_PMAlloc>
 8001522:	4603      	mov	r3, r0
 8001524:	77bb      	strb	r3, [r7, #30]

        if (status == HAL_ERROR)
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	2b01      	cmp	r3, #1
 800152a:	f040 80e2 	bne.w	80016f2 <HAL_HCD_HC_Init+0x5a2>
        {
          __HAL_UNLOCK(hhcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e196      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
        }
      }
      else
      {
        if (ch_num == 0U)
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d178      	bne.n	8001632 <HAL_HCD_HC_Init+0x4e2>
        {
          ep0_virtual_channel = (uint8_t)(hhcd->ep0_PmaAllocState & 0xFU);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	777b      	strb	r3, [r7, #29]

          if ((ep0_virtual_channel != 0U) && (((hhcd->ep0_PmaAllocState & 0xF0U) >> 4) == CH_IN_DIR))
 800154e:	7f7b      	ldrb	r3, [r7, #29]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d02c      	beq.n	80015ae <HAL_HCD_HC_Init+0x45e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	2b01      	cmp	r3, #1
 8001562:	d124      	bne.n	80015ae <HAL_HCD_HC_Init+0x45e>
          {
            if (hhcd->hc[ch_num & 0xFU].ch_dir == CH_OUT_DIR)
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 020f 	and.w	r2, r3, #15
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	440b      	add	r3, r1
 8001576:	3317      	adds	r3, #23
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d111      	bne.n	80015a2 <HAL_HCD_HC_Init+0x452>
            {
              status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_SNG_BUF, 64U);
 800157e:	78f9      	ldrb	r1, [r7, #3]
 8001580:	2340      	movs	r3, #64	@ 0x40
 8001582:	2200      	movs	r2, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f002 fdea 	bl	800415e <HAL_HCD_PMAlloc>
 800158a:	4603      	mov	r3, r0
 800158c:	77bb      	strb	r3, [r7, #30]

              if (status == HAL_ERROR)
 800158e:	7fbb      	ldrb	r3, [r7, #30]
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 80ad 	bne.w	80016f0 <HAL_HCD_HC_Init+0x5a0>
              {
                __HAL_UNLOCK(hhcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
                return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e162      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
              }
            }
            else
            {
              __HAL_UNLOCK(hhcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
              return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e15c      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
            }
          }
          else
          {
            /* This is a dual EP0 PMA allocation */
            hhcd->ep0_PmaAllocState |= (0x1U << 12);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 80015b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

            /* PMA Dynamic Allocation for EP0 OUT direction */
            hhcd->hc[ch_num & 0xFU].ch_dir = CH_OUT_DIR;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	f003 020f 	and.w	r2, r3, #15
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	440b      	add	r3, r1
 80015d0:	3317      	adds	r3, #23
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
            status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_SNG_BUF, 64U);
 80015d6:	78f9      	ldrb	r1, [r7, #3]
 80015d8:	2340      	movs	r3, #64	@ 0x40
 80015da:	2200      	movs	r2, #0
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f002 fdbe 	bl	800415e <HAL_HCD_PMAlloc>
 80015e2:	4603      	mov	r3, r0
 80015e4:	77bb      	strb	r3, [r7, #30]

            if (status == HAL_ERROR)
 80015e6:	7fbb      	ldrb	r3, [r7, #30]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_HCD_HC_Init+0x4a8>
            {
              __HAL_UNLOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
              return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e137      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
            }

            /* PMA Dynamic Allocation for EP0 IN direction */
            hhcd->hc[ch_num & 0xFU].ch_dir = CH_IN_DIR;
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 020f 	and.w	r2, r3, #15
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	440b      	add	r3, r1
 800160a:	3317      	adds	r3, #23
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
            status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_SNG_BUF, 64U);
 8001610:	78f9      	ldrb	r1, [r7, #3]
 8001612:	2340      	movs	r3, #64	@ 0x40
 8001614:	2200      	movs	r2, #0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f002 fda1 	bl	800415e <HAL_HCD_PMAlloc>
 800161c:	4603      	mov	r3, r0
 800161e:	77bb      	strb	r3, [r7, #30]

            if (status == HAL_ERROR)
 8001620:	7fbb      	ldrb	r3, [r7, #30]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d165      	bne.n	80016f2 <HAL_HCD_HC_Init+0x5a2>
            {
              __HAL_UNLOCK(hhcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
              return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e11a      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
            }
          }
        }
        else
        {
          if (((hhcd->ep0_PmaAllocState & 0xF00U) >> 8) == 1U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	2b01      	cmp	r3, #1
 8001640:	d140      	bne.n	80016c4 <HAL_HCD_HC_Init+0x574>
          {
            ep0_virtual_channel = (uint8_t)(hhcd->ep0_PmaAllocState & 0xFU);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	777b      	strb	r3, [r7, #29]

            if (((hhcd->ep0_PmaAllocState & 0xF0U) >> 4) == CH_IN_DIR)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	2b01      	cmp	r3, #1
 800165e:	d117      	bne.n	8001690 <HAL_HCD_HC_Init+0x540>
            {
              hhcd->hc[ch_num & 0xFU].pmaaddr1 = hhcd->hc[ep0_virtual_channel & 0xFU].pmaaddr1;
 8001660:	7f7b      	ldrb	r3, [r7, #29]
 8001662:	f003 010f 	and.w	r1, r3, #15
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 020f 	and.w	r2, r3, #15
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	440b      	add	r3, r1
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4403      	add	r3, r0
 8001678:	333c      	adds	r3, #60	@ 0x3c
 800167a:	8818      	ldrh	r0, [r3, #0]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	440b      	add	r3, r1
 8001688:	333c      	adds	r3, #60	@ 0x3c
 800168a:	4602      	mov	r2, r0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	e030      	b.n	80016f2 <HAL_HCD_HC_Init+0x5a2>
            }
            else
            {
              hhcd->hc[ch_num & 0xFU].pmaaddr0 = hhcd->hc[ep0_virtual_channel & 0xFU].pmaaddr0;
 8001690:	7f7b      	ldrb	r3, [r7, #29]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	f002 000f 	and.w	r0, r2, #15
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	330a      	adds	r3, #10
 80016ac:	881c      	ldrh	r4, [r3, #0]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	1c42      	adds	r2, r0, #1
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	440b      	add	r3, r1
 80016bc:	330a      	adds	r3, #10
 80016be:	4622      	mov	r2, r4
 80016c0:	801a      	strh	r2, [r3, #0]
 80016c2:	e016      	b.n	80016f2 <HAL_HCD_HC_Init+0x5a2>
            }
          }
          else
          {
            status = HAL_HCD_PMAlloc(hhcd, ch_num, HCD_SNG_BUF, 64U);
 80016c4:	78f9      	ldrb	r1, [r7, #3]
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	2200      	movs	r2, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f002 fd47 	bl	800415e <HAL_HCD_PMAlloc>
 80016d0:	4603      	mov	r3, r0
 80016d2:	77bb      	strb	r3, [r7, #30]

            if (status == HAL_ERROR)
 80016d4:	7fbb      	ldrb	r3, [r7, #30]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10b      	bne.n	80016f2 <HAL_HCD_HC_Init+0x5a2>
            {
              __HAL_UNLOCK(hhcd);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
              return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c0      	b.n	8001868 <HAL_HCD_HC_Init+0x718>
      HCD_CLEAR_RX_DTOG(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num);
 80016e6:	bf00      	nop
 80016e8:	e003      	b.n	80016f2 <HAL_HCD_HC_Init+0x5a2>
 80016ea:	bf00      	nop
 80016ec:	07ff8f8f 	.word	0x07ff8f8f
            if (hhcd->hc[ch_num & 0xFU].ch_dir == CH_OUT_DIR)
 80016f0:	bf00      	nop
        }
      }
    }
  }

  if ((epnum & 0x80U) != 0U)
 80016f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da31      	bge.n	800175e <HAL_HCD_HC_Init+0x60e>
  {
    hhcd->hc[ch_num & 0xFU].ch_dir = CH_IN_DIR;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	f003 020f 	and.w	r2, r3, #15
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	3317      	adds	r3, #23
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num & 0xFU].ep_num == 0U)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	440b      	add	r3, r1
 8001724:	3316      	adds	r3, #22
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d14a      	bne.n	80017c2 <HAL_HCD_HC_Init+0x672>
    {
      hhcd->hc[ch_num & 0xFU].pmaadress = hhcd->hc[ch_num & 0xFU].pmaaddr1;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 020f 	and.w	r2, r3, #15
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 000f 	and.w	r0, r3, #15
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	333c      	adds	r3, #60	@ 0x3c
 8001746:	881c      	ldrh	r4, [r3, #0]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	1c42      	adds	r2, r0, #1
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	440b      	add	r3, r1
 8001756:	3308      	adds	r3, #8
 8001758:	4622      	mov	r2, r4
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	e031      	b.n	80017c2 <HAL_HCD_HC_Init+0x672>
    }
  }
  else
  {
    hhcd->hc[ch_num & 0xFU].ch_dir = CH_OUT_DIR;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 020f 	and.w	r2, r3, #15
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	440b      	add	r3, r1
 8001770:	3317      	adds	r3, #23
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num & 0xFU].ep_num == 0U)
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	440b      	add	r3, r1
 8001788:	3316      	adds	r3, #22
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d118      	bne.n	80017c2 <HAL_HCD_HC_Init+0x672>
    {
      hhcd->hc[ch_num & 0xFU].pmaadress = hhcd->hc[ch_num & 0xFU].pmaaddr0;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	f002 000f 	and.w	r0, r2, #15
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	440b      	add	r3, r1
 80017aa:	330a      	adds	r3, #10
 80017ac:	881c      	ldrh	r4, [r3, #0]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	1c42      	adds	r2, r0, #1
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	3308      	adds	r3, #8
 80017be:	4622      	mov	r2, r4
 80017c0:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Init the USB Channel CHEPRx */
  status =  USB_HC_Init(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 020f 	and.w	r2, r3, #15
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	440b      	add	r3, r1
 80017d8:	3315      	adds	r3, #21
 80017da:	7819      	ldrb	r1, [r3, #0]
 80017dc:	787c      	ldrb	r4, [r7, #1]
 80017de:	78ba      	ldrb	r2, [r7, #2]
 80017e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f004 fdeb 	bl	80063cc <USB_HC_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	77bb      	strb	r3, [r7, #30]
                        epnum, dev_address, speed, ep_type, mps);

  /* check single buffer for isochronous channel */
  if (ep_type == EP_TYPE_ISOC)
 80017fa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d114      	bne.n	800182c <HAL_HCD_HC_Init+0x6dc>
  {
    if (hhcd->Init.iso_singlebuffer_enable == 1U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7c1b      	ldrb	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d110      	bne.n	800182c <HAL_HCD_HC_Init+0x6dc>
    {
      (void)USB_HC_DoubleBuffer(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	3315      	adds	r3, #21
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2204      	movs	r2, #4
 8001826:	4619      	mov	r1, r3
 8001828:	f004 fd9d 	bl	8006366 <USB_HC_DoubleBuffer>
                                USB_DRD_ISOC_DBUFF_DISABLE);
    }
  }

  /* Bulk double buffer check */
  if (ep_type == EP_TYPE_BULK)
 800182c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001830:	2b02      	cmp	r3, #2
 8001832:	d114      	bne.n	800185e <HAL_HCD_HC_Init+0x70e>
  {
    if (hhcd->Init.bulk_doublebuffer_enable == 1U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7bdb      	ldrb	r3, [r3, #15]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d110      	bne.n	800185e <HAL_HCD_HC_Init+0x70e>
    {
      (void)USB_HC_DoubleBuffer(hhcd->Instance, hhcd->hc[ch_num & 0xFU].phy_ch_num,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	f003 020f 	and.w	r2, r3, #15
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	440b      	add	r3, r1
 8001852:	3315      	adds	r3, #21
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	4619      	mov	r1, r3
 800185a:	f004 fd84 	bl	8006366 <USB_HC_DoubleBuffer>
                                USB_DRD_BULK_DBUFF_ENBALE);
    }
  }

  __HAL_UNLOCK(hhcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  return status;
 8001866:	7fbb      	ldrb	r3, [r7, #30]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	@ 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3359 	ldrb.w	r3, [r3, #857]	@ 0x359
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_HCD_HC_Halt+0x1e>
 800188a:	2302      	movs	r3, #2
 800188c:	e036      	b.n	80018fc <HAL_HCD_HC_Halt+0x8c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
  if (hhcd->hc[ch_num & 0xFU].ch_dir == CH_IN_DIR)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	f003 020f 	and.w	r2, r3, #15
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	440b      	add	r3, r1
 80018a8:	3317      	adds	r3, #23
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d110      	bne.n	80018d2 <HAL_HCD_HC_Halt+0x62>
  {
    (void)USB_HC_IN_Halt(hhcd->Instance, (uint8_t) hhcd->hc[ch_num & 0xFU].phy_ch_num);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 020f 	and.w	r2, r3, #15
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	440b      	add	r3, r1
 80018c6:	3315      	adds	r3, #21
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f005 fab6 	bl	8006e3c <USB_HC_IN_Halt>
 80018d0:	e00f      	b.n	80018f2 <HAL_HCD_HC_Halt+0x82>
  }
  else
  {
    (void)USB_HC_OUT_Halt(hhcd->Instance, (uint8_t) hhcd->hc[ch_num & 0xFU].phy_ch_num);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 020f 	and.w	r2, r3, #15
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	440b      	add	r3, r1
 80018e8:	3315      	adds	r3, #21
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f005 fac7 	bl	8006e80 <USB_HC_OUT_Halt>
  }
  __HAL_UNLOCK(hhcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  return status;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_HCD_SuspendCallback>:
  the HAL_HCD_MspDeInit could be implemented in the user file
  */
}

__weak void HAL_HCD_SuspendCallback(HCD_HandleTypeDef *hhcd)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_HCD_SuspendCallback could be implemented in the user file
  */

}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_HCD_ResumeCallback>:

__weak void HAL_HCD_ResumeCallback(HCD_HandleTypeDef *hhcd)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_HCD_ResumeCallback could be implemented in the user file
  */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_HCD_HC_SubmitRequest>:
  */
HAL_StatusTypeDef HAL_HCD_HC_SubmitRequest(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                                           uint8_t direction, uint8_t ep_type,
                                           uint8_t token, uint8_t *pbuff,
                                           uint16_t length, uint8_t do_ping)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	70fb      	strb	r3, [r7, #3]
 800193e:	460b      	mov	r3, r1
 8001940:	70bb      	strb	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  if (token == 0U)
 8001946:	7c3b      	ldrb	r3, [r7, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10c      	bne.n	8001966 <HAL_HCD_HC_SubmitRequest+0x3a>
  {
    hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_SETUP;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 020f 	and.w	r2, r3, #15
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	440b      	add	r3, r1
 800195e:	331e      	adds	r3, #30
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e00b      	b.n	800197e <HAL_HCD_HC_SubmitRequest+0x52>
  }
  else
  {
    hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f003 020f 	and.w	r2, r3, #15
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	440b      	add	r3, r1
 8001978:	331e      	adds	r3, #30
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800197e:	787b      	ldrb	r3, [r7, #1]
 8001980:	2b03      	cmp	r3, #3
 8001982:	f200 80f8 	bhi.w	8001b76 <HAL_HCD_HC_SubmitRequest+0x24a>
 8001986:	a201      	add	r2, pc, #4	@ (adr r2, 800198c <HAL_HCD_HC_SubmitRequest+0x60>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	08001b5d 	.word	0x08001b5d
 8001994:	08001a19 	.word	0x08001a19
 8001998:	08001abb 	.word	0x08001abb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /* send data */
 800199c:	7c3b      	ldrb	r3, [r7, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 80eb 	bne.w	8001b7a <HAL_HCD_HC_SubmitRequest+0x24e>
 80019a4:	78bb      	ldrb	r3, [r7, #2]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80e7 	bne.w	8001b7a <HAL_HCD_HC_SubmitRequest+0x24e>
      {
        if (length == 0U)
 80019ac:	8b3b      	ldrh	r3, [r7, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x9e>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num & 0xFU].toggle_out = 1U;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 020f 	and.w	r2, r3, #15
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	440b      	add	r3, r1
 80019c4:	3331      	adds	r3, #49	@ 0x31
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num & 0xFU].toggle_out == 0U)
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 020f 	and.w	r2, r3, #15
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	440b      	add	r3, r1
 80019dc:	3331      	adds	r3, #49	@ 0x31
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10c      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0xd2>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	f003 020f 	and.w	r2, r3, #15
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	331e      	adds	r3, #30
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fc:	e0bd      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x24e>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 020f 	and.w	r2, r3, #15
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	440b      	add	r3, r1
 8001a10:	331e      	adds	r3, #30
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e0b0      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x24e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a18:	78bb      	ldrb	r3, [r7, #2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d126      	bne.n	8001a6c <HAL_HCD_HC_SubmitRequest+0x140>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num & 0xFU].toggle_out == 0U)
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 020f 	and.w	r2, r3, #15
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	440b      	add	r3, r1
 8001a30:	3331      	adds	r3, #49	@ 0x31
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_HCD_HC_SubmitRequest+0x126>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 020f 	and.w	r2, r3, #15
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	331e      	adds	r3, #30
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a50:	e094      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	331e      	adds	r3, #30
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
      break;
 8001a6a:	e087      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
        if (hhcd->hc[ch_num & 0xFU].toggle_in == 0U)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3330      	adds	r3, #48	@ 0x30
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0x174>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	331e      	adds	r3, #30
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	e06d      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	440b      	add	r3, r1
 8001ab2:	331e      	adds	r3, #30
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	701a      	strb	r2, [r3, #0]
      break;
 8001ab8:	e060      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>

    case EP_TYPE_INTR:
      if (direction == 0U)
 8001aba:	78bb      	ldrb	r3, [r7, #2]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d126      	bne.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num & 0xFU].toggle_out == 0U)
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	f003 020f 	and.w	r2, r3, #15
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3331      	adds	r3, #49	@ 0x31
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_HCD_HC_SubmitRequest+0x1c8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	440b      	add	r3, r1
 8001aec:	331e      	adds	r3, #30
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001af2:	e043      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	440b      	add	r3, r1
 8001b06:	331e      	adds	r3, #30
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
      break;
 8001b0c:	e036      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
        if (hhcd->hc[ch_num & 0xFU].toggle_in == 0U)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	3330      	adds	r3, #48	@ 0x30
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	331e      	adds	r3, #30
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e01c      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
          hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA1;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	331e      	adds	r3, #30
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
      break;
 8001b5a:	e00f      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num & 0xFU].data_pid = HC_PID_DATA0;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	f003 020f 	and.w	r2, r3, #15
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	331e      	adds	r3, #30
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>

    default:
      break;
 8001b76:	bf00      	nop
 8001b78:	e000      	b.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x250>
      break;
 8001b7a:	bf00      	nop
  }

  hhcd->hc[ch_num & 0xFU].xfer_buff = pbuff;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 020f 	and.w	r2, r3, #15
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3320      	adds	r3, #32
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].xfer_len = length;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	8b39      	ldrh	r1, [r7, #24]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4403      	add	r3, r0
 8001ba8:	3324      	adds	r3, #36	@ 0x24
 8001baa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num & 0xFU].xfer_len_db = length;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	8b39      	ldrh	r1, [r7, #24]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4403      	add	r3, r0
 8001bc0:	3328      	adds	r3, #40	@ 0x28
 8001bc2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num & 0xFU].urb_state = URB_IDLE;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333f      	adds	r3, #63	@ 0x3f
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].xfer_count = 0U;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	440b      	add	r3, r1
 8001bee:	332c      	adds	r3, #44	@ 0x2c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].state = HC_IDLE;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 020f 	and.w	r2, r3, #15
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3340      	adds	r3, #64	@ 0x40
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num & 0xFU]);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	3310      	adds	r3, #16
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	f004 fc38 	bl	800649c <USB_HC_StartXfer>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop

08001c38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint8_t phy_chnum;
  uint8_t ch_dir;
  uint32_t wIstr = USB_ReadInterrupts(hhcd->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fa58 	bl	80060fa <USB_ReadInterrupts>
 8001c4a:	60f8      	str	r0, [r7, #12]

  /* Port Change Detected (Connection/Disconnection) */
  if ((wIstr & USB_ISTR_DCON) == USB_ISTR_DCON)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_HCD_IRQHandler+0x36>
  {
    /* Clear Flag */
    __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_DCON);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call Port IRQHandler */
    HCD_Port_IRQHandler(hhcd);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f001 ff1c 	bl	8003aa4 <HCD_Port_IRQHandler>

    return;
 8001c6c:	e0a2      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* Correct Transaction Detected -------*/
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01c      	beq.n	8001cb2 <HAL_HCD_IRQHandler+0x7a>
  {
    /* Get Physical channel */
    phy_chnum = (uint8_t)__HAL_HCD_GET_CHNUM(hhcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	72fb      	strb	r3, [r7, #11]

    /* Get channel direction */
    ch_dir = (uint8_t)__HAL_HCD_GET_CHDIR(hhcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	72bb      	strb	r3, [r7, #10]

    if (ch_dir == CH_OUT_DIR)
 8001c94:	7abb      	ldrb	r3, [r7, #10]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x6e>
    {
      /* Call Channel_OUT_IRQ() */
      HCD_HC_OUT_IRQHandler(hhcd, phy_chnum);
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 fb8a 	bl	80033b8 <HCD_HC_OUT_IRQHandler>
    {
      /* Call Channel_IN_IRQ() */
      HCD_HC_IN_IRQHandler(hhcd, phy_chnum);
    }

    return;
 8001ca4:	e086      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
      HCD_HC_IN_IRQHandler(hhcd, phy_chnum);
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f001 f874 	bl	8002d98 <HCD_HC_IN_IRQHandler>
    return;
 8001cb0:	e080      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* Wakeup Flag Detected */
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d025      	beq.n	8001d08 <HAL_HCD_IRQHandler+0xd0>
  {
    if (hhcd->HostState == HCD_HCD_STATE_SUSPEND)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d117      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0xbe>
    {
      /* Set The L2Resume bit */
      hhcd->Instance->CNTR |= USB_CNTR_L2RES;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0210 	orr.w	r2, r2, #16
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Clear the wake-up flag */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_WKUP);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ce4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the USB Software state machine */
      HAL_HCD_ResumeCallback(hhcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe16 	bl	8001918 <HAL_HCD_ResumeCallback>
      hhcd->HostState = HCD_HCD_STATE_RESUME;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2205      	movs	r2, #5
 8001cf0:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358
    {
      /* Clear the wake-up flag */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_WKUP);
    }

    return;
 8001cf4:	e05e      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_WKUP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d04:	645a      	str	r2, [r3, #68]	@ 0x44
    return;
 8001d06:	e055      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* Global Error Flag Detected */
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_HCD_IRQHandler+0xec>
  {
    __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_ERR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d20:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8001d22:	e047      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* PMA Overrun detected */
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_HCD_IRQHandler+0x108>
  {
    __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_PMAOVR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8001d3e:	e039      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* Suspend Detected */
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_HCD_IRQHandler+0x142>
  {
    /* Set HAL State to Suspend */
    hhcd->HostState = HCD_HCD_STATE_SUSPEND;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

    /* Force low-power mode in the macrocell */
    hhcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0208 	orr.w	r2, r2, #8
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_SUSP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Call suspend Callback */
    HAL_HCD_SuspendCallback(hhcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fdc6 	bl	8001904 <HAL_HCD_SuspendCallback>

    return;
 8001d78:	e01c      	b.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  }

  /* Start Of Frame Detected */
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d017      	beq.n	8001db4 <HAL_HCD_IRQHandler+0x17c>
  {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->SOFCallback(hhcd);
#else
    HAL_HCD_SOF_Callback(hhcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 fd76 	bl	8007876 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

    __HAL_HCD_CLEAR_FLAG(hhcd, USB_ISTR_SOF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* when first SOF is detected after USB_RESET is asserted */
    if (hhcd->HostState == HCD_HCD_STATE_RESETED)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d106      	bne.n	8001db2 <HAL_HCD_IRQHandler+0x17a>
    {
      /* HAL State */
      hhcd->HostState = HCD_HCD_STATE_RUN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f005 fd9a 	bl	80078e6 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }

    return;
 8001db2:	bf00      	nop
  }
}
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = HCD_PDWN_EXIT_CNT;
 8001dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3359 	ldrb.w	r3, [r3, #857]	@ 0x359
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_HCD_Start+0x1c>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e01f      	b.n	8001e16 <HAL_HCD_Start+0x5c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  /* Remove PowerDown */
  hhcd->Instance->CNTR &= ~USB_CNTR_PDWN;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0202 	bic.w	r2, r2, #2
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Few cycles to ensure exit from powerdown */
  while (count > 0U)
 8001dee:	e002      	b.n	8001df6 <HAL_HCD_Start+0x3c>
  {
    count--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f9      	bne.n	8001df0 <HAL_HCD_Start+0x36>
  }

  /* Clear Reset */
  hhcd->Instance->CNTR &= ~USB_CNTR_USBRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  __HAL_UNLOCK(hhcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_HCD_Stop>:
  * @brief  Stop the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3359 	ldrb.w	r3, [r3, #857]	@ 0x359
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_HCD_Stop+0x16>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e017      	b.n	8001e68 <HAL_HCD_Stop+0x46>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
  /*Stop the Host IP: setting powerdown  */
  (void)USB_StopHost(hhcd->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 f83d 	bl	8006ec4 <USB_StopHost>

  /* clear all allocated virtual channel */
  HAL_HCD_ClearPhyChannel(hhcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f002 f889 	bl	8003f62 <HAL_HCD_ClearPhyChannel>

  /* Reset the PMA current pointer */
  (void)HAL_HCD_PMAReset(hhcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f002 fa3e 	bl	80042d2 <HAL_HCD_PMAReset>

  /* reset Ep0 Pma allocation state */
  hhcd->ep0_PmaAllocState = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

  __HAL_UNLOCK(hhcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3359 	ldrb.w	r3, [r3, #857]	@ 0x359
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_HCD_ResetPort+0x16>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e016      	b.n	8001eb4 <HAL_HCD_ResetPort+0x44>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  /* Reset the USB Port by inserting an SE0 on the bus */
  (void)USB_ResetPort(hhcd->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fa2b 	bl	80062ee <USB_ResetPort>

  if (hhcd->HostState == HCD_HCD_STATE_CONNECTED)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d103      	bne.n	8001eaa <HAL_HCD_ResetPort+0x3a>
  {
    hhcd->HostState = HCD_HCD_STATE_RESETED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358
  }
  __HAL_UNLOCK(hhcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2359 	strb.w	r2, [r3, #857]	@ 0x359

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	333f      	adds	r3, #63	@ 0x3f
 8001ed8:	781b      	ldrb	r3, [r3, #0]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	440b      	add	r3, r1
 8001f00:	332c      	adds	r3, #44	@ 0x2c
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 fa14 	bl	800634a <USB_GetCurrentFrame>
 8001f22:	4603      	mov	r3, r0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_HCD_GetCurrentSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 f9f3 	bl	8006324 <USB_GetHostSpeed>
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HCD_HC_OUT_BulkDb>:
  * @param  regvalue contain Snapshot of the EPCHn register when ISR is detected
  * @retval none
  */
static void HCD_HC_OUT_BulkDb(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                              uint8_t phy_chnum, uint32_t regvalue)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b095      	sub	sp, #84	@ 0x54
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	4613      	mov	r3, r2
 8001f58:	72bb      	strb	r3, [r7, #10]
  uint16_t data_xfr;
  uint16_t len;

  /* Send Buffer0 */
  if ((regvalue & USB_CH_DTOG_TX) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8208 	beq.w	8002376 <HCD_HC_OUT_BulkDb+0x42e>
  {
    data_xfr = (uint16_t)(((USB_DRD_PMA_BUFF + phy_chnum)->TXBD & 0x03FF0000U) >> 16U);
 8001f66:	7abb      	ldrb	r3, [r7, #10]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7c:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if (hhcd->hc[ch_num & 0xFU].xfer_len >= data_xfr)
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	3324      	adds	r3, #36	@ 0x24
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d318      	bcc.n	8001fcc <HCD_HC_OUT_BulkDb+0x84>
    {
      hhcd->hc[ch_num & 0xFU].xfer_len -= data_xfr;
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	440b      	add	r3, r1
 8001fac:	3324      	adds	r3, #36	@ 0x24
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001fb2:	7afa      	ldrb	r2, [r7, #11]
 8001fb4:	f002 020f 	and.w	r2, r2, #15
 8001fb8:	1ac9      	subs	r1, r1, r3
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3324      	adds	r3, #36	@ 0x24
 8001fc8:	6019      	str	r1, [r3, #0]
 8001fca:	e00b      	b.n	8001fe4 <HCD_HC_OUT_BulkDb+0x9c>
    }
    else
    {
      hhcd->hc[ch_num & 0xFU].xfer_len = 0U;
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	440b      	add	r3, r1
 8001fde:	3324      	adds	r3, #36	@ 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    }

    /* Transfer no yet finished only one packet of mps is transferred and ACKed from device */
    if (hhcd->hc[ch_num & 0xFU].xfer_len != 0U)
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3324      	adds	r3, #36	@ 0x24
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 815a 	beq.w	80022b4 <HCD_HC_OUT_BulkDb+0x36c>
    {
      /* manage multiple Xfer */
      hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	440b      	add	r3, r1
 8002012:	332c      	adds	r3, #44	@ 0x2c
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002018:	7afa      	ldrb	r2, [r7, #11]
 800201a:	f002 020f 	and.w	r2, r2, #15
 800201e:	4419      	add	r1, r3
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4403      	add	r3, r0
 800202c:	332c      	adds	r3, #44	@ 0x2c
 800202e:	6019      	str	r1, [r3, #0]

      /* check if we need to free user buffer */
      if ((regvalue & USB_CH_DTOG_RX) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d05b      	beq.n	80020f2 <HCD_HC_OUT_BulkDb+0x1aa>
      {
        /* Toggle SwBuff */
        HCD_CLEAR_TX_DTOG(hhcd->Instance, phy_chnum);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	7abb      	ldrb	r3, [r7, #10]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
 800204a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HCD_HC_OUT_BulkDb+0x138>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	7abb      	ldrb	r3, [r7, #10]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b92      	ldr	r3, [pc, #584]	@ (80022ac <HCD_HC_OUT_BulkDb+0x364>)
 8002064:	4013      	ands	r3, r2
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	7abb      	ldrb	r3, [r7, #10]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800207e:	6013      	str	r3, [r2, #0]
        HCD_CLEAR_RX_DTOG(hhcd->Instance, phy_chnum);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	7abb      	ldrb	r3, [r7, #10]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d015      	beq.n	80020c6 <HCD_HC_OUT_BulkDb+0x17e>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	7abb      	ldrb	r3, [r7, #10]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <HCD_HC_OUT_BulkDb+0x364>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	7abb      	ldrb	r3, [r7, #10]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c4:	6013      	str	r3, [r2, #0]
        HCD_TX_DTOG(hhcd->Instance, phy_chnum);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	7abb      	ldrb	r3, [r7, #10]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HCD_HC_OUT_BulkDb+0x364>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020f0:	6013      	str	r3, [r2, #0]
      }

      /* hhcd->hc[ch_num&0xFU].xfer_len_db==0 ==> when all data are written in the PMA to yet transferred */
      if (hhcd->hc[ch_num & 0xFU].xfer_len_db > 0U) /* Still data to fill in the buffer */
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	440b      	add	r3, r1
 8002104:	3328      	adds	r3, #40	@ 0x28
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80af 	beq.w	800226c <HCD_HC_OUT_BulkDb+0x324>
      {
        hhcd->hc[ch_num & 0xFU].xfer_buff += data_xfr;
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	68f9      	ldr	r1, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	440b      	add	r3, r1
 8002120:	3320      	adds	r3, #32
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002126:	7afa      	ldrb	r2, [r7, #11]
 8002128:	f002 020f 	and.w	r2, r2, #15
 800212c:	4419      	add	r1, r3
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4403      	add	r3, r0
 800213a:	3320      	adds	r3, #32
 800213c:	6019      	str	r1, [r3, #0]

        /* calculate len of new buffer to fill */
        if (hhcd->hc[ch_num & 0xFU].xfer_len_db > hhcd->hc[ch_num & 0xFU].max_packet)
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	440b      	add	r3, r1
 8002150:	3328      	adds	r3, #40	@ 0x28
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	f003 020f 	and.w	r2, r3, #15
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4403      	add	r3, r0
 8002166:	331c      	adds	r3, #28
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	4299      	cmp	r1, r3
 800216c:	d926      	bls.n	80021bc <HCD_HC_OUT_BulkDb+0x274>
        {
          len = (uint16_t)hhcd->hc[ch_num & 0xFU].max_packet;
 800216e:	7afb      	ldrb	r3, [r7, #11]
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	440b      	add	r3, r1
 8002180:	331c      	adds	r3, #28
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          hhcd->hc[ch_num & 0xFU].xfer_len_db -= len;
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	3328      	adds	r3, #40	@ 0x28
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021a2:	7afa      	ldrb	r2, [r7, #11]
 80021a4:	f002 020f 	and.w	r2, r2, #15
 80021a8:	1ac9      	subs	r1, r1, r3
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4403      	add	r3, r0
 80021b6:	3328      	adds	r3, #40	@ 0x28
 80021b8:	6019      	str	r1, [r3, #0]
 80021ba:	e018      	b.n	80021ee <HCD_HC_OUT_BulkDb+0x2a6>
        }
        else
        {
          len = (uint16_t)hhcd->hc[ch_num & 0xFU].xfer_len_db;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 020f 	and.w	r2, r3, #15
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	3328      	adds	r3, #40	@ 0x28
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          hhcd->hc[ch_num & 0xFU].xfer_len_db = 0U; /* end of fill buffer */
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	440b      	add	r3, r1
 80021e8:	3328      	adds	r3, #40	@ 0x28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
        }

        /* Write remaining data to Buffer0 */
        HCD_SET_CH_DBUF0_CNT(hhcd->Instance, phy_chnum, 1U, (uint16_t)len);
 80021ee:	7abb      	ldrb	r3, [r7, #10]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	7abb      	ldrb	r3, [r7, #10]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002208:	b292      	uxth	r2, r2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	7abb      	ldrb	r3, [r7, #10]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002214:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800221e:	041a      	lsls	r2, r3, #16
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002228:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
        USB_WritePMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	f003 020f 	and.w	r2, r3, #15
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	440b      	add	r3, r1
 8002246:	3320      	adds	r3, #32
 8002248:	681c      	ldr	r4, [r3, #0]
                     hhcd->hc[ch_num & 0xFU].pmaaddr0, (uint16_t)len);
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 030f 	and.w	r3, r3, #15
        USB_WritePMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002250:	68f9      	ldr	r1, [r7, #12]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	440b      	add	r3, r1
 800225e:	330a      	adds	r3, #10
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002266:	4621      	mov	r1, r4
 8002268:	f003 ff55 	bl	8006116 <USB_WritePMA>
      }
      /* start a new transfer */
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_VALID);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	7abb      	ldrb	r3, [r7, #10]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <HCD_HC_OUT_BulkDb+0x368>)
 800227c:	4013      	ands	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002282:	f083 0310 	eor.w	r3, r3, #16
 8002286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800228a:	f083 0320 	eor.w	r3, r3, #32
 800228e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	7abb      	ldrb	r3, [r7, #10]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800229e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a6:	6013      	str	r3, [r2, #0]

      /* Close the channel */
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_DIS);
    }
  }
}
 80022a8:	e25e      	b.n	8002768 <HCD_HC_OUT_BulkDb+0x820>
 80022aa:	bf00      	nop
 80022ac:	07ff8f8f 	.word	0x07ff8f8f
 80022b0:	07ff8fbf 	.word	0x07ff8fbf
      hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	440b      	add	r3, r1
 80022c6:	332c      	adds	r3, #44	@ 0x2c
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80022cc:	7afa      	ldrb	r2, [r7, #11]
 80022ce:	f002 020f 	and.w	r2, r2, #15
 80022d2:	4419      	add	r1, r3
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4403      	add	r3, r0
 80022e0:	332c      	adds	r3, #44	@ 0x2c
 80022e2:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num & 0xFU].state = HC_XFRC;
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	f003 020f 	and.w	r2, r3, #15
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	440b      	add	r3, r1
 80022f6:	3340      	adds	r3, #64	@ 0x40
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num & 0xFU].urb_state  = URB_DONE;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	440b      	add	r3, r1
 800230e:	333f      	adds	r3, #63	@ 0x3f
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num & 0xFU].toggle_out ^= 1U;
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	440b      	add	r3, r1
 8002326:	3331      	adds	r3, #49	@ 0x31
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	7afa      	ldrb	r2, [r7, #11]
 800232c:	f002 020f 	and.w	r2, r2, #15
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2d8      	uxtb	r0, r3
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	440b      	add	r3, r1
 8002342:	3331      	adds	r3, #49	@ 0x31
 8002344:	4602      	mov	r2, r0
 8002346:	701a      	strb	r2, [r3, #0]
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_DIS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b97      	ldr	r3, [pc, #604]	@ (80025b4 <HCD_HC_OUT_BulkDb+0x66c>)
 8002358:	4013      	ands	r3, r2
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	7abb      	ldrb	r3, [r7, #10]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	e1f8      	b.n	8002768 <HCD_HC_OUT_BulkDb+0x820>
    data_xfr = (uint16_t)(((USB_DRD_PMA_BUFF + phy_chnum)->RXBD & 0x03FF0000U) >> 16U);
 8002376:	7abb      	ldrb	r3, [r7, #10]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800237e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	b29b      	uxth	r3, r3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (hhcd->hc[ch_num & 0xFU].xfer_len >= data_xfr) /* updated */
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	440b      	add	r3, r1
 80023a0:	3324      	adds	r3, #36	@ 0x24
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d317      	bcc.n	80023da <HCD_HC_OUT_BulkDb+0x492>
      hhcd->hc[ch_num & 0xFU].xfer_len -= data_xfr;
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 020f 	and.w	r2, r3, #15
 80023b0:	68f9      	ldr	r1, [r7, #12]
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	440b      	add	r3, r1
 80023bc:	3324      	adds	r3, #36	@ 0x24
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80023c2:	7afa      	ldrb	r2, [r7, #11]
 80023c4:	f002 020f 	and.w	r2, r2, #15
 80023c8:	1ac9      	subs	r1, r1, r3
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4403      	add	r3, r0
 80023d6:	3324      	adds	r3, #36	@ 0x24
 80023d8:	6019      	str	r1, [r3, #0]
    if (hhcd->hc[ch_num & 0xFU].xfer_len != 0U)
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	440b      	add	r3, r1
 80023ec:	3324      	adds	r3, #36	@ 0x24
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8159 	beq.w	80026a8 <HCD_HC_OUT_BulkDb+0x760>
      hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	f003 020f 	and.w	r2, r3, #15
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	440b      	add	r3, r1
 8002408:	332c      	adds	r3, #44	@ 0x2c
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800240e:	7afa      	ldrb	r2, [r7, #11]
 8002410:	f002 020f 	and.w	r2, r2, #15
 8002414:	4419      	add	r1, r3
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4403      	add	r3, r0
 8002422:	332c      	adds	r3, #44	@ 0x2c
 8002424:	6019      	str	r1, [r3, #0]
      if ((regvalue & USB_CH_DTOG_RX) == 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d15b      	bne.n	80024e8 <HCD_HC_OUT_BulkDb+0x5a0>
        HCD_CLEAR_TX_DTOG(hhcd->Instance, phy_chnum);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	7abb      	ldrb	r3, [r7, #10]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HCD_HC_OUT_BulkDb+0x52e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	7abb      	ldrb	r3, [r7, #10]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b57      	ldr	r3, [pc, #348]	@ (80025b8 <HCD_HC_OUT_BulkDb+0x670>)
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	7abb      	ldrb	r3, [r7, #10]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002470:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002474:	6013      	str	r3, [r2, #0]
        HCD_CLEAR_RX_DTOG(hhcd->Instance, phy_chnum);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	7abb      	ldrb	r3, [r7, #10]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d015      	beq.n	80024bc <HCD_HC_OUT_BulkDb+0x574>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	7abb      	ldrb	r3, [r7, #10]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <HCD_HC_OUT_BulkDb+0x670>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	7abb      	ldrb	r3, [r7, #10]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ba:	6013      	str	r3, [r2, #0]
        HCD_RX_DTOG(hhcd->Instance, phy_chnum);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	7abb      	ldrb	r3, [r7, #10]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b3b      	ldr	r3, [pc, #236]	@ (80025b8 <HCD_HC_OUT_BulkDb+0x670>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	7abb      	ldrb	r3, [r7, #10]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	441a      	add	r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num & 0xFU].xfer_len_db > 0U) /* Still data to fill in the buffer */
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	440b      	add	r3, r1
 80024fa:	3328      	adds	r3, #40	@ 0x28
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80b3 	beq.w	800266a <HCD_HC_OUT_BulkDb+0x722>
        hhcd->hc[ch_num & 0xFU].xfer_buff += data_xfr;
 8002504:	7afb      	ldrb	r3, [r7, #11]
 8002506:	f003 020f 	and.w	r2, r3, #15
 800250a:	68f9      	ldr	r1, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	440b      	add	r3, r1
 8002516:	3320      	adds	r3, #32
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800251c:	7afa      	ldrb	r2, [r7, #11]
 800251e:	f002 020f 	and.w	r2, r2, #15
 8002522:	4419      	add	r1, r3
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	4403      	add	r3, r0
 8002530:	3320      	adds	r3, #32
 8002532:	6019      	str	r1, [r3, #0]
        if (hhcd->hc[ch_num & 0xFU].xfer_len_db > hhcd->hc[ch_num & 0xFU].max_packet)
 8002534:	7afb      	ldrb	r3, [r7, #11]
 8002536:	f003 020f 	and.w	r2, r3, #15
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	440b      	add	r3, r1
 8002546:	3328      	adds	r3, #40	@ 0x28
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	7afb      	ldrb	r3, [r7, #11]
 800254c:	f003 020f 	and.w	r2, r3, #15
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4403      	add	r3, r0
 800255c:	331c      	adds	r3, #28
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	4299      	cmp	r1, r3
 8002562:	d92b      	bls.n	80025bc <HCD_HC_OUT_BulkDb+0x674>
          len = hhcd->hc[ch_num & 0xFU].max_packet;
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	f003 020f 	and.w	r2, r3, #15
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	440b      	add	r3, r1
 8002576:	331c      	adds	r3, #28
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          hhcd->hc[ch_num & 0xFU].xfer_len_db -= len;
 800257e:	7afb      	ldrb	r3, [r7, #11]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	440b      	add	r3, r1
 8002590:	3328      	adds	r3, #40	@ 0x28
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002598:	7afa      	ldrb	r2, [r7, #11]
 800259a:	f002 020f 	and.w	r2, r2, #15
 800259e:	1ac9      	subs	r1, r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4403      	add	r3, r0
 80025ac:	3328      	adds	r3, #40	@ 0x28
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	e01d      	b.n	80025ee <HCD_HC_OUT_BulkDb+0x6a6>
 80025b2:	bf00      	nop
 80025b4:	07ff8fbf 	.word	0x07ff8fbf
 80025b8:	07ff8f8f 	.word	0x07ff8f8f
          len = (uint16_t)hhcd->hc[ch_num & 0xFU].xfer_len_db;
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	f003 020f 	and.w	r2, r3, #15
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	440b      	add	r3, r1
 80025ce:	3328      	adds	r3, #40	@ 0x28
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
          hhcd->hc[ch_num & 0xFU].xfer_len_db = 0U; /* end of fill buffer */
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 020f 	and.w	r2, r3, #15
 80025dc:	68f9      	ldr	r1, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	440b      	add	r3, r1
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
        HCD_SET_CH_DBUF1_CNT(hhcd->Instance, phy_chnum, 1U, (uint16_t)len);
 80025ee:	7abb      	ldrb	r3, [r7, #10]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	7abb      	ldrb	r3, [r7, #10]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002604:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002608:	b292      	uxth	r2, r2
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	7abb      	ldrb	r3, [r7, #10]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002614:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800261e:	041a      	lsls	r2, r3, #16
 8002620:	7abb      	ldrb	r3, [r7, #10]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
        USB_WritePMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	68f9      	ldr	r1, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	440b      	add	r3, r1
 8002646:	3320      	adds	r3, #32
 8002648:	681c      	ldr	r4, [r3, #0]
                     hhcd->hc[ch_num & 0xFU].pmaaddr1, (uint16_t)len);
 800264a:	7afb      	ldrb	r3, [r7, #11]
 800264c:	f003 020f 	and.w	r2, r3, #15
        USB_WritePMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	440b      	add	r3, r1
 800265c:	333c      	adds	r3, #60	@ 0x3c
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002664:	4621      	mov	r1, r4
 8002666:	f003 fd56 	bl	8006116 <USB_WritePMA>
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_VALID);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	7abb      	ldrb	r3, [r7, #10]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HCD_HC_OUT_BulkDb+0x828>)
 800267a:	4013      	ands	r3, r2
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002680:	f083 0310 	eor.w	r3, r3, #16
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	f083 0320 	eor.w	r3, r3, #32
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	7abb      	ldrb	r3, [r7, #10]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a4:	6013      	str	r3, [r2, #0]
}
 80026a6:	e05f      	b.n	8002768 <HCD_HC_OUT_BulkDb+0x820>
      hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	440b      	add	r3, r1
 80026ba:	332c      	adds	r3, #44	@ 0x2c
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80026c0:	7afa      	ldrb	r2, [r7, #11]
 80026c2:	f002 020f 	and.w	r2, r2, #15
 80026c6:	4419      	add	r1, r3
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4403      	add	r3, r0
 80026d4:	332c      	adds	r3, #44	@ 0x2c
 80026d6:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num & 0xFU].state = HC_XFRC;
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	f003 020f 	and.w	r2, r3, #15
 80026de:	68f9      	ldr	r1, [r7, #12]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	440b      	add	r3, r1
 80026ea:	3340      	adds	r3, #64	@ 0x40
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num & 0xFU].urb_state  = URB_DONE;
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	440b      	add	r3, r1
 8002702:	333f      	adds	r3, #63	@ 0x3f
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num & 0xFU].toggle_out ^= 1U;
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	440b      	add	r3, r1
 800271a:	3331      	adds	r3, #49	@ 0x31
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	7afa      	ldrb	r2, [r7, #11]
 8002720:	f002 020f 	and.w	r2, r2, #15
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	440b      	add	r3, r1
 8002736:	3331      	adds	r3, #49	@ 0x31
 8002738:	4602      	mov	r2, r0
 800273a:	701a      	strb	r2, [r3, #0]
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_DIS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	7abb      	ldrb	r3, [r7, #10]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HCD_HC_OUT_BulkDb+0x828>)
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	7abb      	ldrb	r3, [r7, #10]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	441a      	add	r2, r3
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	3754      	adds	r7, #84	@ 0x54
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	07ff8fbf 	.word	0x07ff8fbf

08002774 <HCD_HC_IN_BulkDb>:
  * @param  regvalue contain Snapshot of the EPCHn register when ISR is detected
  * @retval none
  */
static void HCD_HC_IN_BulkDb(HCD_HandleTypeDef *hhcd,
                             uint8_t ch_num, uint8_t phy_chnum, uint32_t regvalue)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b08b      	sub	sp, #44	@ 0x2c
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
 8002782:	4613      	mov	r3, r2
 8002784:	72bb      	strb	r3, [r7, #10]
  uint16_t received_bytes;

  /* Read from Buffer 0 */
  if ((regvalue & USB_CH_DTOG_RX) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8083 	beq.w	8002898 <HCD_HC_IN_BulkDb+0x124>
  {
    received_bytes = (uint16_t)HCD_GET_CH_DBUF0_CNT(hhcd->Instance, phy_chnum);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	7aba      	ldrb	r2, [r7, #10]
 8002798:	b292      	uxth	r2, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fc45 	bl	800102c <HCD_GET_CH_DBUF0_CNT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hhcd->hc[ch_num & 0xFU].xfer_len <= received_bytes)
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	440b      	add	r3, r1
 80027b8:	3324      	adds	r3, #36	@ 0x24
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027be:	429a      	cmp	r2, r3
 80027c0:	d80c      	bhi.n	80027dc <HCD_HC_IN_BulkDb+0x68>
    {
      hhcd->hc[ch_num & 0xFU].xfer_len = 0U;
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	440b      	add	r3, r1
 80027d4:	3324      	adds	r3, #36	@ 0x24
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e017      	b.n	800280c <HCD_HC_IN_BulkDb+0x98>
    }
    else
    {
      hhcd->hc[ch_num & 0xFU].xfer_len -= received_bytes;
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	68f9      	ldr	r1, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	440b      	add	r3, r1
 80027ee:	3324      	adds	r3, #36	@ 0x24
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027f4:	7afa      	ldrb	r2, [r7, #11]
 80027f6:	f002 020f 	and.w	r2, r2, #15
 80027fa:	1ac9      	subs	r1, r1, r3
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4403      	add	r3, r0
 8002808:	3324      	adds	r3, #36	@ 0x24
 800280a:	6019      	str	r1, [r3, #0]
    }

    /* Check if we Need to free the other buffer for the IP */
    if ((hhcd->hc[ch_num & 0xFU].xfer_len != 0U) && ((regvalue & USB_CH_DTOG_TX) != 0U))
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	3324      	adds	r3, #36	@ 0x24
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01a      	beq.n	800285c <HCD_HC_IN_BulkDb+0xe8>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HCD_HC_IN_BulkDb+0xe8>
    {
      /* Toggle SwBuff to Allow the IP to submit a new IN */
      HCD_FREE_USER_BUFFER(hhcd->Instance, phy_chnum, 0U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	7abb      	ldrb	r3, [r7, #10]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4bb2      	ldr	r3, [pc, #712]	@ (8002b08 <HCD_HC_IN_BulkDb+0x394>)
 8002840:	4013      	ands	r3, r2
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	7abb      	ldrb	r3, [r7, #10]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	441a      	add	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002856:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800285a:	6013      	str	r3, [r2, #0]
    }

    /* Read the byte from PMA to user Buffer(System Memory) */
    USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	440b      	add	r3, r1
 8002872:	3320      	adds	r3, #32
 8002874:	681c      	ldr	r4, [r3, #0]
                hhcd->hc[ch_num & 0xFU].pmaaddr0, (uint16_t)received_bytes);
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	f003 030f 	and.w	r3, r3, #15
    USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	440b      	add	r3, r1
 800288a:	330a      	adds	r3, #10
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002890:	4621      	mov	r1, r4
 8002892:	f003 fca1 	bl	80061d8 <USB_ReadPMA>
 8002896:	e080      	b.n	800299a <HCD_HC_IN_BulkDb+0x226>
  }
  else
  {
    /* Read from Buffer 1 */
    received_bytes = (uint16_t) HCD_GET_CH_DBUF1_CNT(hhcd->Instance, phy_chnum);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	7aba      	ldrb	r2, [r7, #10]
 800289e:	b292      	uxth	r2, r2
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fbe3 	bl	800106e <HCD_GET_CH_DBUF1_CNT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hhcd->hc[ch_num & 0xFU].xfer_len <= received_bytes)
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	440b      	add	r3, r1
 80028be:	3324      	adds	r3, #36	@ 0x24
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d80c      	bhi.n	80028e2 <HCD_HC_IN_BulkDb+0x16e>
    {
      hhcd->hc[ch_num & 0xFU].xfer_len = 0U;
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	440b      	add	r3, r1
 80028da:	3324      	adds	r3, #36	@ 0x24
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e017      	b.n	8002912 <HCD_HC_IN_BulkDb+0x19e>
    }
    else
    {
      hhcd->hc[ch_num & 0xFU].xfer_len -= received_bytes;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	68f9      	ldr	r1, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	440b      	add	r3, r1
 80028f4:	3324      	adds	r3, #36	@ 0x24
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80028fa:	7afa      	ldrb	r2, [r7, #11]
 80028fc:	f002 020f 	and.w	r2, r2, #15
 8002900:	1ac9      	subs	r1, r1, r3
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	4403      	add	r3, r0
 800290e:	3324      	adds	r3, #36	@ 0x24
 8002910:	6019      	str	r1, [r3, #0]
    }

    /* Check if we Need to free the other buffer for the IP */
    if ((hhcd->hc[ch_num & 0xFU].xfer_len != 0U) && ((regvalue & USB_CH_DTOG_TX) == 0U))
 8002912:	7afb      	ldrb	r3, [r7, #11]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	440b      	add	r3, r1
 8002924:	3324      	adds	r3, #36	@ 0x24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01a      	beq.n	8002962 <HCD_HC_IN_BulkDb+0x1ee>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HCD_HC_IN_BulkDb+0x1ee>
    {
      /* Toggle SwBuff */
      HCD_FREE_USER_BUFFER(hhcd->Instance, phy_chnum, 0U);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	7abb      	ldrb	r3, [r7, #10]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HCD_HC_IN_BulkDb+0x394>)
 8002946:	4013      	ands	r3, r2
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	7abb      	ldrb	r3, [r7, #10]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800295c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002960:	6013      	str	r3, [r2, #0]
    }

    /* Read the byte from PMA to user Buffer(System Memory) */
    USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	440b      	add	r3, r1
 8002978:	3320      	adds	r3, #32
 800297a:	681c      	ldr	r4, [r3, #0]
                hhcd->hc[ch_num & 0xFU].pmaaddr1, (uint16_t)received_bytes);
 800297c:	7afb      	ldrb	r3, [r7, #11]
 800297e:	f003 020f 	and.w	r2, r3, #15
    USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	440b      	add	r3, r1
 800298e:	333c      	adds	r3, #60	@ 0x3c
 8002990:	881a      	ldrh	r2, [r3, #0]
 8002992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002994:	4621      	mov	r1, r4
 8002996:	f003 fc1f 	bl	80061d8 <USB_ReadPMA>
  }

  /* update the global number of all received bytes */
  hhcd->hc[ch_num & 0xFU].xfer_count += received_bytes;
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	440b      	add	r3, r1
 80029ac:	332c      	adds	r3, #44	@ 0x2c
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80029b2:	7afa      	ldrb	r2, [r7, #11]
 80029b4:	f002 020f 	and.w	r2, r2, #15
 80029b8:	4419      	add	r1, r3
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4403      	add	r3, r0
 80029c6:	332c      	adds	r3, #44	@ 0x2c
 80029c8:	6019      	str	r1, [r3, #0]

  /* Transfer complete state */
  hhcd->hc[ch_num & 0xFU].state = HC_ACK;
 80029ca:	7afb      	ldrb	r3, [r7, #11]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	440b      	add	r3, r1
 80029dc:	3340      	adds	r3, #64	@ 0x40
 80029de:	2203      	movs	r2, #3
 80029e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num & 0xFU].ErrCnt = 0U;
 80029e2:	7afb      	ldrb	r3, [r7, #11]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	440b      	add	r3, r1
 80029f6:	3304      	adds	r3, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

  if ((hhcd->hc[ch_num & 0xFU].xfer_len == 0U) ||
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3324      	adds	r3, #36	@ 0x24
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HCD_HC_IN_BulkDb+0x2be>
      ((received_bytes < hhcd->hc[ch_num & 0xFU].max_packet)))
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	68f9      	ldr	r1, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	440b      	add	r3, r1
 8002a28:	331c      	adds	r3, #28
 8002a2a:	881b      	ldrh	r3, [r3, #0]
  if ((hhcd->hc[ch_num & 0xFU].xfer_len == 0U) ||
 8002a2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d22e      	bcs.n	8002a90 <HCD_HC_IN_BulkDb+0x31c>
  {
    hhcd->hc[ch_num & 0xFU].urb_state  = URB_DONE;
 8002a32:	7afb      	ldrb	r3, [r7, #11]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	333f      	adds	r3, #63	@ 0x3f
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num & 0xFU].state  = HC_XFRC;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3340      	adds	r3, #64	@ 0x40
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]

    /* disable channel */
    HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_DIS);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	7abb      	ldrb	r3, [r7, #10]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <HCD_HC_IN_BulkDb+0x398>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	7abb      	ldrb	r3, [r7, #10]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e036      	b.n	8002afe <HCD_HC_IN_BulkDb+0x38a>
  }
  else
  {
    hhcd->hc[ch_num & 0xFU].xfer_buff += received_bytes;
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f003 020f 	and.w	r2, r3, #15
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aa8:	7afa      	ldrb	r2, [r7, #11]
 8002aaa:	f002 020f 	and.w	r2, r2, #15
 8002aae:	4419      	add	r1, r3
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4403      	add	r3, r0
 8002abc:	3320      	adds	r3, #32
 8002abe:	6019      	str	r1, [r3, #0]

    /* Reactivate the Channel Submit an other URB since the Transfer is not yet completed */
    HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_STRX);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	7abb      	ldrb	r3, [r7, #10]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b0f      	ldr	r3, [pc, #60]	@ (8002b0c <HCD_HC_IN_BulkDb+0x398>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7abb      	ldrb	r3, [r7, #10]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002afa:	6013      	str	r3, [r2, #0]
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	372c      	adds	r7, #44	@ 0x2c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	07ff8f8f 	.word	0x07ff8f8f
 8002b0c:	07ffbf8f 	.word	0x07ffbf8f

08002b10 <HCD_HC_IN_ISO>:
  * @param  regvalue contain Snapshot of the EPCHn register when ISR is detected
  * @retval none
  */
static void inline HCD_HC_IN_ISO(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                                 uint8_t phy_chnum, uint32_t regvalue)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	72fb      	strb	r3, [r7, #11]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	72bb      	strb	r3, [r7, #10]
  /* Check if Double buffer isochronous */
  if ((regvalue & USB_CH_KIND) != 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d059      	beq.n	8002be0 <HCD_HC_IN_ISO+0xd0>
  {
    /* Get Data IN Packet */
    hhcd->hc[ch_num & 0xFU].xfer_count = HCD_GET_CH_RX_CNT(hhcd->Instance, phy_chnum);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	7aba      	ldrb	r2, [r7, #10]
 8002b32:	b292      	uxth	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fa28 	bl	8000f8c <HCD_GET_CH_RX_CNT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	4608      	mov	r0, r1
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	440b      	add	r3, r1
 8002b54:	332c      	adds	r3, #44	@ 0x2c
 8002b56:	6018      	str	r0, [r3, #0]
    if (hhcd->hc[ch_num & 0xFU].xfer_count != 0U)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	440b      	add	r3, r1
 8002b6a:	332c      	adds	r3, #44	@ 0x2c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80ec 	beq.w	8002d4c <HCD_HC_IN_ISO+0x23c>
    {
      USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	440b      	add	r3, r1
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	681c      	ldr	r4, [r3, #0]
                  hhcd->hc[ch_num & 0xFU].pmaadress,
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 030f 	and.w	r3, r3, #15
      USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	881d      	ldrh	r5, [r3, #0]
                  (uint16_t)hhcd->hc[ch_num & 0xFU].xfer_count);
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	332c      	adds	r3, #44	@ 0x2c
 8002bba:	681b      	ldr	r3, [r3, #0]
      USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	f003 fb09 	bl	80061d8 <USB_ReadPMA>

      hhcd->hc[ch_num & 0xFU].urb_state = URB_DONE;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	440b      	add	r3, r1
 8002bd8:	333f      	adds	r3, #63	@ 0x3f
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e0b5      	b.n	8002d4c <HCD_HC_IN_ISO+0x23c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else  /* double buffer isochronous */
  {
    /* Read from Buffer0 */
    if ((regvalue & USB_CH_DTOG_RX) != 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d059      	beq.n	8002c9e <HCD_HC_IN_ISO+0x18e>
    {
      /* Get number of Received byte in buffer0 */
      hhcd->hc[ch_num & 0xFU].xfer_count = HCD_GET_CH_DBUF0_CNT(hhcd->Instance, phy_chnum);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	7aba      	ldrb	r2, [r7, #10]
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fa19 	bl	800102c <HCD_GET_CH_DBUF0_CNT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	4608      	mov	r0, r1
 8002c06:	68f9      	ldr	r1, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	440b      	add	r3, r1
 8002c12:	332c      	adds	r3, #44	@ 0x2c
 8002c14:	6018      	str	r0, [r3, #0]

      if (hhcd->hc[ch_num & 0xFU].xfer_count != 0U)
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	440b      	add	r3, r1
 8002c28:	332c      	adds	r3, #44	@ 0x2c
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 808d 	beq.w	8002d4c <HCD_HC_IN_ISO+0x23c>
      {
        /* Read from Buffer0 */
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f003 020f 	and.w	r2, r3, #15
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	440b      	add	r3, r1
 8002c48:	3320      	adds	r3, #32
 8002c4a:	681c      	ldr	r4, [r3, #0]
                    hhcd->hc[ch_num & 0xFU].pmaaddr0,
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	440b      	add	r3, r1
 8002c60:	330a      	adds	r3, #10
 8002c62:	881d      	ldrh	r5, [r3, #0]
                    (uint16_t)hhcd->hc[ch_num & 0xFU].xfer_count);
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	68f9      	ldr	r1, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	332c      	adds	r3, #44	@ 0x2c
 8002c78:	681b      	ldr	r3, [r3, #0]
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	462a      	mov	r2, r5
 8002c7e:	4621      	mov	r1, r4
 8002c80:	f003 faaa 	bl	80061d8 <USB_ReadPMA>

        hhcd->hc[ch_num & 0xFU].urb_state  = URB_DONE;
 8002c84:	7afb      	ldrb	r3, [r7, #11]
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	68f9      	ldr	r1, [r7, #12]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	440b      	add	r3, r1
 8002c96:	333f      	adds	r3, #63	@ 0x3f
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e056      	b.n	8002d4c <HCD_HC_IN_ISO+0x23c>
      }
    }
    else
    {
      /* Get number of Received byte in buffer1 */
      hhcd->hc[ch_num & 0xFU].xfer_count = HCD_GET_CH_DBUF1_CNT(hhcd->Instance, phy_chnum);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	7aba      	ldrb	r2, [r7, #10]
 8002ca4:	b292      	uxth	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f9e0 	bl	800106e <HCD_GET_CH_DBUF1_CNT>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4608      	mov	r0, r1
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	440b      	add	r3, r1
 8002cc6:	332c      	adds	r3, #44	@ 0x2c
 8002cc8:	6018      	str	r0, [r3, #0]

      if (hhcd->hc[ch_num & 0xFU].xfer_count != 0U)
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	440b      	add	r3, r1
 8002cdc:	332c      	adds	r3, #44	@ 0x2c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d033      	beq.n	8002d4c <HCD_HC_IN_ISO+0x23c>
      {
        /* Read from Buffer1 */
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	7afb      	ldrb	r3, [r7, #11]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3320      	adds	r3, #32
 8002cfc:	681c      	ldr	r4, [r3, #0]
                    hhcd->hc[ch_num & 0xFU].pmaaddr1,
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f003 020f 	and.w	r2, r3, #15
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002d04:	68f9      	ldr	r1, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	440b      	add	r3, r1
 8002d10:	333c      	adds	r3, #60	@ 0x3c
 8002d12:	881d      	ldrh	r5, [r3, #0]
                    (uint16_t)hhcd->hc[ch_num & 0xFU].xfer_count);
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	440b      	add	r3, r1
 8002d26:	332c      	adds	r3, #44	@ 0x2c
 8002d28:	681b      	ldr	r3, [r3, #0]
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	462a      	mov	r2, r5
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f003 fa52 	bl	80061d8 <USB_ReadPMA>

        hhcd->hc[ch_num & 0xFU].urb_state = URB_DONE;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	440b      	add	r3, r1
 8002d46:	333f      	adds	r3, #63	@ 0x3f
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* Transfer complete state */
  hhcd->hc[ch_num & 0xFU].state = HC_XFRC;
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	f003 020f 	and.w	r2, r3, #15
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3340      	adds	r3, #64	@ 0x40
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]

  /* Clear VTRX */
  HCD_CLEAR_RX_CH_CTR(hhcd->Instance, phy_chnum);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	7abb      	ldrb	r3, [r7, #10]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HCD_HC_IN_ISO+0x284>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	7abb      	ldrb	r3, [r7, #10]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdb0      	pop	{r4, r5, r7, pc}
 8002d94:	07ff0f8f 	.word	0x07ff0f8f

08002d98 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number
  *         This parameter can be a value from 1 to 8
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b08d      	sub	sp, #52	@ 0x34
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
  uint16_t received_bytes;
  uint8_t phy_chnum = chnum;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t ch_num = HAL_HCD_GetLogical_Channel(hhcd, phy_chnum, 1U);
 8002daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dae:	2201      	movs	r2, #1
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 ff23 	bl	8003bfe <HAL_HCD_GetLogical_Channel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  /* Take a Flag snapshot from the CHEP register, due to STRX bits are used for both control and status */
  uint32_t ch_reg =  HCD_GET_CHANNEL(hhcd->Instance, phy_chnum);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Manage Correct Transaction */
  if ((ch_reg & USB_CH_ERRRX) == 0U)
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 823a 	bne.w	8003250 <HCD_HC_IN_IRQHandler+0x4b8>
  {
    /* Isochronous Channel */
    if ((ch_reg & USB_CH_UTYPE) == USB_EP_ISOCHRONOUS)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de6:	d108      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x62>
    {
      HCD_HC_IN_ISO(hhcd, ch_num, phy_chnum, ch_reg);
 8002de8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002dec:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff fe8c 	bl	8002b10 <HCD_HC_IN_ISO>
    hhcd->HC_NotifyURBChangeCallback(hhcd, ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
}
 8002df8:	e2d5      	b.n	80033a6 <HCD_HC_IN_IRQHandler+0x60e>
      if (((ch_reg) & USB_CH_RX_STRX) == USB_CH_RX_ACK_SBUF)
 8002dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8142 	bne.w	800308a <HCD_HC_IN_IRQHandler+0x2f2>
        received_bytes = (uint16_t)HCD_GET_CH_RX_CNT(hhcd->Instance, phy_chnum);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f8ba 	bl	8000f8c <HCD_GET_CH_RX_CNT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	827b      	strh	r3, [r7, #18]
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	440b      	add	r3, r1
 8002e34:	3320      	adds	r3, #32
 8002e36:	681c      	ldr	r4, [r3, #0]
                    hhcd->hc[ch_num & 0xFU].pmaadress, (uint16_t)received_bytes);
 8002e38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e3c:	f003 030f 	and.w	r3, r3, #15
        USB_ReadPMA(hhcd->Instance, hhcd->hc[ch_num & 0xFU].xfer_buff,
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3308      	adds	r3, #8
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	8a7b      	ldrh	r3, [r7, #18]
 8002e54:	4621      	mov	r1, r4
 8002e56:	f003 f9bf 	bl	80061d8 <USB_ReadPMA>
        hhcd->hc[ch_num & 0xFU].xfer_count += received_bytes;
 8002e5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	440b      	add	r3, r1
 8002e6e:	332c      	adds	r3, #44	@ 0x2c
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	8a7b      	ldrh	r3, [r7, #18]
 8002e74:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002e78:	f002 020f 	and.w	r2, r2, #15
 8002e7c:	4419      	add	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4403      	add	r3, r0
 8002e8a:	332c      	adds	r3, #44	@ 0x2c
 8002e8c:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num & 0xFU].state = HC_ACK;
 8002e8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3340      	adds	r3, #64	@ 0x40
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].ErrCnt = 0U;
 8002ea8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
        if (hhcd->hc[ch_num & 0xFU].xfer_len <= received_bytes)
 8002ec4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3324      	adds	r3, #36	@ 0x24
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	8a7b      	ldrh	r3, [r7, #18]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d80d      	bhi.n	8002efe <HCD_HC_IN_IRQHandler+0x166>
          hhcd->hc[ch_num & 0xFU].xfer_len = 0U;
 8002ee2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ee6:	f003 020f 	and.w	r2, r3, #15
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3324      	adds	r3, #36	@ 0x24
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e019      	b.n	8002f32 <HCD_HC_IN_IRQHandler+0x19a>
          hhcd->hc[ch_num & 0xFU].xfer_len -= received_bytes;
 8002efe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	440b      	add	r3, r1
 8002f12:	3324      	adds	r3, #36	@ 0x24
 8002f14:	6819      	ldr	r1, [r3, #0]
 8002f16:	8a7b      	ldrh	r3, [r7, #18]
 8002f18:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002f1c:	f002 020f 	and.w	r2, r2, #15
 8002f20:	1ac9      	subs	r1, r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	4403      	add	r3, r0
 8002f2e:	3324      	adds	r3, #36	@ 0x24
 8002f30:	6019      	str	r1, [r3, #0]
        if ((hhcd->hc[ch_num & 0xFU].xfer_len == 0U) ||
 8002f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	440b      	add	r3, r1
 8002f46:	3324      	adds	r3, #36	@ 0x24
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00e      	beq.n	8002f6c <HCD_HC_IN_IRQHandler+0x1d4>
            ((received_bytes < hhcd->hc[ch_num & 0xFU].max_packet)))
 8002f4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	331c      	adds	r3, #28
 8002f64:	881b      	ldrh	r3, [r3, #0]
        if ((hhcd->hc[ch_num & 0xFU].xfer_len == 0U) ||
 8002f66:	8a7a      	ldrh	r2, [r7, #18]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d21a      	bcs.n	8002fa2 <HCD_HC_IN_IRQHandler+0x20a>
          hhcd->hc[ch_num & 0xFU].urb_state  = URB_DONE;
 8002f6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	440b      	add	r3, r1
 8002f80:	333f      	adds	r3, #63	@ 0x3f
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
          hhcd->hc[ch_num & 0xFU].state  = HC_XFRC;
 8002f86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	440b      	add	r3, r1
 8002f9a:	3340      	adds	r3, #64	@ 0x40
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e039      	b.n	8003016 <HCD_HC_IN_IRQHandler+0x27e>
          hhcd->hc[ch_num & 0xFU].xfer_buff += received_bytes;
 8002fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3320      	adds	r3, #32
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	8a7b      	ldrh	r3, [r7, #18]
 8002fbc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002fc0:	f002 020f 	and.w	r2, r2, #15
 8002fc4:	4419      	add	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	6019      	str	r1, [r3, #0]
          HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_STRX);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b98      	ldr	r3, [pc, #608]	@ (8003248 <HCD_HC_IN_IRQHandler+0x4b0>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003014:	6013      	str	r3, [r2, #0]
        if ((hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_BULK) ||
 8003016:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800301a:	f003 020f 	and.w	r2, r3, #15
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	440b      	add	r3, r1
 800302a:	331b      	adds	r3, #27
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d00e      	beq.n	8003050 <HCD_HC_IN_IRQHandler+0x2b8>
            (hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_INTR))
 8003032:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	440b      	add	r3, r1
 8003046:	331b      	adds	r3, #27
 8003048:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_BULK) ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	f040 80d2 	bne.w	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
          hhcd->hc[ch_num & 0xFU].toggle_out ^= 1U;
 8003050:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	440b      	add	r3, r1
 8003064:	3331      	adds	r3, #49	@ 0x31
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800306c:	f002 020f 	and.w	r2, r2, #15
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2d8      	uxtb	r0, r3
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	440b      	add	r3, r1
 8003082:	3331      	adds	r3, #49	@ 0x31
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e0b4      	b.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
      else if (((ch_reg & USB_CH_RX_STRX) == USB_CH_RX_NAK)
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003094:	d15c      	bne.n	8003150 <HCD_HC_IN_IRQHandler+0x3b8>
               && (hhcd->hc[ch_num & 0xFU].urb_state != URB_DONE))
 8003096:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	440b      	add	r3, r1
 80030aa:	333f      	adds	r3, #63	@ 0x3f
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d04e      	beq.n	8003150 <HCD_HC_IN_IRQHandler+0x3b8>
        hhcd->hc[ch_num & 0xFU].urb_state = URB_NOTREADY;
 80030b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	440b      	add	r3, r1
 80030c6:	333f      	adds	r3, #63	@ 0x3f
 80030c8:	2202      	movs	r2, #2
 80030ca:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].ErrCnt = 0U;
 80030cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	440b      	add	r3, r1
 80030e2:	3304      	adds	r3, #4
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].state = HC_NAK;
 80030e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80030ec:	f003 020f 	and.w	r2, r3, #15
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	440b      	add	r3, r1
 80030fc:	3340      	adds	r3, #64	@ 0x40
 80030fe:	2204      	movs	r2, #4
 8003100:	701a      	strb	r2, [r3, #0]
        if (hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_INTR)
 8003102:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003106:	f003 020f 	and.w	r2, r3, #15
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	440b      	add	r3, r1
 8003116:	331b      	adds	r3, #27
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d16a      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
          HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_DIS);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <HCD_HC_IN_IRQHandler+0x4b0>)
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314c:	6013      	str	r3, [r2, #0]
        if (hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_INTR)
 800314e:	e051      	b.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
      else if ((ch_reg & USB_CH_RX_STRX) == USB_CH_RX_STALL)
 8003150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003152:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315a:	d138      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x436>
        (void)HAL_HCD_HC_Halt(hhcd, ch_num);
 800315c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fb84 	bl	8001870 <HAL_HCD_HC_Halt>
        hhcd->hc[ch_num & 0xFU].state = HC_STALL;
 8003168:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800316c:	f003 020f 	and.w	r2, r3, #15
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	440b      	add	r3, r1
 800317c:	3340      	adds	r3, #64	@ 0x40
 800317e:	2206      	movs	r2, #6
 8003180:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].urb_state = URB_STALL;
 8003182:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	333f      	adds	r3, #63	@ 0x3f
 8003198:	2205      	movs	r2, #5
 800319a:	701a      	strb	r2, [r3, #0]
        HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_DIS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <HCD_HC_IN_IRQHandler+0x4b0>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	e012      	b.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
      else  if (((ch_reg & USB_CH_RX_STRX) == USB_CH_RX_ACK_DBUF)
 80031ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031d8:	d10c      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
                && ((ch_reg & USB_CH_KIND) != 0U))
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <HCD_HC_IN_IRQHandler+0x45c>
        HCD_HC_IN_BulkDb(hhcd, ch_num, phy_chnum, ch_reg);
 80031e4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80031e8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fac0 	bl	8002774 <HCD_HC_IN_BulkDb>
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 80031f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80031f8:	f003 020f 	and.w	r2, r3, #15
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	440b      	add	r3, r1
 8003208:	333f      	adds	r3, #63	@ 0x3f
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f004 fb59 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
      HCD_CLEAR_RX_CH_CTR(hhcd->Instance, phy_chnum);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b08      	ldr	r3, [pc, #32]	@ (800324c <HCD_HC_IN_IRQHandler+0x4b4>)
 800322a:	4013      	ands	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	e0af      	b.n	80033a6 <HCD_HC_IN_IRQHandler+0x60e>
 8003246:	bf00      	nop
 8003248:	07ffbf8f 	.word	0x07ffbf8f
 800324c:	07ff0f8f 	.word	0x07ff0f8f
    hhcd->hc[ch_num & 0xFU].urb_state = URB_NOTREADY;
 8003250:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	440b      	add	r3, r1
 8003264:	333f      	adds	r3, #63	@ 0x3f
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num & 0xFU].ErrCnt++;
 800326a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800326e:	f003 020f 	and.w	r2, r3, #15
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	1c51      	adds	r1, r2, #1
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	4403      	add	r3, r0
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	3201      	adds	r2, #1
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4403      	add	r3, r0
 8003294:	3304      	adds	r3, #4
 8003296:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num & 0xFU].state = HC_XACTERR;
 8003298:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	440b      	add	r3, r1
 80032ac:	3340      	adds	r3, #64	@ 0x40
 80032ae:	2207      	movs	r2, #7
 80032b0:	701a      	strb	r2, [r3, #0]
    HCD_CLEAR_RX_CH_ERR(hhcd->Instance, phy_chnum);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c6:	4b3a      	ldr	r3, [pc, #232]	@ (80033b0 <HCD_HC_IN_IRQHandler+0x618>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e4:	601a      	str	r2, [r3, #0]
    if (hhcd->hc[ch_num & 0xFU].ErrCnt > 3U)
 80032e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	440b      	add	r3, r1
 80032fc:	3304      	adds	r3, #4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d93e      	bls.n	8003382 <HCD_HC_IN_IRQHandler+0x5ea>
      hhcd->hc[ch_num & 0xFU].urb_state = URB_ERROR;
 8003304:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	440b      	add	r3, r1
 8003318:	333f      	adds	r3, #63	@ 0x3f
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
      HCD_SET_CH_RX_STATUS(hhcd->Instance, phy_chnum, USB_CH_RX_DIS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <HCD_HC_IN_IRQHandler+0x61c>)
 8003330:	4013      	ands	r3, r2
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334c:	6013      	str	r3, [r2, #0]
      HCD_CLEAR_RX_CH_ERR(hhcd->Instance, phy_chnum);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HCD_HC_IN_IRQHandler+0x618>)
 8003364:	4013      	ands	r3, r2
 8003366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800336a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	601a      	str	r2, [r3, #0]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 8003382:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	440b      	add	r3, r1
 8003396:	333f      	adds	r3, #63	@ 0x3f
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f004 fa92 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033a6:	bf00      	nop
 80033a8:	3734      	adds	r7, #52	@ 0x34
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	01ff0f0f 	.word	0x01ff0f0f
 80033b4:	07ffbf8f 	.word	0x07ffbf8f

080033b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number
  *         This parameter can be a value from 1 to 8
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	@ 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t WregCh;
  uint16_t data_xfr;
  uint8_t phy_chnum = chnum;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Get Virtual Channel number */
  uint8_t ch_num = HAL_HCD_GetLogical_Channel(hhcd, phy_chnum, 0U);
 80033ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033ce:	2200      	movs	r2, #0
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fc13 	bl	8003bfe <HAL_HCD_GetLogical_Channel>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  /* Take a Flag snapshot from the CHEP register, due to STRX bits are used for both control &status */
  uint32_t ch_reg =  *(__IO uint32_t *)(&(hhcd->Instance->CHEP0R) + phy_chnum);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /*------ Manage Correct Transaction ------*/
  if ((ch_reg & USB_CH_ERRTX) == 0U)
 80033f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 82b6 	bne.w	8003968 <HCD_HC_OUT_IRQHandler+0x5b0>
  {
    /* Handle Isochronous channel */
    if ((ch_reg & USB_CH_UTYPE) == USB_EP_ISOCHRONOUS)
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003406:	f040 80d5 	bne.w	80035b4 <HCD_HC_OUT_IRQHandler+0x1fc>
    {
      /* correct transaction */
      if ((hhcd->Instance->ISTR & USB_ISTR_ERR) == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 80a4 	bne.w	8003562 <HCD_HC_OUT_IRQHandler+0x1aa>
      {
        /* Double buffer isochronous out */
        if ((ch_reg & USB_CH_KIND) != 0U)
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <HCD_HC_OUT_IRQHandler+0xb0>
        {
          HCD_SET_CH_TX_CNT(hhcd->Instance, phy_chnum, 0U);
 8003424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800343e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003442:	b292      	uxth	r2, r2
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003450:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003454:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800345e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e062      	b.n	800352e <HCD_HC_OUT_IRQHandler+0x176>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else /* double buffer isochronous out */
        {
          /* Odd Transaction */
          if ((ch_reg & USB_CH_DTOG_TX) != 0U)
 8003468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d021      	beq.n	80034b6 <HCD_HC_OUT_IRQHandler+0xfe>
          {
            HCD_SET_CH_TX_CNT(hhcd->Instance, phy_chnum, 0U);
 8003472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800347c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800348c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003490:	b292      	uxth	r2, r2
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800349e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80034a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e023      	b.n	80034fe <HCD_HC_OUT_IRQHandler+0x146>
          }
          /* Even Transaction */
          else
          {
            HCD_SET_CH_RX_CNT(hhcd->Instance, phy_chnum, 0U);
 80034b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034fc:	605a      	str	r2, [r3, #4]
          }

          USB_DRD_SET_CHEP_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_DIS);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4baf      	ldr	r3, [pc, #700]	@ (80037cc <HCD_HC_OUT_IRQHandler+0x414>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800352c:	6013      	str	r3, [r2, #0]
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* Transfer complete state */
        hhcd->hc[ch_num & 0xFU].state = HC_XFRC;
 800352e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	440b      	add	r3, r1
 8003542:	3340      	adds	r3, #64	@ 0x40
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].urb_state = URB_DONE;
 8003548:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	440b      	add	r3, r1
 800355c:	333f      	adds	r3, #63	@ 0x3f
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
      }

      /*Clear Correct Transfer */
      HCD_CLEAR_TX_CH_CTR(hhcd->Instance, phy_chnum);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b97      	ldr	r3, [pc, #604]	@ (80037d0 <HCD_HC_OUT_IRQHandler+0x418>)
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358c:	601a      	str	r2, [r3, #0]

      /*TX COMPLETE*/
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 800358e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	440b      	add	r3, r1
 80035a2:	333f      	adds	r3, #63	@ 0x3f
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 f98c 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
}
 80035b2:	e26b      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x6d4>
      if ((ch_reg & USB_CH_TX_STTX) == USB_CH_TX_ACK_SBUF)
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 810a 	bne.w	80037d4 <HCD_HC_OUT_IRQHandler+0x41c>
        data_xfr = (uint16_t)(((USB_DRD_PMA_BUFF + phy_chnum)->TXBD & 0x03FF0000U) >> 16U);
 80035c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d8:	83fb      	strh	r3, [r7, #30]
        if (hhcd->hc[ch_num & 0xFU].xfer_len >= data_xfr)
 80035da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	440b      	add	r3, r1
 80035ee:	3324      	adds	r3, #36	@ 0x24
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	8bfb      	ldrh	r3, [r7, #30]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d31a      	bcc.n	800362e <HCD_HC_OUT_IRQHandler+0x276>
          hhcd->hc[ch_num & 0xFU].xfer_len -= data_xfr;
 80035f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	440b      	add	r3, r1
 800360c:	3324      	adds	r3, #36	@ 0x24
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003616:	f002 020f 	and.w	r2, r2, #15
 800361a:	1ac9      	subs	r1, r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4403      	add	r3, r0
 8003628:	3324      	adds	r3, #36	@ 0x24
 800362a:	6019      	str	r1, [r3, #0]
 800362c:	e00c      	b.n	8003648 <HCD_HC_OUT_IRQHandler+0x290>
          hhcd->hc[ch_num & 0xFU].xfer_len = 0U;
 800362e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	3324      	adds	r3, #36	@ 0x24
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
        if (hhcd->hc[ch_num & 0xFU].xfer_len != 0U)
 8003648:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800364c:	f003 020f 	and.w	r2, r3, #15
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	440b      	add	r3, r1
 800365c:	3324      	adds	r3, #36	@ 0x24
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d045      	beq.n	80036f0 <HCD_HC_OUT_IRQHandler+0x338>
          hhcd->hc[ch_num & 0xFU].xfer_buff += data_xfr;
 8003664:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003668:	f003 020f 	and.w	r2, r3, #15
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	440b      	add	r3, r1
 8003678:	3320      	adds	r3, #32
 800367a:	6819      	ldr	r1, [r3, #0]
 800367c:	8bfb      	ldrh	r3, [r7, #30]
 800367e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003682:	f002 020f 	and.w	r2, r2, #15
 8003686:	4419      	add	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4403      	add	r3, r0
 8003694:	3320      	adds	r3, #32
 8003696:	6019      	str	r1, [r3, #0]
          hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 8003698:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800369c:	f003 020f 	and.w	r2, r3, #15
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	440b      	add	r3, r1
 80036ac:	332c      	adds	r3, #44	@ 0x2c
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	8bfb      	ldrh	r3, [r7, #30]
 80036b2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80036b6:	f002 020f 	and.w	r2, r2, #15
 80036ba:	4419      	add	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4403      	add	r3, r0
 80036c8:	332c      	adds	r3, #44	@ 0x2c
 80036ca:	6019      	str	r1, [r3, #0]
          (void) USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num & 0xFU]);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	3310      	adds	r3, #16
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	f002 fed7 	bl	800649c <USB_HC_StartXfer>
 80036ee:	e10d      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
          hhcd->hc[ch_num & 0xFU].xfer_count += data_xfr;
 80036f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	440b      	add	r3, r1
 8003704:	332c      	adds	r3, #44	@ 0x2c
 8003706:	6819      	ldr	r1, [r3, #0]
 8003708:	8bfb      	ldrh	r3, [r7, #30]
 800370a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800370e:	f002 020f 	and.w	r2, r2, #15
 8003712:	4419      	add	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	4403      	add	r3, r0
 8003720:	332c      	adds	r3, #44	@ 0x2c
 8003722:	6019      	str	r1, [r3, #0]
          hhcd->hc[ch_num & 0xFU].state = HC_XFRC;
 8003724:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	440b      	add	r3, r1
 8003738:	3340      	adds	r3, #64	@ 0x40
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[ch_num & 0xFU].urb_state = URB_DONE;
 800373e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	440b      	add	r3, r1
 8003752:	333f      	adds	r3, #63	@ 0x3f
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
          if ((hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_BULK) ||
 8003758:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	331b      	adds	r3, #27
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d00e      	beq.n	8003792 <HCD_HC_OUT_IRQHandler+0x3da>
              (hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_INTR))
 8003774:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	440b      	add	r3, r1
 8003788:	331b      	adds	r3, #27
 800378a:	781b      	ldrb	r3, [r3, #0]
          if ((hhcd->hc[ch_num & 0xFU].ep_type == EP_TYPE_BULK) ||
 800378c:	2b03      	cmp	r3, #3
 800378e:	f040 80bd 	bne.w	800390c <HCD_HC_OUT_IRQHandler+0x554>
            hhcd->hc[ch_num & 0xFU].toggle_out ^= 1U;
 8003792:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	440b      	add	r3, r1
 80037a6:	3331      	adds	r3, #49	@ 0x31
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80037ae:	f002 020f 	and.w	r2, r2, #15
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2d8      	uxtb	r0, r3
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	440b      	add	r3, r1
 80037c4:	3331      	adds	r3, #49	@ 0x31
 80037c6:	4602      	mov	r2, r0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e09f      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
 80037cc:	07ff8fbf 	.word	0x07ff8fbf
 80037d0:	07ff8f0f 	.word	0x07ff8f0f
      else if (((ch_reg & USB_CHEP_NAK) == USB_CHEP_NAK) ||
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HCD_HC_OUT_IRQHandler+0x430>
               ((ch_reg & USB_CH_TX_STTX) == USB_CH_TX_NAK))
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
      else if (((ch_reg & USB_CHEP_NAK) == USB_CHEP_NAK) ||
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d15e      	bne.n	80038a6 <HCD_HC_OUT_IRQHandler+0x4ee>
        hhcd->hc[ch_num & 0xFU].state = HC_NAK;
 80037e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	440b      	add	r3, r1
 80037fc:	3340      	adds	r3, #64	@ 0x40
 80037fe:	2204      	movs	r2, #4
 8003800:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].urb_state = URB_NOTREADY;
 8003802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	440b      	add	r3, r1
 8003816:	333f      	adds	r3, #63	@ 0x3f
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].ErrCnt = 0U;
 800381c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	4613      	mov	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	4413      	add	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	440b      	add	r3, r1
 8003832:	3304      	adds	r3, #4
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
        WregCh = *(__IO uint32_t *)(&(hhcd->Instance->CHEP0R) + phy_chnum);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
        WregCh &= ~USB_CHEP_NAK & USB_CHEP_REG_MASK;
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4b91      	ldr	r3, [pc, #580]	@ (8003a94 <HCD_HC_OUT_IRQHandler+0x6dc>)
 800384e:	4013      	ands	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
        HCD_SET_CHANNEL(hhcd->Instance, phy_chnum, WregCh);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]
        if (hhcd->hc[ch_num & 0xFU].doublebuffer == 0U)
 8003864:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	440b      	add	r3, r1
 8003878:	333e      	adds	r3, #62	@ 0x3e
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d145      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
          HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 8003880:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	440b      	add	r3, r1
 8003894:	333f      	adds	r3, #63	@ 0x3f
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f004 f813 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
        if (hhcd->hc[ch_num & 0xFU].doublebuffer == 0U)
 80038a4:	e032      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
      else if ((ch_reg & USB_CH_TX_STTX) == USB_CH_TX_STALL)
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d120      	bne.n	80038f2 <HCD_HC_OUT_IRQHandler+0x53a>
        (void) HAL_HCD_HC_Halt(hhcd, (uint8_t)ch_num);
 80038b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd ffda 	bl	8001870 <HAL_HCD_HC_Halt>
        hhcd->hc[ch_num & 0xFU].state = HC_STALL;
 80038bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038c0:	f003 020f 	and.w	r2, r3, #15
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	440b      	add	r3, r1
 80038d0:	3340      	adds	r3, #64	@ 0x40
 80038d2:	2206      	movs	r2, #6
 80038d4:	701a      	strb	r2, [r3, #0]
        hhcd->hc[ch_num & 0xFU].urb_state = URB_STALL;
 80038d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038da:	f003 020f 	and.w	r2, r3, #15
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	440b      	add	r3, r1
 80038ea:	333f      	adds	r3, #63	@ 0x3f
 80038ec:	2205      	movs	r2, #5
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e00c      	b.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
      else if ((ch_reg & USB_CH_TX_STTX) == USB_CH_TX_ACK_DBUF)
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038f8:	2b30      	cmp	r3, #48	@ 0x30
 80038fa:	d107      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x554>
        (void) HCD_HC_OUT_BulkDb(hhcd, ch_num, (uint8_t)phy_chnum, ch_reg);
 80038fc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003900:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe fb1e 	bl	8001f48 <HCD_HC_OUT_BulkDb>
      if ((ch_reg & USB_CH_TX_STTX) != USB_CH_TX_NAK)
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003912:	2b20      	cmp	r3, #32
 8003914:	d011      	beq.n	800393a <HCD_HC_OUT_IRQHandler+0x582>
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	440b      	add	r3, r1
 800392a:	333f      	adds	r3, #63	@ 0x3f
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f003 ffc8 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
      HCD_CLEAR_TX_CH_CTR(hhcd->Instance, phy_chnum);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HCD_HC_OUT_IRQHandler+0x6e0>)
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	e091      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x6d4>
    hhcd->hc[ch_num & 0xFU].ErrCnt++;
 8003968:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800396c:	f003 020f 	and.w	r2, r3, #15
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	1c51      	adds	r1, r2, #1
 8003974:	460b      	mov	r3, r1
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	440b      	add	r3, r1
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4403      	add	r3, r0
 800397e:	3304      	adds	r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	3201      	adds	r2, #1
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4403      	add	r3, r0
 8003992:	3304      	adds	r3, #4
 8003994:	6019      	str	r1, [r3, #0]
    if (hhcd->hc[ch_num & 0xFU].ErrCnt > 3U)
 8003996:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	440b      	add	r3, r1
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d925      	bls.n	8003a00 <HCD_HC_OUT_IRQHandler+0x648>
      HCD_SET_CH_TX_STATUS(hhcd->Instance, phy_chnum, USB_CH_TX_DIS);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b35      	ldr	r3, [pc, #212]	@ (8003a9c <HCD_HC_OUT_IRQHandler+0x6e4>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	441a      	add	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num & 0xFU].urb_state = URB_ERROR;
 80039e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	440b      	add	r3, r1
 80039f8:	333f      	adds	r3, #63	@ 0x3f
 80039fa:	2204      	movs	r2, #4
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e00c      	b.n	8003a1a <HCD_HC_OUT_IRQHandler+0x662>
      hhcd->hc[ch_num & 0xFU].urb_state = URB_NOTREADY;
 8003a00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4413      	add	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	440b      	add	r3, r1
 8003a14:	333f      	adds	r3, #63	@ 0x3f
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num & 0xFU].state = HC_XACTERR;
 8003a1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3340      	adds	r3, #64	@ 0x40
 8003a30:	2207      	movs	r2, #7
 8003a32:	701a      	strb	r2, [r3, #0]
    HCD_CLEAR_TX_CH_ERR(hhcd->Instance, phy_chnum);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	4b15      	ldr	r3, [pc, #84]	@ (8003aa0 <HCD_HC_OUT_IRQHandler+0x6e8>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	601a      	str	r2, [r3, #0]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num & 0xFU].urb_state);
 8003a68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	440b      	add	r3, r1
 8003a7c:	333f      	adds	r3, #63	@ 0x3f
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f003 ff1f 	bl	80078ca <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a8c:	bf00      	nop
 8003a8e:	3730      	adds	r7, #48	@ 0x30
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	077f8f8f 	.word	0x077f8f8f
 8003a98:	07ff8f0f 	.word	0x07ff8f0f
 8003a9c:	07ff8fbf 	.word	0x07ff8fbf
 8003aa0:	01ff0f0f 	.word	0x01ff0f0f

08003aa4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd  HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t FnrReg = hhcd->Instance->FNR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint32_t IstrReg = hhcd->Instance->ISTR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	60bb      	str	r3, [r7, #8]

  /* SE0 detected USB Disconnected state */
  if ((FnrReg & (USB_FNR_RXDP | USB_FNR_RXDM)) == 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d111      	bne.n	8003aea <HCD_Port_IRQHandler+0x46>
  {
    /* Host Port State */
    hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

    /* clear all allocated virtual channel */
    HAL_HCD_ClearPhyChannel(hhcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa47 	bl	8003f62 <HAL_HCD_ClearPhyChannel>

    /* Reset the PMA current pointer */
    (void)HAL_HCD_PMAReset(hhcd);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fbfc 	bl	80042d2 <HAL_HCD_PMAReset>

    /* reset Ep0 Pma allocation state */
    hhcd->ep0_PmaAllocState = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

    /* Disconnection Callback */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->DisconnectCallback(hhcd);
#else
    HAL_HCD_Disconnect_Callback(hhcd);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f003 fee3 	bl	80078ae <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

    return;
 8003ae8:	e036      	b.n	8003b58 <HCD_Port_IRQHandler+0xb4>
  }

  if ((hhcd->HostState == HCD_HCD_STATE_DISCONNECTED) != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HCD_Port_IRQHandler+0x54>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <HCD_Port_IRQHandler+0x56>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d011      	beq.n	8003b22 <HCD_Port_IRQHandler+0x7e>
  {
    /* J-state or K-state detected & LastState=Disconnected */
    if (((FnrReg & USB_FNR_RXDP) != 0U) || ((IstrReg & USB_ISTR_LS_DCONN) != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HCD_Port_IRQHandler+0x6e>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d022      	beq.n	8003b58 <HCD_Port_IRQHandler+0xb4>
    {
      hhcd->HostState = HCD_HCD_STATE_CONNECTED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f003 feb9 	bl	8007892 <HAL_HCD_Connect_Callback>
 8003b20:	e01a      	b.n	8003b58 <HCD_Port_IRQHandler+0xb4>
    }
  }
  else
  {
    /* J-state or K-state detected & lastState=Connected: a Missed disconnection is detected */
    if (((FnrReg & USB_FNR_RXDP) != 0U) || ((IstrReg & USB_ISTR_LS_DCONN) != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HCD_Port_IRQHandler+0x92>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HCD_Port_IRQHandler+0xb4>
    {
      /* Host Port State */
      hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

      /* clear all allocated virtual channel */
      HAL_HCD_ClearPhyChannel(hhcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa0f 	bl	8003f62 <HAL_HCD_ClearPhyChannel>

      /* Reset the PMA current pointer */
      (void)HAL_HCD_PMAReset(hhcd);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fbc4 	bl	80042d2 <HAL_HCD_PMAReset>

      /* reset Ep0 PMA allocation state */
      hhcd->ep0_PmaAllocState = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

      /* Disconnection Callback */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f003 feab 	bl	80078ae <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }
}
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_HCD_Check_usedChannel>:
  * @param  ch_num  Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
static uint8_t HAL_HCD_Check_usedChannel(HCD_HandleTypeDef const *hhcd, uint8_t ch_num)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	460b      	mov	r3, r1
 8003b68:	70fb      	strb	r3, [r7, #3]
  uint8_t idx;

  /* Check if the logical channel are already opened  */
  for (idx = 0U; idx < hhcd->Init.Host_channels; idx++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e03a      	b.n	8003be6 <HAL_HCD_Check_usedChannel+0x88>
  {
    if ((((hhcd->phy_chin_state[idx] & 0xF0U) >> 4U) == ((uint16_t)ch_num + 1U)) &&
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003b78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	3301      	adds	r3, #1
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10e      	bne.n	8003ba8 <HAL_HCD_Check_usedChannel+0x4a>
        (hhcd->phy_chin_state[idx] != 0U))
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003b92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if ((((hhcd->phy_chin_state[idx] & 0xF0U) >> 4U) == ((uint16_t)ch_num + 1U)) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_HCD_Check_usedChannel+0x4a>
    {
      return (1U | (idx << 4U));
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e024      	b.n	8003bf2 <HAL_HCD_Check_usedChannel+0x94>
    }

    if ((((hhcd->phy_chout_state[idx] & 0xF0U) >> 4U) == ((uint16_t)ch_num + 1U)) &&
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003bb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 020f 	and.w	r2, r3, #15
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10e      	bne.n	8003be0 <HAL_HCD_Check_usedChannel+0x82>
        (hhcd->phy_chout_state[idx] != 0U))
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if ((((hhcd->phy_chout_state[idx] & 0xF0U) >> 4U) == ((uint16_t)ch_num + 1U)) &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_HCD_Check_usedChannel+0x82>
    {
      return (1U | (idx << 4U));
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e008      	b.n	8003bf2 <HAL_HCD_Check_usedChannel+0x94>
  for (idx = 0U; idx < hhcd->Init.Host_channels; idx++)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	3301      	adds	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	795b      	ldrb	r3, [r3, #5]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3bf      	bcc.n	8003b70 <HAL_HCD_Check_usedChannel+0x12>
    }
  }

  return 0U;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_HCD_GetLogical_Channel>:
  *         -1 IN_Channel
  * @retval HAL status
  */
static uint8_t HAL_HCD_GetLogical_Channel(HCD_HandleTypeDef const *hhcd,
                                          uint8_t phy_chnum, uint8_t dir)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	70bb      	strb	r3, [r7, #2]
  /* Out Channel Direction */
  if (dir == 0U)
 8003c0e:	78bb      	ldrb	r3, [r7, #2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11e      	bne.n	8003c52 <HAL_HCD_GetLogical_Channel+0x54>
  {
    if (((hhcd->phy_chout_state[phy_chnum & 0x7U] & 0x00F0U) >> 4U) != 0U)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 0207 	and.w	r2, r3, #7
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003c20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00f      	beq.n	8003c4e <HAL_HCD_GetLogical_Channel+0x50>
    {
      return ((uint8_t)((hhcd->phy_chout_state[phy_chnum & 0x7U] & 0x00F0U) >> 4U) - 1U);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 0207 	and.w	r2, r3, #7
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003c3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e01f      	b.n	8003c8e <HAL_HCD_GetLogical_Channel+0x90>
    }
    else
    {
      /* Channel not registered Error */
      return HCD_LOGICAL_CH_NOT_OPENED;
 8003c4e:	23ff      	movs	r3, #255	@ 0xff
 8003c50:	e01d      	b.n	8003c8e <HAL_HCD_GetLogical_Channel+0x90>
    }
  }
  /* IN Channel Direction */
  else
  {
    if (((hhcd->phy_chin_state[phy_chnum & 0x7U] & 0x00F0U) >> 4U) != 0U)
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 0207 	and.w	r2, r3, #7
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003c5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00f      	beq.n	8003c8c <HAL_HCD_GetLogical_Channel+0x8e>
    {
      return ((uint8_t)((hhcd->phy_chin_state[phy_chnum & 0x7U] & 0x00F0U) >> 4U) - 1U);
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003c78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e000      	b.n	8003c8e <HAL_HCD_GetLogical_Channel+0x90>
    }
    else
    {
      /* Channel not registered Error */
      return HCD_LOGICAL_CH_NOT_OPENED;
 8003c8c:	23ff      	movs	r3, #255	@ 0xff
    }
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_HCD_Get_FreePhyChannel>:
  * @retval if physical channel is available return Phy_channel number
         else return HCD_FREE_CH_NOT_FOUND
  */
static uint8_t HAL_HCD_Get_FreePhyChannel(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                                          uint8_t epnum, uint8_t ep_type)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	70fb      	strb	r3, [r7, #3]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70bb      	strb	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  if ((epnum & 0x7FU) == 0U)
 8003cb4:	78bb      	ldrb	r3, [r7, #2]
 8003cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 80a3 	bne.w	8003e06 <HAL_HCD_Get_FreePhyChannel+0x16c>
  {
    idx = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

    if (ch_num == 0U)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d146      	bne.n	8003d58 <HAL_HCD_Get_FreePhyChannel+0xbe>
    {
      if (hhcd->phy_chin_state[idx] == 0U)
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003cd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d11a      	bne.n	8003d10 <HAL_HCD_Get_FreePhyChannel+0x76>
      {
        /* chin_state to store the ep_type to be used for the same channel in OUT direction
         * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	b29a      	uxth	r2, r3
                                    ((uint16_t)ep_type + 1U) |
 8003ce6:	787b      	ldrb	r3, [r7, #1]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	b29b      	uxth	r3, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b299      	uxth	r1, r3
                                    (((uint16_t)epnum & 0x0FU) << 8U);
 8003cf2:	78bb      	ldrb	r3, [r7, #2]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cfe:	b29b      	uxth	r3, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
                                    ((uint16_t)ep_type + 1U) |
 8003d02:	430b      	orrs	r3, r1
 8003d04:	b299      	uxth	r1, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003d0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      }

      if (hhcd->phy_chout_state[idx] == 0U)
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003d18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d170      	bne.n	8003e02 <HAL_HCD_Get_FreePhyChannel+0x168>
      {
        /* chout_state will store the ep_type to be used for the same channel in IN direction
         * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	b29a      	uxth	r2, r3
                                     ((uint16_t)ep_type + 1U) |
 8003d2c:	787b      	ldrb	r3, [r7, #1]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	b29b      	uxth	r3, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b299      	uxth	r1, r3
                                     (((uint16_t)epnum & 0x0FU) << 8U);
 8003d38:	78bb      	ldrb	r3, [r7, #2]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d44:	b29b      	uxth	r3, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
                                     ((uint16_t)ep_type + 1U) |
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	b299      	uxth	r1, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003d52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003d56:	e054      	b.n	8003e02 <HAL_HCD_Get_FreePhyChannel+0x168>
      }
    }
    else
    {
      if ((epnum & 0x80U) != 0U)
 8003d58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da28      	bge.n	8003db2 <HAL_HCD_Get_FreePhyChannel+0x118>
      {
        if (((hhcd->phy_chin_state[idx] & 0xF0U) >> 4U) != ((uint16_t)ch_num + 1U))
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003d68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 020f 	and.w	r2, r3, #15
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	3301      	adds	r3, #1
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d043      	beq.n	8003e02 <HAL_HCD_Get_FreePhyChannel+0x168>
        {
          /* chin_state to store the ep_type to be used for the same channel in OUT direction
           * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
          hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	b29a      	uxth	r2, r3
                                      ((uint16_t)ep_type + 1U) |
 8003d86:	787b      	ldrb	r3, [r7, #1]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	b29b      	uxth	r3, r3
          hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b299      	uxth	r1, r3
                                      (((uint16_t)epnum & 0x0FU) << 8U);
 8003d92:	78bb      	ldrb	r3, [r7, #2]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d9e:	b29b      	uxth	r3, r3
          hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
                                      ((uint16_t)ep_type + 1U) |
 8003da2:	430b      	orrs	r3, r1
 8003da4:	b299      	uxth	r1, r3
          hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003dac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003db0:	e027      	b.n	8003e02 <HAL_HCD_Get_FreePhyChannel+0x168>
        }
      }
      else
      {
        if (((hhcd->phy_chout_state[idx] & 0xF0U) >> 4U) != ((uint16_t)ch_num + 1U))
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003dba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d01a      	beq.n	8003e02 <HAL_HCD_Get_FreePhyChannel+0x168>
        {
          /* chout_state will store the ep_type to be used for the same channel in IN direction
           * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
          hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	b29a      	uxth	r2, r3
                                       ((uint16_t)ep_type + 1U) |
 8003dd8:	787b      	ldrb	r3, [r7, #1]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b29b      	uxth	r3, r3
          hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003de0:	4313      	orrs	r3, r2
 8003de2:	b299      	uxth	r1, r3
                                       (((uint16_t)epnum & 0x0FU) << 8U);
 8003de4:	78bb      	ldrb	r3, [r7, #2]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003df0:	b29b      	uxth	r3, r3
          hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
                                       ((uint16_t)ep_type + 1U) |
 8003df4:	430b      	orrs	r3, r1
 8003df6:	b299      	uxth	r1, r3
          hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003dfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
      }
    }

    return idx;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	e0a7      	b.n	8003f56 <HAL_HCD_Get_FreePhyChannel+0x2bc>
  }

  if ((epnum & 0x80U) != 0U)
 8003e06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da51      	bge.n	8003eb2 <HAL_HCD_Get_FreePhyChannel+0x218>
  {
    /* Find a new available physical in channel */
    for (idx = 1U; idx < hhcd->Init.Host_channels; idx++)
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e048      	b.n	8003ea6 <HAL_HCD_Get_FreePhyChannel+0x20c>
    {
      /* Check if the same epnum is allocated then allocate the same physical channel OUT for IN Logical Channel */
      if ((hhcd->phy_chin_state[idx] == 0U) &&
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003e1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d13d      	bne.n	8003ea0 <HAL_HCD_Get_FreePhyChannel+0x206>
          ((((hhcd->phy_chout_state[idx] & 0x000FU) == ((uint16_t)ep_type + 1U)) &&
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003e2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	3301      	adds	r3, #1
      if ((hhcd->phy_chin_state[idx] == 0U) &&
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10c      	bne.n	8003e56 <HAL_HCD_Get_FreePhyChannel+0x1bc>
            (((hhcd->phy_chout_state[idx] & 0x0F00U) == ((uint16_t)epnum & 0x0FU)))) ||
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003e44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003e4c:	78bb      	ldrb	r3, [r7, #2]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
          ((((hhcd->phy_chout_state[idx] & 0x000FU) == ((uint16_t)ep_type + 1U)) &&
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d007      	beq.n	8003e66 <HAL_HCD_Get_FreePhyChannel+0x1cc>
           (hhcd->phy_chout_state[idx] == 0U)))
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003e5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            (((hhcd->phy_chout_state[idx] & 0x0F00U) == ((uint16_t)epnum & 0x0FU)))) ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d11c      	bne.n	8003ea0 <HAL_HCD_Get_FreePhyChannel+0x206>
      {
        /* chin_state to store the ep_type to be used for the same channel in OUT direction
         * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	b29a      	uxth	r2, r3
                                    ((uint16_t)ep_type + 1U) |
 8003e72:	787b      	ldrb	r3, [r7, #1]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	b29b      	uxth	r3, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b299      	uxth	r1, r3
                                    (((uint16_t)epnum & 0x0FU) << 8U);
 8003e7e:	78bb      	ldrb	r3, [r7, #2]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e8a:	b29b      	uxth	r3, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
                                    ((uint16_t)ep_type + 1U) |
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	b299      	uxth	r1, r3
        hhcd->phy_chin_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        return idx;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	e05a      	b.n	8003f56 <HAL_HCD_Get_FreePhyChannel+0x2bc>
    for (idx = 1U; idx < hhcd->Init.Host_channels; idx++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	795b      	ldrb	r3, [r3, #5]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3b1      	bcc.n	8003e14 <HAL_HCD_Get_FreePhyChannel+0x17a>
 8003eb0:	e050      	b.n	8003f54 <HAL_HCD_Get_FreePhyChannel+0x2ba>
    }
  }
  else
  {
    /* Find a new available physical out channel */
    for (idx = 1U; idx < hhcd->Init.Host_channels; idx++)
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e048      	b.n	8003f4a <HAL_HCD_Get_FreePhyChannel+0x2b0>
    {
      /* Check if the same epnum is allocated then allocate the same physical channel IN for OUT Logical Channel */
      if ((hhcd->phy_chout_state[idx] == 0U) &&
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003ec0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13d      	bne.n	8003f44 <HAL_HCD_Get_FreePhyChannel+0x2aa>
          ((((hhcd->phy_chin_state[idx] & 0x0FU) == ((uint16_t)ep_type + 1U)) &&
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003ed0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ed4:	f003 020f 	and.w	r2, r3, #15
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	3301      	adds	r3, #1
      if ((hhcd->phy_chout_state[idx] == 0U) &&
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10c      	bne.n	8003efa <HAL_HCD_Get_FreePhyChannel+0x260>
            ((hhcd->phy_chin_state[idx] & 0x0F00U) == ((uint16_t)epnum & 0x0FU))) ||
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003ee8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003eec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003ef0:	78bb      	ldrb	r3, [r7, #2]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
          ((((hhcd->phy_chin_state[idx] & 0x0FU) == ((uint16_t)ep_type + 1U)) &&
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d007      	beq.n	8003f0a <HAL_HCD_Get_FreePhyChannel+0x270>
           (hhcd->phy_chin_state[idx] == 0U)))
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003f02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            ((hhcd->phy_chin_state[idx] & 0x0F00U) == ((uint16_t)epnum & 0x0FU))) ||
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11c      	bne.n	8003f44 <HAL_HCD_Get_FreePhyChannel+0x2aa>
      {
        /* chout_state will store the ep_type to be used for the same channel in IN direction
         * adding + 1 to ep_type avoid starting with a 0 value. ep_type take by default (0/1/2/3) */
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	b29a      	uxth	r2, r3
                                     ((uint16_t)ep_type + 1U) |
 8003f16:	787b      	ldrb	r3, [r7, #1]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	b29b      	uxth	r3, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	b299      	uxth	r1, r3
                                     (((uint16_t)epnum & 0x0FU) << 8U);
 8003f22:	78bb      	ldrb	r3, [r7, #2]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003f2e:	b29b      	uxth	r3, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
                                     ((uint16_t)ep_type + 1U) |
 8003f32:	430b      	orrs	r3, r1
 8003f34:	b299      	uxth	r1, r3
        hhcd->phy_chout_state[idx] = (((uint16_t)ch_num + 1U) << 4U) |
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003f3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        return idx;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	e008      	b.n	8003f56 <HAL_HCD_Get_FreePhyChannel+0x2bc>
    for (idx = 1U; idx < hhcd->Init.Host_channels; idx++)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	3301      	adds	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	795b      	ldrb	r3, [r3, #5]
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3b1      	bcc.n	8003eb8 <HAL_HCD_Get_FreePhyChannel+0x21e>
      }
    }
  }

  /* in case of Error */
  return HCD_FREE_CH_NOT_FOUND;
 8003f54:	23ff      	movs	r3, #255	@ 0xff
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_HCD_ClearPhyChannel>:
  * @brief  Free All Channel allocation
  * @param  hhcd HCD handle
  * @retval HAL status
  */
static void  HAL_HCD_ClearPhyChannel(HCD_HandleTypeDef *hhcd)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  uint8_t idx;

  for (idx = 0U; idx < hhcd->Init.Host_channels; idx++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
 8003f6e:	e010      	b.n	8003f92 <HAL_HCD_ClearPhyChannel+0x30>
  {
    /*Reset channel allocation value */
    hhcd->phy_chout_state[idx] = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    hhcd->phy_chin_state[idx] = 0U;
 8003f7e:	7bfa      	ldrb	r2, [r7, #15]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f502 72c6 	add.w	r2, r2, #396	@ 0x18c
 8003f86:	2100      	movs	r1, #0
 8003f88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (idx = 0U; idx < hhcd->Init.Host_channels; idx++)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	795b      	ldrb	r3, [r3, #5]
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d3e9      	bcc.n	8003f70 <HAL_HCD_ClearPhyChannel+0xe>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_HCD_GetFreePMA>:
  * @param  mps  Channel Max Packet Size
  * @retval PMA_Address of the first free block containing mps byte
            0xFFFF in case of no space available
  */
static uint16_t HAL_HCD_GetFreePMA(HCD_HandleTypeDef *hhcd, uint16_t mps)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b089      	sub	sp, #36	@ 0x24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
  uint32_t Entry;
  uint32_t FreeBlocks = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
  uint8_t FirstFreeBlock_col = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	76fb      	strb	r3, [r7, #27]
  uint8_t FirstFreeBlock_line = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	76bb      	strb	r3, [r7, #26]
  uint8_t ColIndex;
  uint16_t NbrReqBlocks;
  uint16_t mps_t = mps;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	82bb      	strh	r3, [r7, #20]

  /* since PMA buffer descriptor RXBD allocate address according to BLSIZE, BLSIZE=1==> mps>64
    allocation in PMA is done in 32Bytes each entry */
  if ((mps_t > 64U) && ((mps_t % 32U) != 0U))
 8003fc6:	8abb      	ldrh	r3, [r7, #20]
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d90c      	bls.n	8003fe6 <HAL_HCD_GetFreePMA+0x3c>
 8003fcc:	8abb      	ldrh	r3, [r7, #20]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_HCD_GetFreePMA+0x3c>
  {
    /* Align the mps to 32byte block to match the allocation in PMA,
      check Definition of allocation buffer memory in usb user spec */
    mps_t = (uint16_t)(((mps_t / 32U) + 1U) * 32U);
 8003fd8:	8abb      	ldrh	r3, [r7, #20]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	015b      	lsls	r3, r3, #5
 8003fe4:	82bb      	strh	r3, [r7, #20]
  }

  /* calculate the number of block(8byte) to allocate */
  NbrReqBlocks = mps_t / 8U;
 8003fe6:	8abb      	ldrh	r3, [r7, #20]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	82fb      	strh	r3, [r7, #22]

  /* check if we need remaining Block */
  if ((mps_t % 8U) != 0U)
 8003fec:	8abb      	ldrh	r3, [r7, #20]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_HCD_GetFreePMA+0x54>
  {
    NbrReqBlocks++;
 8003ff8:	8afb      	ldrh	r3, [r7, #22]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	82fb      	strh	r3, [r7, #22]
  }

  /* Look For NbrReqBlocks * Empty Block */
  for (uint8_t i = 0U; ((i < PMA_BLOCKS) && (FreeBlocks != NbrReqBlocks)); i++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	74fb      	strb	r3, [r7, #19]
 8004002:	e05e      	b.n	80040c2 <HAL_HCD_GetFreePMA+0x118>
  {
    Entry = hhcd->PMALookupTable[i];
 8004004:	7cfa      	ldrb	r2, [r7, #19]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	32ce      	adds	r2, #206	@ 0xce
 800400a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800400e:	60fb      	str	r3, [r7, #12]

    /* when parse is in progress, check the first col to look for a contiguous block */
    if ((FreeBlocks != 0U) && ((Entry & (uint32_t)1U) != 0U))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_HCD_GetFreePMA+0x7a>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_HCD_GetFreePMA+0x7a>
    {
      FreeBlocks = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
    }
    uint8_t j = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	74bb      	strb	r3, [r7, #18]
    while ((j <= 31U) && (FreeBlocks != NbrReqBlocks))
 8004028:	e041      	b.n	80040ae <HAL_HCD_GetFreePMA+0x104>
    {
      /* check if block j is free */
      if ((Entry & ((uint32_t)1U << j)) == 0U)
 800402a:	7cbb      	ldrb	r3, [r7, #18]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d136      	bne.n	80040a8 <HAL_HCD_GetFreePMA+0xfe>
      {
        if (FreeBlocks == 0U)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_HCD_GetFreePMA+0xa4>
        {
          FirstFreeBlock_col = j;
 8004040:	7cbb      	ldrb	r3, [r7, #18]
 8004042:	76fb      	strb	r3, [r7, #27]
          FirstFreeBlock_line = i;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	76bb      	strb	r3, [r7, #26]
          FreeBlocks++;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3301      	adds	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
        }
        j++;
 800404e:	7cbb      	ldrb	r3, [r7, #18]
 8004050:	3301      	adds	r3, #1
 8004052:	74bb      	strb	r3, [r7, #18]

        /* Parse Column PMALockTable */
        while ((j <= 31U) && ((Entry & ((uint32_t)1U << j)) == 0U) && (FreeBlocks < NbrReqBlocks))
 8004054:	e005      	b.n	8004062 <HAL_HCD_GetFreePMA+0xb8>
        {
          FreeBlocks++;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3301      	adds	r3, #1
 800405a:	61fb      	str	r3, [r7, #28]
          j++;
 800405c:	7cbb      	ldrb	r3, [r7, #18]
 800405e:	3301      	adds	r3, #1
 8004060:	74bb      	strb	r3, [r7, #18]
        while ((j <= 31U) && ((Entry & ((uint32_t)1U << j)) == 0U) && (FreeBlocks < NbrReqBlocks))
 8004062:	7cbb      	ldrb	r3, [r7, #18]
 8004064:	2b1f      	cmp	r3, #31
 8004066:	d80b      	bhi.n	8004080 <HAL_HCD_GetFreePMA+0xd6>
 8004068:	7cbb      	ldrb	r3, [r7, #18]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_HCD_GetFreePMA+0xd6>
 8004078:	8afb      	ldrh	r3, [r7, #22]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	429a      	cmp	r2, r3
 800407e:	d3ea      	bcc.n	8004056 <HAL_HCD_GetFreePMA+0xac>
        }

        /* Free contiguous Blocks not found */
        if (((FreeBlocks < NbrReqBlocks) && (j < 31U)) ||
 8004080:	8afb      	ldrh	r3, [r7, #22]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	429a      	cmp	r2, r3
 8004086:	d202      	bcs.n	800408e <HAL_HCD_GetFreePMA+0xe4>
 8004088:	7cbb      	ldrb	r3, [r7, #18]
 800408a:	2b1e      	cmp	r3, #30
 800408c:	d90a      	bls.n	80040a4 <HAL_HCD_GetFreePMA+0xfa>
 800408e:	7cbb      	ldrb	r3, [r7, #18]
 8004090:	2b1f      	cmp	r3, #31
 8004092:	d109      	bne.n	80040a8 <HAL_HCD_GetFreePMA+0xfe>
            ((j == 31U) && ((Entry & ((uint32_t)1U << j)) != 0U)))
 8004094:	7cbb      	ldrb	r3, [r7, #18]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_HCD_GetFreePMA+0xfe>
        {
          FreeBlocks = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
        }
      }
      j++;
 80040a8:	7cbb      	ldrb	r3, [r7, #18]
 80040aa:	3301      	adds	r3, #1
 80040ac:	74bb      	strb	r3, [r7, #18]
    while ((j <= 31U) && (FreeBlocks != NbrReqBlocks))
 80040ae:	7cbb      	ldrb	r3, [r7, #18]
 80040b0:	2b1f      	cmp	r3, #31
 80040b2:	d803      	bhi.n	80040bc <HAL_HCD_GetFreePMA+0x112>
 80040b4:	8afb      	ldrh	r3, [r7, #22]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1b6      	bne.n	800402a <HAL_HCD_GetFreePMA+0x80>
  for (uint8_t i = 0U; ((i < PMA_BLOCKS) && (FreeBlocks != NbrReqBlocks)); i++)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	3301      	adds	r3, #1
 80040c0:	74fb      	strb	r3, [r7, #19]
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b07      	cmp	r3, #7
 80040c6:	d803      	bhi.n	80040d0 <HAL_HCD_GetFreePMA+0x126>
 80040c8:	8afb      	ldrh	r3, [r7, #22]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d199      	bne.n	8004004 <HAL_HCD_GetFreePMA+0x5a>
    } /* end for j */
  } /* end for i */

  /* Free block found */
  if (FreeBlocks >= NbrReqBlocks)
 80040d0:	8afb      	ldrh	r3, [r7, #22]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d33a      	bcc.n	800414e <HAL_HCD_GetFreePMA+0x1a4>
  {
    ColIndex = FirstFreeBlock_col;
 80040d8:	7efb      	ldrb	r3, [r7, #27]
 80040da:	767b      	strb	r3, [r7, #25]

    for (uint8_t i = FirstFreeBlock_line; ((i < PMA_BLOCKS) && (FreeBlocks > 0U)); i++)
 80040dc:	7ebb      	ldrb	r3, [r7, #26]
 80040de:	747b      	strb	r3, [r7, #17]
 80040e0:	e024      	b.n	800412c <HAL_HCD_GetFreePMA+0x182>
    {
      for (uint8_t j = ColIndex; j <= 31U; j++)
 80040e2:	7e7b      	ldrb	r3, [r7, #25]
 80040e4:	743b      	strb	r3, [r7, #16]
 80040e6:	e017      	b.n	8004118 <HAL_HCD_GetFreePMA+0x16e>
      {
        hhcd->PMALookupTable[i] |= ((uint32_t)1U << j);
 80040e8:	7c7a      	ldrb	r2, [r7, #17]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	32ce      	adds	r2, #206	@ 0xce
 80040ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040f2:	7c3b      	ldrb	r3, [r7, #16]
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	7c7a      	ldrb	r2, [r7, #17]
 80040fc:	4319      	orrs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	32ce      	adds	r2, #206	@ 0xce
 8004102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (--FreeBlocks == 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b01      	subs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <HAL_HCD_GetFreePMA+0x176>
      for (uint8_t j = ColIndex; j <= 31U; j++)
 8004112:	7c3b      	ldrb	r3, [r7, #16]
 8004114:	3301      	adds	r3, #1
 8004116:	743b      	strb	r3, [r7, #16]
 8004118:	7c3b      	ldrb	r3, [r7, #16]
 800411a:	2b1f      	cmp	r3, #31
 800411c:	d9e4      	bls.n	80040e8 <HAL_HCD_GetFreePMA+0x13e>
 800411e:	e000      	b.n	8004122 <HAL_HCD_GetFreePMA+0x178>
        {
          break;
 8004120:	bf00      	nop
        }
      }
      ColIndex = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	767b      	strb	r3, [r7, #25]
    for (uint8_t i = FirstFreeBlock_line; ((i < PMA_BLOCKS) && (FreeBlocks > 0U)); i++)
 8004126:	7c7b      	ldrb	r3, [r7, #17]
 8004128:	3301      	adds	r3, #1
 800412a:	747b      	strb	r3, [r7, #17]
 800412c:	7c7b      	ldrb	r3, [r7, #17]
 800412e:	2b07      	cmp	r3, #7
 8004130:	d802      	bhi.n	8004138 <HAL_HCD_GetFreePMA+0x18e>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1d4      	bne.n	80040e2 <HAL_HCD_GetFreePMA+0x138>
    }

    return (uint16_t)((FirstFreeBlock_line * (uint16_t)256U) + (FirstFreeBlock_col * (uint16_t)8U));
 8004138:	7ebb      	ldrb	r3, [r7, #26]
 800413a:	b29b      	uxth	r3, r3
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	b29a      	uxth	r2, r3
 8004140:	7efb      	ldrb	r3, [r7, #27]
 8004142:	b29b      	uxth	r3, r3
 8004144:	4413      	add	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	b29b      	uxth	r3, r3
 800414c:	e001      	b.n	8004152 <HAL_HCD_GetFreePMA+0x1a8>
  }
  else
  {
    return 0xFFFFU;
 800414e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	@ 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_HCD_PMAlloc>:
  * @param  mps Channel Max Packet Size
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HCD_PMAlloc(HCD_HandleTypeDef *hhcd, uint8_t ch_num,
                                   uint16_t ch_kind, uint16_t mps)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	461a      	mov	r2, r3
 800416c:	4603      	mov	r3, r0
 800416e:	72fb      	strb	r3, [r7, #11]
 8004170:	460b      	mov	r3, r1
 8004172:	813b      	strh	r3, [r7, #8]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
#if (USE_USB_DOUBLE_BUFFER == 1U)
  uint16_t pma_addr1; /* used for double buffer mode if enabled */
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* Host Channel */
  HCD_HCTypeDef *hc = &(hhcd->hc[ch_num]);
 8004178:	7afa      	ldrb	r2, [r7, #11]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	3310      	adds	r3, #16
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	617b      	str	r3, [r7, #20]

  /* Get a FreePMA Address */
  pma_addr0 = HAL_HCD_GetFreePMA(hhcd, mps);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4619      	mov	r1, r3
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff0a 	bl	8003faa <HAL_HCD_GetFreePMA>
 8004196:	4603      	mov	r3, r0
 8004198:	827b      	strh	r3, [r7, #18]

  /* If there is no free space to allocate */
  if (pma_addr0 == 0xFFFFU)
 800419a:	8a7b      	ldrh	r3, [r7, #18]
 800419c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_HCD_PMAlloc+0x4a>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e090      	b.n	80042ca <HAL_HCD_PMAlloc+0x16c>
  }
  else
  {
    /* Here we check if the endpoint is single or double Buffer */
    if (ch_kind == HCD_SNG_BUF)
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d14f      	bne.n	800424e <HAL_HCD_PMAlloc+0xf0>
    {
      /* Single Buffer */
      hc->doublebuffer = 0U;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

      if (hc->ep_num == 0U)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	789b      	ldrb	r3, [r3, #2]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d118      	bne.n	80041f0 <HAL_HCD_PMAlloc+0x92>
      {
        hhcd->ep0_PmaAllocState &= 0xFFF0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8d3 2314 	ldr.w	r2, [r3, #788]	@ 0x314
 80041c4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80041c8:	4013      	ands	r3, r2
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f8c2 3314 	str.w	r3, [r2, #788]	@ 0x314
        hhcd->ep0_PmaAllocState |= ch_num;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8d3 2314 	ldr.w	r2, [r3, #788]	@ 0x314
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
        hhcd->ep0_PmaAllocState |= (1U << 8);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 80041e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
      }

      /* Configure the PMA */
      if (hc->ch_dir == CH_IN_DIR)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	78db      	ldrb	r3, [r3, #3]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d119      	bne.n	800422c <HAL_HCD_PMAlloc+0xce>
      {
        hc->pmaaddr1 = pma_addr0;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	8a7a      	ldrh	r2, [r7, #18]
 80041fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        (USB_DRD_PMA_BUFF + hc->phy_ch_num)->RXBD = hc->pmaaddr1;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800420c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004210:	605a      	str	r2, [r3, #4]

        if (hc->ep_num == 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	789b      	ldrb	r3, [r3, #2]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d115      	bne.n	8004246 <HAL_HCD_PMAlloc+0xe8>
        {
          hhcd->ep0_PmaAllocState |= (CH_IN_DIR << 4);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 8004220:	f043 0210 	orr.w	r2, r3, #16
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
 800422a:	e00c      	b.n	8004246 <HAL_HCD_PMAlloc+0xe8>
        }
      }
      else
      {
        hc->pmaaddr0 = pma_addr0;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	8a7a      	ldrh	r2, [r7, #18]
 8004230:	84da      	strh	r2, [r3, #38]	@ 0x26
        (USB_DRD_PMA_BUFF + hc->phy_ch_num)->TXBD = hc->pmaaddr0;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004244:	601a      	str	r2, [r3, #0]
      }

      /* Set the PmaAddress */
      hc->pmaadress = pma_addr0;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	8a7a      	ldrh	r2, [r7, #18]
 800424a:	849a      	strh	r2, [r3, #36]	@ 0x24
 800424c:	e03c      	b.n	80042c8 <HAL_HCD_PMAlloc+0x16a>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else /* USB_DBL_BUF */
    {
      /* Double Buffer Endpoint */
      hc->doublebuffer = 1U;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

      /* Get a FreePMA Address for buffer 2 */
      pma_addr1 = HAL_HCD_GetFreePMA(hhcd, mps);
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	4619      	mov	r1, r3
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fea5 	bl	8003faa <HAL_HCD_GetFreePMA>
 8004260:	4603      	mov	r3, r0
 8004262:	823b      	strh	r3, [r7, #16]

      if (pma_addr1 == 0xFFFFU)
 8004264:	8a3b      	ldrh	r3, [r7, #16]
 8004266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800426a:	4293      	cmp	r3, r2
 800426c:	d107      	bne.n	800427e <HAL_HCD_PMAlloc+0x120>
      {
        /* Free the first buffer */
        (void)HAL_HCD_PMAFree(hhcd, pma_addr0, mps);
 800426e:	8a7b      	ldrh	r3, [r7, #18]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	4619      	mov	r1, r3
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f85c 	bl	8004332 <HAL_HCD_PMAFree>
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e025      	b.n	80042ca <HAL_HCD_PMAlloc+0x16c>
      }
      else
      {
        /* Configure the PMA */
        hc->pmaaddr0 = (uint16_t)(pma_addr0);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	8a7a      	ldrh	r2, [r7, #18]
 8004282:	84da      	strh	r2, [r3, #38]	@ 0x26
        hc->pmaaddr1 = (uint16_t)(pma_addr1);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	8a3a      	ldrh	r2, [r7, #16]
 8004288:	851a      	strh	r2, [r3, #40]	@ 0x28

        /* Set Buffer0 pma address */
        (USB_DRD_PMA_BUFF + hc->phy_ch_num)->TXBD = pma_addr0;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004294:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004298:	8a7a      	ldrh	r2, [r7, #18]
 800429a:	601a      	str	r2, [r3, #0]

        /* Set Buffer1 pma address */
        (USB_DRD_PMA_BUFF + hc->phy_ch_num)->RXBD = pma_addr1;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	785b      	ldrb	r3, [r3, #1]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042aa:	8a3a      	ldrh	r2, [r7, #16]
 80042ac:	605a      	str	r2, [r3, #4]

        /* Used for Bulk DB MPS < 64bytes */
        if (hc->ch_dir == CH_IN_DIR)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	78db      	ldrb	r3, [r3, #3]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d104      	bne.n	80042c0 <HAL_HCD_PMAlloc+0x162>
        {
          hc->pmaadress = hc->pmaaddr1;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	849a      	strh	r2, [r3, #36]	@ 0x24
 80042be:	e003      	b.n	80042c8 <HAL_HCD_PMAlloc+0x16a>
        }
        else
        {
          hc->pmaadress = hc->pmaaddr0;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	849a      	strh	r2, [r3, #36]	@ 0x24
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_HCD_PMAReset>:
  * @brief  PMA Reset
  * @param  hhcd  Host instance
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HCD_PMAReset(HCD_HandleTypeDef *hhcd)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Reset All PMA Entry */
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
 80042de:	e008      	b.n	80042f2 <HAL_HCD_PMAReset+0x20>
  {
    hhcd->PMALookupTable[i] = 0U;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	32ce      	adds	r2, #206	@ 0xce
 80042e6:	2100      	movs	r1, #0
 80042e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	3301      	adds	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b07      	cmp	r3, #7
 80042f6:	d9f3      	bls.n	80042e0 <HAL_HCD_PMAReset+0xe>
  }

  /* Allocate a Space for buffer descriptor table depending on the Host channel number */
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	73bb      	strb	r3, [r7, #14]
 80042fc:	e00d      	b.n	800431a <HAL_HCD_PMAReset+0x48>
  {
    hhcd->PMALookupTable[0] |= ((uint32_t)1U << i);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 2338 	ldr.w	r2, [r3, #824]	@ 0x338
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 8004314:	7bbb      	ldrb	r3, [r7, #14]
 8004316:	3301      	adds	r3, #1
 8004318:	73bb      	strb	r3, [r7, #14]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	795b      	ldrb	r3, [r3, #5]
 800431e:	7bba      	ldrb	r2, [r7, #14]
 8004320:	429a      	cmp	r2, r3
 8004322:	d3ec      	bcc.n	80042fe <HAL_HCD_PMAReset+0x2c>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_HCD_PMAFree>:
  * @param  pma_base PMA base offset stored in hhcd->hc.pmaaddr
  * @param  mps  Max Packet Size
  * @retval HAL status
  */
static HAL_StatusTypeDef  HAL_HCD_PMAFree(HCD_HandleTypeDef *hhcd, uint32_t pma_base, uint16_t mps)
{
 8004332:	b480      	push	{r7}
 8004334:	b089      	sub	sp, #36	@ 0x24
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	4613      	mov	r3, r2
 800433e:	80fb      	strh	r3, [r7, #6]
  uint32_t block_nbr;
  uint8_t ColIndex;
  uint8_t LineIndex;
  uint16_t mps_t = mps;
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	833b      	strh	r3, [r7, #24]

  /* since PMA buffer descriptor RXBD allocate address according to BLSIZE, BLSIZE=1==> mps>64
    allocation in PMA is done in 32Bytes each entry */
  if ((mps_t > 64U) && ((mps_t % 32U) != 0U))
 8004344:	8b3b      	ldrh	r3, [r7, #24]
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d90c      	bls.n	8004364 <HAL_HCD_PMAFree+0x32>
 800434a:	8b3b      	ldrh	r3, [r7, #24]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <HAL_HCD_PMAFree+0x32>
  {
    /* Align the mps to 32byte block to match the allocation in PMA,
      check Definition of allocation buffer memory in usb user spec */
    mps_t = (uint16_t)(((mps_t / 32U) + 1U) * 32U);
 8004356:	8b3b      	ldrh	r3, [r7, #24]
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	b29b      	uxth	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	b29b      	uxth	r3, r3
 8004360:	015b      	lsls	r3, r3, #5
 8004362:	833b      	strh	r3, [r7, #24]
  }

  /* Calculate the number of needed block to Free */
  if ((mps_t / 8U) != 0U)
 8004364:	8b3b      	ldrh	r3, [r7, #24]
 8004366:	2b07      	cmp	r3, #7
 8004368:	d90d      	bls.n	8004386 <HAL_HCD_PMAFree+0x54>
  {
    block_nbr = ((uint32_t)mps_t / 8U);
 800436a:	8b3b      	ldrh	r3, [r7, #24]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	b29b      	uxth	r3, r3
 8004370:	61fb      	str	r3, [r7, #28]

    if ((mps_t % 8U) != 0U)
 8004372:	8b3b      	ldrh	r3, [r7, #24]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_HCD_PMAFree+0x58>
    {
      block_nbr++;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3301      	adds	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e001      	b.n	800438a <HAL_HCD_PMAFree+0x58>
    }
  }
  else
  {
    block_nbr = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
  }

  /* Decode Col/Line of PMA_Base position in the PMA_LookupTable */
  if (pma_base > 256U)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004390:	d909      	bls.n	80043a6 <HAL_HCD_PMAFree+0x74>
  {
    LineIndex = (uint8_t)(pma_base / 256U);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	76bb      	strb	r3, [r7, #26]
    ColIndex = (uint8_t)((pma_base - ((uint32_t)LineIndex * 256U)) / 8U);
 8004398:	7ebb      	ldrb	r3, [r7, #26]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	08db      	lsrs	r3, r3, #3
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e004      	b.n	80043b0 <HAL_HCD_PMAFree+0x7e>
  }
  else
  {
    LineIndex = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	76bb      	strb	r3, [r7, #26]
    ColIndex = (uint8_t)(pma_base / 8U);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	08db      	lsrs	r3, r3, #3
 80043ae:	76fb      	strb	r3, [r7, #27]
  }

  /* Reset the corresponding bit in the lookupTable */
  for (uint8_t i = LineIndex; ((i < PMA_BLOCKS) && (block_nbr > 0U)); i++)
 80043b0:	7ebb      	ldrb	r3, [r7, #26]
 80043b2:	75fb      	strb	r3, [r7, #23]
 80043b4:	e033      	b.n	800441e <HAL_HCD_PMAFree+0xec>
  {
    for (uint8_t j = ColIndex; j <= 31U; j++)
 80043b6:	7efb      	ldrb	r3, [r7, #27]
 80043b8:	75bb      	strb	r3, [r7, #22]
 80043ba:	e026      	b.n	800440a <HAL_HCD_PMAFree+0xd8>
    {
      /* Check if the block is not already reserved or it was already closed */
      if ((hhcd->PMALookupTable[i] & ((uint32_t)1U << j)) == 0U)
 80043bc:	7dfa      	ldrb	r2, [r7, #23]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	32ce      	adds	r2, #206	@ 0xce
 80043c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043c6:	7dbb      	ldrb	r3, [r7, #22]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_HCD_PMAFree+0xa6>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e029      	b.n	800442c <HAL_HCD_PMAFree+0xfa>
      }
      /* Free the reserved block by resetting the corresponding bit */
      hhcd->PMALookupTable[i] &= ~(1U << j);
 80043d8:	7dfa      	ldrb	r2, [r7, #23]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	32ce      	adds	r2, #206	@ 0xce
 80043de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043e2:	7dbb      	ldrb	r3, [r7, #22]
 80043e4:	2201      	movs	r2, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	7dfa      	ldrb	r2, [r7, #23]
 80043ee:	4019      	ands	r1, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	32ce      	adds	r2, #206	@ 0xce
 80043f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      if (--block_nbr == 0U)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d006      	beq.n	8004412 <HAL_HCD_PMAFree+0xe0>
    for (uint8_t j = ColIndex; j <= 31U; j++)
 8004404:	7dbb      	ldrb	r3, [r7, #22]
 8004406:	3301      	adds	r3, #1
 8004408:	75bb      	strb	r3, [r7, #22]
 800440a:	7dbb      	ldrb	r3, [r7, #22]
 800440c:	2b1f      	cmp	r3, #31
 800440e:	d9d5      	bls.n	80043bc <HAL_HCD_PMAFree+0x8a>
 8004410:	e000      	b.n	8004414 <HAL_HCD_PMAFree+0xe2>
      {
        break;
 8004412:	bf00      	nop
      }
    }
    ColIndex = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	76fb      	strb	r3, [r7, #27]
  for (uint8_t i = LineIndex; ((i < PMA_BLOCKS) && (block_nbr > 0U)); i++)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	3301      	adds	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b07      	cmp	r3, #7
 8004422:	d802      	bhi.n	800442a <HAL_HCD_PMAFree+0xf8>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1c5      	bne.n	80043b6 <HAL_HCD_PMAFree+0x84>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3724      	adds	r7, #36	@ 0x24
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f000 bc28 	b.w	8004c9c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444c:	4b94      	ldr	r3, [pc, #592]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	f003 0318 	and.w	r3, r3, #24
 8004454:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004456:	4b92      	ldr	r3, [pc, #584]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b08      	cmp	r3, #8
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x46>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b18      	cmp	r3, #24
 8004476:	d114      	bne.n	80044a2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d111      	bne.n	80044a2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f000 bc08 	b.w	8004c9c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800448c:	4b84      	ldr	r3, [pc, #528]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	4981      	ldr	r1, [pc, #516]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800449c:	4313      	orrs	r3, r2
 800449e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80044a0:	e040      	b.n	8004524 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d023      	beq.n	80044f2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044aa:	4b7d      	ldr	r3, [pc, #500]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7c      	ldr	r2, [pc, #496]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fc fa3f 	bl	8000938 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80044be:	f7fc fa3b 	bl	8000938 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e3e5      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80044d0:	4b73      	ldr	r3, [pc, #460]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80044dc:	4b70      	ldr	r3, [pc, #448]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	496d      	ldr	r1, [pc, #436]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	618b      	str	r3, [r1, #24]
 80044f0:	e018      	b.n	8004524 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044f2:	4b6b      	ldr	r3, [pc, #428]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6a      	ldr	r2, [pc, #424]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80044f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fc fa1b 	bl	8000938 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004506:	f7fc fa17 	bl	8000938 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e3c1      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004518:	4b61      	ldr	r3, [pc, #388]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a0 	beq.w	8004672 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d005      	beq.n	8004544 <HAL_RCC_OscConfig+0x10c>
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b18      	cmp	r3, #24
 800453c:	d109      	bne.n	8004552 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	f040 8092 	bne.w	8004672 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e3a4      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455a:	d106      	bne.n	800456a <HAL_RCC_OscConfig+0x132>
 800455c:	4b50      	ldr	r3, [pc, #320]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a4f      	ldr	r2, [pc, #316]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	e058      	b.n	800461c <HAL_RCC_OscConfig+0x1e4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d112      	bne.n	8004598 <HAL_RCC_OscConfig+0x160>
 8004572:	4b4b      	ldr	r3, [pc, #300]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a4a      	ldr	r2, [pc, #296]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b48      	ldr	r3, [pc, #288]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a47      	ldr	r2, [pc, #284]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004584:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b45      	ldr	r3, [pc, #276]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a44      	ldr	r2, [pc, #272]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004590:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e041      	b.n	800461c <HAL_RCC_OscConfig+0x1e4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a0:	d112      	bne.n	80045c8 <HAL_RCC_OscConfig+0x190>
 80045a2:	4b3f      	ldr	r3, [pc, #252]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a3e      	ldr	r2, [pc, #248]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b3c      	ldr	r3, [pc, #240]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3b      	ldr	r2, [pc, #236]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b39      	ldr	r3, [pc, #228]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a38      	ldr	r2, [pc, #224]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e029      	b.n	800461c <HAL_RCC_OscConfig+0x1e4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80045d0:	d112      	bne.n	80045f8 <HAL_RCC_OscConfig+0x1c0>
 80045d2:	4b33      	ldr	r3, [pc, #204]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b30      	ldr	r3, [pc, #192]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2f      	ldr	r2, [pc, #188]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b2d      	ldr	r3, [pc, #180]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2c      	ldr	r2, [pc, #176]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e011      	b.n	800461c <HAL_RCC_OscConfig+0x1e4>
 80045f8:	4b29      	ldr	r3, [pc, #164]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a28      	ldr	r2, [pc, #160]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a25      	ldr	r2, [pc, #148]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 800460a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a22      	ldr	r2, [pc, #136]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004616:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800461a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fc f988 	bl	8000938 <HAL_GetTick>
 8004628:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800462c:	f7fc f984 	bl	8000938 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	@ 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e32e      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x1f4>
 800464a:	e012      	b.n	8004672 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fc f974 	bl	8000938 <HAL_GetTick>
 8004650:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004654:	f7fc f970 	bl	8000938 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	@ 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e31a      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004666:	4b0e      	ldr	r3, [pc, #56]	@ (80046a0 <HAL_RCC_OscConfig+0x268>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 809a 	beq.w	80047b4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_RCC_OscConfig+0x25a>
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b18      	cmp	r3, #24
 800468a:	d149      	bne.n	8004720 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d146      	bne.n	8004720 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e2fe      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
 800469e:	bf00      	nop
 80046a0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80046aa:	4b9a      	ldr	r3, [pc, #616]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0218 	and.w	r2, r3, #24
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d014      	beq.n	80046e4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80046ba:	4b96      	ldr	r3, [pc, #600]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 0218 	bic.w	r2, r3, #24
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	4993      	ldr	r1, [pc, #588]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80046cc:	f000 fdd0 	bl	8005270 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046d0:	4b91      	ldr	r3, [pc, #580]	@ (8004918 <HAL_RCC_OscConfig+0x4e0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fc f8a5 	bl	8000824 <HAL_InitTick>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e2db      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fc f928 	bl	8000938 <HAL_GetTick>
 80046e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80046ec:	f7fc f924 	bl	8000938 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e2ce      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046fe:	4b85      	ldr	r3, [pc, #532]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800470a:	4b82      	ldr	r3, [pc, #520]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	497e      	ldr	r1, [pc, #504]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800471e:	e049      	b.n	80047b4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02c      	beq.n	8004782 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004728:	4b7a      	ldr	r3, [pc, #488]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 0218 	bic.w	r2, r3, #24
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	4977      	ldr	r1, [pc, #476]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800473a:	4b76      	ldr	r3, [pc, #472]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a75      	ldr	r2, [pc, #468]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fc f8f7 	bl	8000938 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800474e:	f7fc f8f3 	bl	8000938 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e29d      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004760:	4b6c      	ldr	r3, [pc, #432]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800476c:	4b69      	ldr	r3, [pc, #420]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	4966      	ldr	r1, [pc, #408]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
 8004780:	e018      	b.n	80047b4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b64      	ldr	r3, [pc, #400]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a63      	ldr	r2, [pc, #396]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fc f8d3 	bl	8000938 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004796:	f7fc f8cf 	bl	8000938 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e279      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d03c      	beq.n	800483a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01c      	beq.n	8004802 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c8:	4b52      	ldr	r3, [pc, #328]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80047ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ce:	4a51      	ldr	r2, [pc, #324]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80047d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fc f8ae 	bl	8000938 <HAL_GetTick>
 80047dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80047e0:	f7fc f8aa 	bl	8000938 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e254      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80047f2:	4b48      	ldr	r3, [pc, #288]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80047f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <HAL_RCC_OscConfig+0x3a8>
 8004800:	e01b      	b.n	800483a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004802:	4b44      	ldr	r3, [pc, #272]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004808:	4a42      	ldr	r2, [pc, #264]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800480a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800480e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fc f891 	bl	8000938 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800481a:	f7fc f88d 	bl	8000938 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e237      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800482c:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800482e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ef      	bne.n	800481a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80d2 	beq.w	80049ec <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004848:	4b34      	ldr	r3, [pc, #208]	@ (800491c <HAL_RCC_OscConfig+0x4e4>)
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d118      	bne.n	8004886 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004854:	4b31      	ldr	r3, [pc, #196]	@ (800491c <HAL_RCC_OscConfig+0x4e4>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	4a30      	ldr	r2, [pc, #192]	@ (800491c <HAL_RCC_OscConfig+0x4e4>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004860:	f7fc f86a 	bl	8000938 <HAL_GetTick>
 8004864:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fc f866 	bl	8000938 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e210      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800487a:	4b28      	ldr	r3, [pc, #160]	@ (800491c <HAL_RCC_OscConfig+0x4e4>)
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d108      	bne.n	80048a0 <HAL_RCC_OscConfig+0x468>
 800488e:	4b21      	ldr	r3, [pc, #132]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004894:	4a1f      	ldr	r2, [pc, #124]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800489e:	e074      	b.n	800498a <HAL_RCC_OscConfig+0x552>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d118      	bne.n	80048da <HAL_RCC_OscConfig+0x4a2>
 80048a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ae:	4a19      	ldr	r2, [pc, #100]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048b8:	4b16      	ldr	r3, [pc, #88]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048c8:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ce:	4a11      	ldr	r2, [pc, #68]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048d8:	e057      	b.n	800498a <HAL_RCC_OscConfig+0x552>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d11e      	bne.n	8004920 <HAL_RCC_OscConfig+0x4e8>
 80048e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048f8:	4a06      	ldr	r2, [pc, #24]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 80048fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004902:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 8004904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004908:	4a02      	ldr	r2, [pc, #8]	@ (8004914 <HAL_RCC_OscConfig+0x4dc>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004912:	e03a      	b.n	800498a <HAL_RCC_OscConfig+0x552>
 8004914:	44020c00 	.word	0x44020c00
 8004918:	20000004 	.word	0x20000004
 800491c:	44020800 	.word	0x44020800
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b85      	cmp	r3, #133	@ 0x85
 8004926:	d118      	bne.n	800495a <HAL_RCC_OscConfig+0x522>
 8004928:	4ba2      	ldr	r3, [pc, #648]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800492a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492e:	4aa1      	ldr	r2, [pc, #644]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004930:	f043 0304 	orr.w	r3, r3, #4
 8004934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004938:	4b9e      	ldr	r3, [pc, #632]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800493a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800493e:	4a9d      	ldr	r2, [pc, #628]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004948:	4b9a      	ldr	r3, [pc, #616]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800494a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494e:	4a99      	ldr	r2, [pc, #612]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004958:	e017      	b.n	800498a <HAL_RCC_OscConfig+0x552>
 800495a:	4b96      	ldr	r3, [pc, #600]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800495c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004960:	4a94      	ldr	r2, [pc, #592]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800496a:	4b92      	ldr	r3, [pc, #584]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800496c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004970:	4a90      	ldr	r2, [pc, #576]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800497a:	4b8e      	ldr	r3, [pc, #568]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 800497c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004980:	4a8c      	ldr	r2, [pc, #560]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004986:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004992:	f7fb ffd1 	bl	8000938 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499a:	f7fb ffcd 	bl	8000938 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e175      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b0:	4b80      	ldr	r3, [pc, #512]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 80049b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ed      	beq.n	800499a <HAL_RCC_OscConfig+0x562>
 80049be:	e015      	b.n	80049ec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fb ffba 	bl	8000938 <HAL_GetTick>
 80049c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fb ffb6 	bl	8000938 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e15e      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049de:	4b75      	ldr	r3, [pc, #468]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 80049e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ed      	bne.n	80049c8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d036      	beq.n	8004a66 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d019      	beq.n	8004a34 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a00:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fb ff94 	bl	8000938 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004a14:	f7fb ff90 	bl	8000938 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e13a      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a26:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x5dc>
 8004a32:	e018      	b.n	8004a66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a34:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fb ff7a 	bl	8000938 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004a48:	f7fb ff76 	bl	8000938 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e120      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a5a:	4b56      	ldr	r3, [pc, #344]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8115 	beq.w	8004c9a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b18      	cmp	r3, #24
 8004a74:	f000 80af 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	f040 8086 	bne.w	8004b8e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004a82:	4b4c      	ldr	r3, [pc, #304]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4b      	ldr	r2, [pc, #300]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fb ff53 	bl	8000938 <HAL_GetTick>
 8004a92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004a96:	f7fb ff4f 	bl	8000938 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0f9      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004aa8:	4b42      	ldr	r3, [pc, #264]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004abc:	f023 0303 	bic.w	r3, r3, #3
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ac8:	0212      	lsls	r2, r2, #8
 8004aca:	430a      	orrs	r2, r1
 8004acc:	4939      	ldr	r1, [pc, #228]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	025b      	lsls	r3, r3, #9
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aec:	3b01      	subs	r3, #1
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	3b01      	subs	r3, #1
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b02:	492c      	ldr	r1, [pc, #176]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004b08:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	4a29      	ldr	r2, [pc, #164]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b18:	4a26      	ldr	r2, [pc, #152]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004b1e:	4b25      	ldr	r3, [pc, #148]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	4a24      	ldr	r2, [pc, #144]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b24:	f043 0310 	orr.w	r3, r3, #16
 8004b28:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004b2a:	4b22      	ldr	r3, [pc, #136]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2e:	f023 020c 	bic.w	r2, r3, #12
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	491f      	ldr	r1, [pc, #124]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	f023 0220 	bic.w	r2, r3, #32
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b48:	491a      	ldr	r1, [pc, #104]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b4e:	4b19      	ldr	r3, [pc, #100]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004b5a:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fb fee7 	bl	8000938 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004b6e:	f7fb fee3 	bl	8000938 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e08d      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b80:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCC_OscConfig+0x736>
 8004b8c:	e085      	b.n	8004c9a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004b8e:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a08      	ldr	r2, [pc, #32]	@ (8004bb4 <HAL_RCC_OscConfig+0x77c>)
 8004b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fb fecd 	bl	8000938 <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004ba2:	f7fb fec9 	bl	8000938 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d903      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e073      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
 8004bb4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004bc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc8:	4a36      	ldr	r2, [pc, #216]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004bca:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	6293      	str	r3, [r2, #40]	@ 0x28
 8004bd4:	e061      	b.n	8004c9a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004bd6:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bdc:	4b31      	ldr	r3, [pc, #196]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d031      	beq.n	8004c4e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0203 	and.w	r2, r3, #3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d12a      	bne.n	8004c4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d122      	bne.n	8004c4e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d11a      	bne.n	8004c4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	0a5b      	lsrs	r3, r3, #9
 8004c1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d111      	bne.n	8004c4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	0e1b      	lsrs	r3, r3, #24
 8004c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e024      	b.n	8004c9c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c52:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d01a      	beq.n	8004c9a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fb fe62 	bl	8000938 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004c76:	bf00      	nop
 8004c78:	f7fb fe5e 	bl	8000938 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d0f9      	beq.n	8004c78 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c88:	4a06      	ldr	r2, [pc, #24]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004c8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <HAL_RCC_OscConfig+0x86c>)
 8004c94:	f043 0310 	orr.w	r3, r3, #16
 8004c98:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	44020c00 	.word	0x44020c00

08004ca8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e19e      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b83      	ldr	r3, [pc, #524]	@ (8004ecc <HAL_RCC_ClockConfig+0x224>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d910      	bls.n	8004cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b80      	ldr	r3, [pc, #512]	@ (8004ecc <HAL_RCC_ClockConfig+0x224>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 020f 	bic.w	r2, r3, #15
 8004cd2:	497e      	ldr	r1, [pc, #504]	@ (8004ecc <HAL_RCC_ClockConfig+0x224>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b7c      	ldr	r3, [pc, #496]	@ (8004ecc <HAL_RCC_ClockConfig+0x224>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e186      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	4b74      	ldr	r3, [pc, #464]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d909      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004d0a:	4b71      	ldr	r3, [pc, #452]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	496d      	ldr	r1, [pc, #436]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d012      	beq.n	8004d50 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	4b68      	ldr	r3, [pc, #416]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d909      	bls.n	8004d50 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004d3c:	4b64      	ldr	r3, [pc, #400]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4961      	ldr	r1, [pc, #388]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d908      	bls.n	8004d7e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004d6c:	4b58      	ldr	r3, [pc, #352]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4955      	ldr	r1, [pc, #340]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	4b50      	ldr	r3, [pc, #320]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d908      	bls.n	8004dac <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004d9a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 020f 	bic.w	r2, r3, #15
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	494a      	ldr	r1, [pc, #296]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8093 	beq.w	8004ee0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004dc2:	4b43      	ldr	r3, [pc, #268]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e113      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dda:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d115      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e107      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004df2:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0fb      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e02:	4b33      	ldr	r3, [pc, #204]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e0f3      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004e12:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	492c      	ldr	r1, [pc, #176]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e24:	f7fb fd88 	bl	8000938 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d112      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e34:	f7fb fd80 	bl	8000938 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0d7      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e4a:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0318 	and.w	r3, r3, #24
 8004e52:	2b18      	cmp	r3, #24
 8004e54:	d1ee      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x18c>
 8004e56:	e043      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d112      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e62:	f7fb fd69 	bl	8000938 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e0c0      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e78:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 0318 	and.w	r3, r3, #24
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d1ee      	bne.n	8004e62 <HAL_RCC_ClockConfig+0x1ba>
 8004e84:	e02c      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d122      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fb fd52 	bl	8000938 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e0a9      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <HAL_RCC_ClockConfig+0x228>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0318 	and.w	r3, r3, #24
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d1ee      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x1e8>
 8004eb2:	e015      	b.n	8004ee0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fb fd40 	bl	8000938 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d906      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e097      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
 8004eca:	bf00      	nop
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0318 	and.w	r3, r3, #24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e9      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d208      	bcs.n	8004f0e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004efc:	4b41      	ldr	r3, [pc, #260]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f023 020f 	bic.w	r2, r3, #15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	493e      	ldr	r1, [pc, #248]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <HAL_RCC_ClockConfig+0x360>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d210      	bcs.n	8004f3e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005008 <HAL_RCC_ClockConfig+0x360>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 020f 	bic.w	r2, r3, #15
 8004f24:	4938      	ldr	r1, [pc, #224]	@ (8005008 <HAL_RCC_ClockConfig+0x360>)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2c:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <HAL_RCC_ClockConfig+0x360>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e05d      	b.n	8004ffa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d208      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4927      	ldr	r1, [pc, #156]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d012      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d209      	bcs.n	8004f9e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	491a      	ldr	r1, [pc, #104]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d012      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d209      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004fbc:	4b11      	ldr	r3, [pc, #68]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	490e      	ldr	r1, [pc, #56]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fd0:	f000 f822 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <HAL_RCC_ClockConfig+0x35c>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	490b      	ldr	r1, [pc, #44]	@ (800500c <HAL_RCC_ClockConfig+0x364>)
 8004fe0:	5ccb      	ldrb	r3, [r1, r3]
 8004fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <HAL_RCC_ClockConfig+0x368>)
 8004fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fea:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <HAL_RCC_ClockConfig+0x36c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fc18 	bl	8000824 <HAL_InitTick>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	44020c00 	.word	0x44020c00
 8005008:	40022000 	.word	0x40022000
 800500c:	08009c94 	.word	0x08009c94
 8005010:	20000000 	.word	0x20000000
 8005014:	20000004 	.word	0x20000004

08005018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	@ 0x24
 800501c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800501e:	4b8c      	ldr	r3, [pc, #560]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0318 	and.w	r3, r3, #24
 8005026:	2b08      	cmp	r3, #8
 8005028:	d102      	bne.n	8005030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800502a:	4b8a      	ldr	r3, [pc, #552]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x23c>)
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e107      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005030:	4b87      	ldr	r3, [pc, #540]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f003 0318 	and.w	r3, r3, #24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d112      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800503c:	4b84      	ldr	r3, [pc, #528]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005048:	4b81      	ldr	r3, [pc, #516]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	4a81      	ldr	r2, [pc, #516]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x240>)
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e0f1      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800505c:	4b7e      	ldr	r3, [pc, #504]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x240>)
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e0ee      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005062:	4b7b      	ldr	r3, [pc, #492]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f003 0318 	and.w	r3, r3, #24
 800506a:	2b10      	cmp	r3, #16
 800506c:	d102      	bne.n	8005074 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800506e:	4b7b      	ldr	r3, [pc, #492]	@ (800525c <HAL_RCC_GetSysClockFreq+0x244>)
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e0e5      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005074:	4b76      	ldr	r3, [pc, #472]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0318 	and.w	r3, r3, #24
 800507c:	2b18      	cmp	r3, #24
 800507e:	f040 80dd 	bne.w	800523c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005082:	4b73      	ldr	r3, [pc, #460]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800508c:	4b70      	ldr	r3, [pc, #448]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005096:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005098:	4b6d      	ldr	r3, [pc, #436]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	091b      	lsrs	r3, r3, #4
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80050a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	fb02 f303 	mul.w	r3, r2, r3
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050bc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80b7 	beq.w	8005236 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <HAL_RCC_GetSysClockFreq+0xbe>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d056      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x16a>
 80050d4:	e077      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80050d6:	4b5e      	ldr	r3, [pc, #376]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02d      	beq.n	800513e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x240>)
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510c:	4b50      	ldr	r3, [pc, #320]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800510e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800511c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005120:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x248>
 8005124:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005128:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800512c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005130:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005138:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800513c:	e065      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005148:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005264 <HAL_RCC_GetSysClockFreq+0x24c>
 800514c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005150:	4b3f      	ldr	r3, [pc, #252]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005160:	ed97 6a02 	vldr	s12, [r7, #8]
 8005164:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x248>
 8005168:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800516c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005174:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005180:	e043      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005268 <HAL_RCC_GetSysClockFreq+0x250>
 8005190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005194:	4b2e      	ldr	r3, [pc, #184]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 8005196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x248>
 80051ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80051c4:	e021      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800526c <HAL_RCC_GetSysClockFreq+0x254>
 80051d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 80051da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80051e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ec:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005260 <HAL_RCC_GetSysClockFreq+0x248>
 80051f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005204:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005208:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800520a:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x238>)
 800520c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520e:	0a5b      	lsrs	r3, r3, #9
 8005210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005214:	3301      	adds	r3, #1
 8005216:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005222:	edd7 6a06 	vldr	s13, [r7, #24]
 8005226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522e:	ee17 3a90 	vmov	r3, s15
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e004      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e001      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x240>)
 800523e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005240:	69fb      	ldr	r3, [r7, #28]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3724      	adds	r7, #36	@ 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	44020c00 	.word	0x44020c00
 8005254:	003d0900 	.word	0x003d0900
 8005258:	03d09000 	.word	0x03d09000
 800525c:	017d7840 	.word	0x017d7840
 8005260:	46000000 	.word	0x46000000
 8005264:	4c742400 	.word	0x4c742400
 8005268:	4bbebc20 	.word	0x4bbebc20
 800526c:	4a742400 	.word	0x4a742400

08005270 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005274:	f7ff fed0 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <HAL_RCC_GetHCLKFreq+0x2c>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800527e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005282:	4907      	ldr	r1, [pc, #28]	@ (80052a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005284:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005286:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	4a05      	ldr	r2, [pc, #20]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005290:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x34>)
 8005294:	681b      	ldr	r3, [r3, #0]
}
 8005296:	4618      	mov	r0, r3
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	44020c00 	.word	0x44020c00
 80052a0:	08009c94 	.word	0x08009c94
 80052a4:	20000000 	.word	0x20000000

080052a8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b0aa      	sub	sp, #168	@ 0xa8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80052cc:	2500      	movs	r5, #0
 80052ce:	ea54 0305 	orrs.w	r3, r4, r5
 80052d2:	d00b      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80052d4:	4bb8      	ldr	r3, [pc, #736]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052da:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80052de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e4:	4ab4      	ldr	r2, [pc, #720]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f002 0801 	and.w	r8, r2, #1
 80052f8:	f04f 0900 	mov.w	r9, #0
 80052fc:	ea58 0309 	orrs.w	r3, r8, r9
 8005300:	d038      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005302:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005308:	2b05      	cmp	r3, #5
 800530a:	d819      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800530c:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005349 	.word	0x08005349
 8005318:	0800532d 	.word	0x0800532d
 800531c:	08005341 	.word	0x08005341
 8005320:	08005349 	.word	0x08005349
 8005324:	08005349 	.word	0x08005349
 8005328:	08005349 	.word	0x08005349
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800532c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005330:	3308      	adds	r3, #8
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fddc 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 800533e:	e004      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005346:	e000      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8005348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10c      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005352:	4b99      	ldr	r3, [pc, #612]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005358:	f023 0107 	bic.w	r1, r3, #7
 800535c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005362:	4a95      	ldr	r2, [pc, #596]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005364:	430b      	orrs	r3, r1
 8005366:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005370:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005374:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f002 0a02 	and.w	sl, r2, #2
 8005380:	f04f 0b00 	mov.w	fp, #0
 8005384:	ea5a 030b 	orrs.w	r3, sl, fp
 8005388:	d03c      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800538a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	2b28      	cmp	r3, #40	@ 0x28
 8005392:	d01b      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005394:	2b28      	cmp	r3, #40	@ 0x28
 8005396:	d815      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d019      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d811      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80053a0:	2b18      	cmp	r3, #24
 80053a2:	d017      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80053a4:	2b18      	cmp	r3, #24
 80053a6:	d80d      	bhi.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d015      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d109      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053b4:	3308      	adds	r3, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fd9a 	bl	8005ef0 <RCCEx_PLL2_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80053c2:	e00a      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80053ca:	e006      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80053cc:	bf00      	nop
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80053e2:	4b75      	ldr	r3, [pc, #468]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053e8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	4a71      	ldr	r2, [pc, #452]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053fa:	e003      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005400:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005404:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f002 0304 	and.w	r3, r2, #4
 8005410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800541a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800541e:	460b      	mov	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	d040      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005424:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800542e:	d01e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005430:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005434:	d817      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543a:	d01a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800543c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005440:	d811      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005442:	2bc0      	cmp	r3, #192	@ 0xc0
 8005444:	d017      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005446:	2bc0      	cmp	r3, #192	@ 0xc0
 8005448:	d80d      	bhi.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800544e:	2b40      	cmp	r3, #64	@ 0x40
 8005450:	d109      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005452:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005456:	3308      	adds	r3, #8
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fd49 	bl	8005ef0 <RCCEx_PLL2_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005464:	e00a      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800546c:	e006      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800547a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005484:	4b4c      	ldr	r3, [pc, #304]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005486:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800548a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800548e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005494:	4a48      	ldr	r2, [pc, #288]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005496:	430b      	orrs	r3, r1
 8005498:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054a2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054b6:	2300      	movs	r3, #0
 80054b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d043      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80054c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054d0:	d021      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054d2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054d6:	d81a      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80054d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054dc:	d01d      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x272>
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054e2:	d814      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80054e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054e8:	d019      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80054ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054ee:	d80e      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x266>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d016      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054fe:	3308      	adds	r3, #8
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fcf5 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800550c:	e00a      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005514:	e006      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005516:	bf00      	nop
 8005518:	e004      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005524:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800552c:	4b22      	ldr	r3, [pc, #136]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005532:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	4a1e      	ldr	r2, [pc, #120]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800553e:	430b      	orrs	r3, r1
 8005540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005544:	e003      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005546:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800554a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800554e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800555a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800555c:	2300      	movs	r3, #0
 800555e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005560:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d03e      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800556a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800556e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005574:	d01b      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x306>
 8005576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800557a:	d814      	bhi.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800557c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005580:	d017      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005586:	d80e      	bhi.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d017      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x314>
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005590:	d109      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005592:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005596:	3308      	adds	r3, #8
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fca9 	bl	8005ef0 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80055a4:	e00b      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80055ac:	e007      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80055ae:	bf00      	nop
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80055b2:	bf00      	nop
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x316>
 80055b6:	bf00      	nop
 80055b8:	44020c00 	.word	0x44020c00
        break;
 80055bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80055c6:	4ba5      	ldr	r3, [pc, #660]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055cc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d6:	4aa1      	ldr	r2, [pc, #644]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80055d8:	430b      	orrs	r3, r1
 80055da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055de:	e003      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80055f6:	2300      	movs	r3, #0
 80055f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80055fa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d03b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005604:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800560e:	d01b      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005610:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005614:	d814      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005616:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800561a:	d017      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800561c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005620:	d80e      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800562a:	d109      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800562c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005630:	3308      	adds	r3, #8
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fc5c 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005648:	bf00      	nop
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800564c:	bf00      	nop
 800564e:	e000      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005652:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10c      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800565a:	4b80      	ldr	r3, [pc, #512]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800565c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005660:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005664:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566a:	4a7c      	ldr	r2, [pc, #496]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800566c:	430b      	orrs	r3, r1
 800566e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005678:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800567c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800568a:	2300      	movs	r3, #0
 800568c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800568e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d033      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005698:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800569c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056a2:	d015      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80056a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056a8:	d80e      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d012      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80056ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056b2:	d109      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056b8:	3308      	adds	r3, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fc18 	bl	8005ef0 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80056c6:	e006      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80056de:	4b5f      	ldr	r3, [pc, #380]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056e4:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80056e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ee:	4a5b      	ldr	r2, [pc, #364]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80056f0:	430b      	orrs	r3, r1
 80056f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	2100      	movs	r1, #0
 800570a:	6639      	str	r1, [r7, #96]	@ 0x60
 800570c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005710:	667b      	str	r3, [r7, #100]	@ 0x64
 8005712:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d033      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 800571c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005726:	d015      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800572c:	d80e      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d012      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005736:	d109      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800573c:	3308      	adds	r3, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fbd6 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10c      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005762:	4b3e      	ldr	r3, [pc, #248]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005768:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800576c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	4a3a      	ldr	r2, [pc, #232]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005774:	430b      	orrs	r3, r1
 8005776:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800577a:	e003      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005780:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005784:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	2100      	movs	r1, #0
 800578e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005796:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800579a:	460b      	mov	r3, r1
 800579c:	4313      	orrs	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80057a0:	4b2e      	ldr	r3, [pc, #184]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80057a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057aa:	61d3      	str	r3, [r2, #28]
 80057ac:	4b2b      	ldr	r3, [pc, #172]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b8:	4a28      	ldr	r2, [pc, #160]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80057cc:	2300      	movs	r3, #0
 80057ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057d4:	460b      	mov	r3, r1
 80057d6:	4313      	orrs	r3, r2
 80057d8:	d046      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80057da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057e4:	d021      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x582>
 80057e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80057ea:	d81a      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d01d      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x586>
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d814      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80057f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057fc:	d019      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80057fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005802:	d80e      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580c:	d109      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800580e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005812:	3308      	adds	r3, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fb6b 	bl	8005ef0 <RCCEx_PLL2_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005820:	e00a      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800582a:	bf00      	nop
 800582c:	e004      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10f      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005840:	4b06      	ldr	r3, [pc, #24]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005842:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005846:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800584a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800584e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005850:	4a02      	ldr	r2, [pc, #8]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005852:	430b      	orrs	r3, r1
 8005854:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005858:	e006      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800585a:	bf00      	nop
 800585c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005860:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005864:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005876:	2300      	movs	r3, #0
 8005878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800587e:	460b      	mov	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	d043      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005884:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800588e:	d021      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8005890:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005894:	d81a      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589a:	d01d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800589c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a0:	d814      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
 80058a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058a6:	d019      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x634>
 80058a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ac:	d80e      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d016      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d109      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058bc:	3308      	adds	r3, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fb16 	bl	8005ef0 <RCCEx_PLL2_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80058ca:	e00a      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80058d2:	e006      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80058d4:	bf00      	nop
 80058d6:	e004      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80058d8:	bf00      	nop
 80058da:	e002      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80058dc:	bf00      	nop
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058ea:	4bb6      	ldr	r3, [pc, #728]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80058f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	4ab2      	ldr	r2, [pc, #712]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005902:	e003      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005908:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800590c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005918:	643b      	str	r3, [r7, #64]	@ 0x40
 800591a:	2300      	movs	r3, #0
 800591c:	647b      	str	r3, [r7, #68]	@ 0x44
 800591e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d030      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005928:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800592c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800592e:	2b05      	cmp	r3, #5
 8005930:	d80f      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8005932:	2b03      	cmp	r3, #3
 8005934:	d211      	bcs.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005936:	2b01      	cmp	r3, #1
 8005938:	d911      	bls.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800593a:	2b02      	cmp	r3, #2
 800593c:	d109      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800593e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005942:	3308      	adds	r3, #8
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fad3 	bl	8005ef0 <RCCEx_PLL2_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005950:	e006      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005958:	e002      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800595e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005960:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005968:	4b96      	ldr	r3, [pc, #600]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800596a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800596e:	f023 0107 	bic.w	r1, r3, #7
 8005972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005978:	4a92      	ldr	r2, [pc, #584]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800597a:	430b      	orrs	r3, r1
 800597c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005980:	e003      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005982:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005986:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800598a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	2100      	movs	r1, #0
 8005994:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800599c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059a0:	460b      	mov	r3, r1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80059a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x714>
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d005      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80059ba:	e002      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80059bc:	bf00      	nop
 80059be:	e000      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80059c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80059ca:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059d0:	f023 0108 	bic.w	r1, r3, #8
 80059d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059da:	4a7a      	ldr	r2, [pc, #488]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059e2:	e003      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fa:	2300      	movs	r3, #0
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f000 80b0 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a16:	f7fa ff8f 	bl	8000938 <HAL_GetTick>
 8005a1a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a1e:	e00b      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fa ff8a 	bl	8000938 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d903      	bls.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a36:	e005      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005a38:	4b63      	ldr	r3, [pc, #396]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ed      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005a44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 808a 	bne.w	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d022      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a6a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d01b      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a72:	4b54      	ldr	r3, [pc, #336]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a80:	4b50      	ldr	r3, [pc, #320]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a86:	4a4f      	ldr	r2, [pc, #316]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a90:	4b4c      	ldr	r3, [pc, #304]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a96:	4a4b      	ldr	r2, [pc, #300]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005aa0:	4a48      	ldr	r2, [pc, #288]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fa ff3f 	bl	8000938 <HAL_GetTick>
 8005aba:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005abe:	e00d      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac0:	f7fa ff3a 	bl	8000938 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d903      	bls.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8005ada:	e006      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005adc:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0ea      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005aea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d132      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b00:	d10f      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8005b02:	4b30      	ldr	r3, [pc, #192]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	61d3      	str	r3, [r2, #28]
 8005b20:	e005      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8005b22:	4b28      	ldr	r3, [pc, #160]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4a27      	ldr	r2, [pc, #156]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b2c:	61d3      	str	r3, [r2, #28]
 8005b2e:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b34:	4a23      	ldr	r2, [pc, #140]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b3e:	4b21      	ldr	r3, [pc, #132]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b40:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005b50:	430b      	orrs	r3, r1
 8005b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b5c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8005b60:	e003      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b66:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d038      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005b86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8c:	2b30      	cmp	r3, #48	@ 0x30
 8005b8e:	d014      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005b90:	2b30      	cmp	r3, #48	@ 0x30
 8005b92:	d80e      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d012      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d80a      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba4:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	4a06      	ldr	r2, [pc, #24]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005bb0:	e00d      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005bb8:	e009      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005bba:	bf00      	nop
 8005bbc:	e007      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e005      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005bc2:	bf00      	nop
 8005bc4:	44020c00 	.word	0x44020c00
 8005bc8:	44020800 	.word	0x44020800
        break;
 8005bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005bd6:	4bb5      	ldr	r3, [pc, #724]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005be0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be6:	49b1      	ldr	r1, [pc, #708]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005bf4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4313      	orrs	r3, r2
 8005c12:	d03c      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005c14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d81d      	bhi.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c47 	.word	0x08005c47
 8005c2c:	08005c5b 	.word	0x08005c5b
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c63 	.word	0x08005c63
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c38:	4b9c      	ldr	r3, [pc, #624]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	4a9b      	ldr	r2, [pc, #620]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005c44:	e00e      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f94f 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005c58:	e004      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c60:	e000      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8005c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c64:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005c6c:	4b8f      	ldr	r3, [pc, #572]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7c:	498b      	ldr	r1, [pc, #556]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005c84:	e003      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c8a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	d03c      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d01f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d819      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005cb8:	2b18      	cmp	r3, #24
 8005cba:	d01d      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005cbc:	2b18      	cmp	r3, #24
 8005cbe:	d815      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d007      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005cc8:	e010      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cca:	4b78      	ldr	r3, [pc, #480]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cce:	4a77      	ldr	r2, [pc, #476]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e010      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005cdc:	3308      	adds	r3, #8
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f906 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005cea:	e006      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005cf2:	e002      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d08:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	4966      	ldr	r1, [pc, #408]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005d20:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d03e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d50:	d819      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d54:	d01d      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d58:	d815      	bhi.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d007      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8005d62:	e010      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d64:	4b51      	ldr	r3, [pc, #324]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	4a50      	ldr	r2, [pc, #320]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005d70:	e010      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d76:	3308      	adds	r3, #8
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f8b9 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005d84:	e006      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005d8c:	e002      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8005d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d94:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005d9c:	4b43      	ldr	r3, [pc, #268]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005da2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005da6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dac:	493f      	ldr	r1, [pc, #252]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005db4:	e003      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005dba:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d038      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de4:	d00e      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005de6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dea:	d815      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d017      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8005df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df4:	d110      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df6:	4b2d      	ldr	r3, [pc, #180]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e00:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005e02:	e00e      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e08:	3308      	adds	r3, #8
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 f870 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005e2a:	4b20      	ldr	r3, [pc, #128]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3a:	491c      	ldr	r1, [pc, #112]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005e48:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	2100      	movs	r1, #0
 8005e56:	6039      	str	r1, [r7, #0]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d039      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005e68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e6e:	2b30      	cmp	r3, #48	@ 0x30
 8005e70:	d01e      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005e72:	2b30      	cmp	r3, #48	@ 0x30
 8005e74:	d815      	bhi.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d002      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8005e7e:	e010      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	4a09      	ldr	r2, [pc, #36]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e8a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e8c:	e011      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e92:	3308      	adds	r3, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f82b 	bl	8005ef0 <RCCEx_PLL2_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005ea0:	e007      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005eaa:	bf00      	nop
 8005eac:	44020c00 	.word	0x44020c00
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005eba:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ec0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eca:	4908      	ldr	r1, [pc, #32]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ed2:	e003      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005ed8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8005edc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	37a8      	adds	r7, #168	@ 0xa8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	44020c00 	.word	0x44020c00

08005ef0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ef8:	4b48      	ldr	r3, [pc, #288]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a47      	ldr	r2, [pc, #284]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005efe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f04:	f7fa fd18 	bl	8000938 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f0c:	f7fa fd14 	bl	8000938 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e07a      	b.n	8006014 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f32:	f023 0303 	bic.w	r3, r3, #3
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6811      	ldr	r1, [r2, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6852      	ldr	r2, [r2, #4]
 8005f3e:	0212      	lsls	r2, r2, #8
 8005f40:	430a      	orrs	r2, r1
 8005f42:	4936      	ldr	r1, [pc, #216]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	025b      	lsls	r3, r3, #9
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	041b      	lsls	r3, r3, #16
 8005f66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f78:	4928      	ldr	r1, [pc, #160]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005f7e:	4b27      	ldr	r3, [pc, #156]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f82:	f023 020c 	bic.w	r2, r3, #12
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	4924      	ldr	r1, [pc, #144]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005f90:	4b22      	ldr	r3, [pc, #136]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	f023 0220 	bic.w	r2, r3, #32
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	491f      	ldr	r1, [pc, #124]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	491c      	ldr	r1, [pc, #112]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	4a19      	ldr	r2, [pc, #100]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fb6:	f023 0310 	bic.w	r3, r3, #16
 8005fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005fbc:	4b17      	ldr	r3, [pc, #92]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fc4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6a12      	ldr	r2, [r2, #32]
 8005fcc:	00d2      	lsls	r2, r2, #3
 8005fce:	4913      	ldr	r1, [pc, #76]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005fd4:	4b11      	ldr	r3, [pc, #68]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd8:	4a10      	ldr	r2, [pc, #64]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fda:	f043 0310 	orr.w	r3, r3, #16
 8005fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8005fe6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fec:	f7fa fca4 	bl	8000938 <HAL_GetTick>
 8005ff0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff2:	e008      	b.n	8006006 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ff4:	f7fa fca0 	bl	8000938 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006006:	4b05      	ldr	r3, [pc, #20]	@ (800601c <RCCEx_PLL2_Config+0x12c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0

}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	44020c00 	.word	0x44020c00

08006020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	f043 0201 	orr.w	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800604e:	b084      	sub	sp, #16
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	f107 001c 	add.w	r0, r7, #28
 800605c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e008      	b.n	800607c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff ffd8 	bl	8006020 <USB_CoreReset>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006086:	b004      	add	sp, #16
 8006088:	4770      	bx	lr

0800608a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006092:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006096:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80060d2:	e00b      	b.n	80060ec <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d106      	bne.n	80060e8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80060e6:	e001      	b.n	80060ec <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006108:	68fb      	ldr	r3, [r7, #12]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006116:	b480      	push	{r7}
 8006118:	b08b      	sub	sp, #44	@ 0x2c
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	4611      	mov	r1, r2
 8006122:	461a      	mov	r2, r3
 8006124:	460b      	mov	r3, r1
 8006126:	80fb      	strh	r3, [r7, #6]
 8006128:	4613      	mov	r3, r2
 800612a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800612c:	88bb      	ldrh	r3, [r7, #4]
 800612e:	3303      	adds	r3, #3
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006134:	88bb      	ldrh	r3, [r7, #4]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006140:	8afb      	ldrh	r3, [r7, #22]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <USB_WritePMA+0x36>
  {
    NbWords--;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	3b01      	subs	r3, #1
 800614a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006152:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006156:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	623b      	str	r3, [r7, #32]
 800615c:	e015      	b.n	800618a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3304      	adds	r3, #4
 800616a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3301      	adds	r3, #1
 8006170:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
    pBuf++;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3301      	adds	r3, #1
 800617c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	3b01      	subs	r3, #1
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e6      	bne.n	800615e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8006190:	8afb      	ldrh	r3, [r7, #22]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01a      	beq.n	80061cc <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061aa:	4313      	orrs	r3, r2
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	3301      	adds	r3, #1
 80061b2:	623b      	str	r3, [r7, #32]
      pBuf++;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3301      	adds	r3, #1
 80061b8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80061ba:	8afb      	ldrh	r3, [r7, #22]
 80061bc:	3b01      	subs	r3, #1
 80061be:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 80061c0:	8afb      	ldrh	r3, [r7, #22]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e9      	bne.n	800619a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ca:	601a      	str	r2, [r3, #0]
  }
}
 80061cc:	bf00      	nop
 80061ce:	372c      	adds	r7, #44	@ 0x2c
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061d8:	b480      	push	{r7}
 80061da:	b08b      	sub	sp, #44	@ 0x2c
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	80fb      	strh	r3, [r7, #6]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80061ee:	88bb      	ldrh	r3, [r7, #4]
 80061f0:	3303      	adds	r3, #3
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80061f6:	88bb      	ldrh	r3, [r7, #4]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800620c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800620e:	8b7b      	ldrh	r3, [r7, #26]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <USB_ReadPMA+0x42>
  {
    NbWords--;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3b01      	subs	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
 800621e:	e015      	b.n	800624c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	3304      	adds	r3, #4
 800622c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	3301      	adds	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3301      	adds	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
    pBuf++;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3301      	adds	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3301      	adds	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	3b01      	subs	r3, #1
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
 800624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e6      	bne.n	8006220 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8006252:	8b7b      	ldrh	r3, [r7, #26]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d017      	beq.n	8006288 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	b2db      	uxtb	r3, r3
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	b2da      	uxtb	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	701a      	strb	r2, [r3, #0]
      count++;
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	3301      	adds	r3, #1
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	3301      	adds	r3, #1
 800627a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800627c:	8b7b      	ldrh	r3, [r7, #26]
 800627e:	3b01      	subs	r3, #1
 8006280:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1ea      	bne.n	800625e <USB_ReadPMA+0x86>
  }
}
 8006288:	bf00      	nop
 800628a:	372c      	adds	r7, #44	@ 0x2c
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USB_HostInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006294:	b084      	sub	sp, #16
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	f107 0014 	add.w	r0, r7, #20
 80062a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable all interrupts */
  USBx->CNTR &= ~(USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6413      	str	r3, [r2, #64]	@ 0x40
                  USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                  USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the PullDown on the PHY */
  USBx->BCDR |= USB_BCDR_DPPD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Enable Global interrupt */
  USBx->CNTR |= (USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6413      	str	r3, [r2, #64]	@ 0x40
                 USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                 USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	b004      	add	sp, #16
 80062ec:	4770      	bx	lr

080062ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_DRD_TypeDef *USBx)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  /* Force USB Reset */
  USBx->CNTR |= USB_CNTR_USBRST;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(100);
 8006302:	2064      	movs	r0, #100	@ 0x64
 8006304:	f7fa fb24 	bl	8000950 <HAL_Delay>
  /* Release USB Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	f023 0201 	bic.w	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(30);
 8006314:	201e      	movs	r0, #30
 8006316:	f7fa fb1b 	bl	8000950 <HAL_Delay>

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USB_GetHostSpeed>:
  *          This parameter can be one of these values
  *            @arg USB_DRD_SPEED_FS Full speed mode
  *            @arg USB_DRD_SPEED_LS Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_DRD_TypeDef const *USBx)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  if ((USBx->ISTR & USB_ISTR_LS_DCONN) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006330:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <USB_GetHostSpeed+0x18>
  {
    return USB_DRD_SPEED_LS;
 8006338:	2302      	movs	r3, #2
 800633a:	e000      	b.n	800633e <USB_GetHostSpeed+0x1a>
  }
  else
  {
    return USB_DRD_SPEED_FS;
 800633c:	2301      	movs	r3, #1
  }
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_DRD_TypeDef const *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  return USBx->FNR & 0x7FFU;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006356:	f3c3 030a 	ubfx	r3, r3, #0, #11
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USB_HC_DoubleBuffer>:
  * @param  db_state double state can be USB_DRD_XXX_DBUFF_ENBALE/USB_DRD_XXX_DBUFF_DISABLE
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HC_DoubleBuffer(USB_DRD_TypeDef *USBx,
                                      uint8_t phy_ch_num, uint8_t db_state)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
 8006372:	4613      	mov	r3, r2
 8006374:	70bb      	strb	r3, [r7, #2]
  uint32_t tmp;

  if ((db_state == USB_DRD_BULK_DBUFF_ENBALE) || (db_state == USB_DRD_ISOC_DBUFF_DISABLE))
 8006376:	78bb      	ldrb	r3, [r7, #2]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d002      	beq.n	8006382 <USB_HC_DoubleBuffer+0x1c>
 800637c:	78bb      	ldrb	r3, [r7, #2]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d10c      	bne.n	800639c <USB_HC_DoubleBuffer+0x36>
  {
    tmp = (USB_DRD_GET_CHEP(USBx, phy_ch_num) | USB_CH_KIND) & USB_CHEP_DB_MSK;
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f423 4371 	bic.w	r3, r3, #61696	@ 0xf100
 8006390:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e009      	b.n	80063b0 <USB_HC_DoubleBuffer+0x4a>
  }
  else
  {
    tmp = USB_DRD_GET_CHEP(USBx, phy_ch_num) & (~USB_CH_KIND) & USB_CHEP_DB_MSK;
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f423 4371 	bic.w	r3, r3, #61696	@ 0xf100
 80063aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the device speed in case using HUB FS with device LS */
  USB_DRD_SET_CHEP(USBx, phy_ch_num, tmp);
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_DRD_TypeDef *USBx, uint8_t phy_ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	70fb      	strb	r3, [r7, #3]
 80063de:	460b      	mov	r3, r1
 80063e0:	70bb      	strb	r3, [r7, #2]
 80063e2:	4613      	mov	r3, r2
 80063e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint32_t wChRegVal;
  uint32_t HostCoreSpeed;

  UNUSED(mps);

  wChRegVal = USB_DRD_GET_CHEP(USBx, phy_ch_num) & USB_CH_T_MASK;
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b27      	ldr	r3, [pc, #156]	@ (8006494 <USB_HC_Init+0xc8>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]

  /* Initialize host Channel */
  switch (ep_type)
 80063fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d819      	bhi.n	8006436 <USB_HC_Init+0x6a>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <USB_HC_Init+0x3c>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	0800642d 	.word	0x0800642d
 8006410:	0800643d 	.word	0x0800643d
 8006414:	08006423 	.word	0x08006423
  {
    case EP_TYPE_CTRL:
      wChRegVal |= USB_EP_CONTROL;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800641e:	613b      	str	r3, [r7, #16]
      break;
 8006420:	e00d      	b.n	800643e <USB_HC_Init+0x72>
    case EP_TYPE_BULK:
      wChRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wChRegVal |= USB_EP_INTERRUPT;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006428:	613b      	str	r3, [r7, #16]
      break;
 800642a:	e008      	b.n	800643e <USB_HC_Init+0x72>

    case EP_TYPE_ISOC:
      wChRegVal |= USB_EP_ISOCHRONOUS;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006432:	613b      	str	r3, [r7, #16]
      break;
 8006434:	e003      	b.n	800643e <USB_HC_Init+0x72>

    default:
      ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]
      break;
 800643a:	e000      	b.n	800643e <USB_HC_Init+0x72>
      break;
 800643c:	bf00      	nop
  }

  /* Clear device address, Endpoint number and Low Speed Endpoint fields */
  wChRegVal &= ~(USB_CHEP_DEVADDR | USB_CHEP_ADDR | USB_CHEP_LSEP);
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <USB_HC_Init+0xcc>)
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Set device address and Endpoint number associated to the channel */
  wChRegVal |= (((uint32_t)dev_address << USB_CHEP_DEVADDR_Pos) |
 8006446:	787b      	ldrb	r3, [r7, #1]
 8006448:	041a      	lsls	r2, r3, #16
                ((uint32_t)epnum & 0x0FU));
 800644a:	78bb      	ldrb	r3, [r7, #2]
 800644c:	f003 030f 	and.w	r3, r3, #15
  wChRegVal |= (((uint32_t)dev_address << USB_CHEP_DEVADDR_Pos) |
 8006450:	4313      	orrs	r3, r2
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

  /* Get Host core Speed */
  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff ff63 	bl	8006324 <USB_GetHostSpeed>
 800645e:	60f8      	str	r0, [r7, #12]

  /* Set the device speed in case using HUB FS with device LS */
  if ((speed == USB_DRD_SPEED_LS) && (HostCoreSpeed == USB_DRD_SPEED_FS))
 8006460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d106      	bne.n	8006476 <USB_HC_Init+0xaa>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d103      	bne.n	8006476 <USB_HC_Init+0xaa>
  {
    wChRegVal |= USB_CHEP_LSEP;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Update the channel register value */
  USB_DRD_SET_CHEP(USBx, phy_ch_num, (wChRegVal | USB_CH_VTRX | USB_CH_VTTX));
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006488:	6013      	str	r3, [r2, #0]

  return ret;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	07ff898f 	.word	0x07ff898f
 8006498:	fe80fff0 	.word	0xfe80fff0

0800649c <USB_HC_StartXfer>:
  * @param  USBx Selected device
  * @param  hc pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_DRD_TypeDef *USBx, USB_DRD_HCTypeDef *hc)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	@ 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint32_t phy_ch_num = (uint32_t)hc->phy_ch_num;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
#if (USE_USB_DOUBLE_BUFFER == 1U)
  uint32_t ch_reg = USB_DRD_GET_CHEP(USBx, phy_ch_num);
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	623b      	str	r3, [r7, #32]
#endif /* USE_USB_DOUBLE_BUFFER */

  if (hc->ch_dir == CH_IN_DIR)  /* In Channel */
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	78db      	ldrb	r3, [r3, #3]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	f040 8296 	bne.w	80069ee <USB_HC_StartXfer+0x552>
  {
    /* Multi packet transfer */
    if (hc->xfer_len > hc->max_packet)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	8912      	ldrh	r2, [r2, #8]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d903      	bls.n	80064d6 <USB_HC_StartXfer+0x3a>
    {
      len = hc->max_packet;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	891b      	ldrh	r3, [r3, #8]
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	e002      	b.n	80064dc <USB_HC_StartXfer+0x40>
    }
    else
    {
      len = hc->xfer_len;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	60bb      	str	r3, [r7, #8]
    }

    if (hc->doublebuffer == 0U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d162      	bne.n	80065ac <USB_HC_StartXfer+0x110>
    {
      /* Set RX buffer count */
      USB_DRD_SET_CHEP_RX_CNT(USBx, phy_ch_num, len);
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006500:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006504:	605a      	str	r2, [r3, #4]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <USB_HC_StartXfer+0x92>
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006514:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006522:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006526:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	e244      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b3e      	cmp	r3, #62	@ 0x3e
 8006532:	d81c      	bhi.n	800656e <USB_HC_StartXfer+0xd2>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <USB_HC_StartXfer+0xae>
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006552:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006556:	6859      	ldr	r1, [r3, #4]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	069a      	lsls	r2, r3, #26
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	e224      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <USB_HC_StartXfer+0xe8>
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	3b01      	subs	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800658c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	069b      	lsls	r3, r3, #26
 8006596:	431a      	orrs	r2, r3
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	e205      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else if (hc->ep_type == EP_TYPE_BULK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	79db      	ldrb	r3, [r3, #7]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	f040 813d 	bne.w	8006830 <USB_HC_StartXfer+0x394>
    {
      /* Double buffer activated */
      if ((hc->xfer_len > hc->max_packet))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	8912      	ldrh	r2, [r2, #8]
 80065be:	4293      	cmp	r3, r2
 80065c0:	f240 80cc 	bls.w	800675c <USB_HC_StartXfer+0x2c0>
      {
        (void)USB_HC_DoubleBuffer(USBx, (uint8_t)phy_ch_num, USB_DRD_BULK_DBUFF_ENBALE);
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2201      	movs	r2, #1
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7ff feca 	bl	8006366 <USB_HC_DoubleBuffer>

        /* Set the Double buffer counter */
        USB_DRD_SET_CHEP_DBUF0_CNT(USBx, phy_ch_num, 0U, len);
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065ec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d110      	bne.n	800661a <USB_HC_StartXfer+0x17e>
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006600:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800660e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006612:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e03d      	b.n	8006696 <USB_HC_StartXfer+0x1fa>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b3e      	cmp	r3, #62	@ 0x3e
 800661e:	d81c      	bhi.n	800665a <USB_HC_StartXfer+0x1be>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <USB_HC_StartXfer+0x19a>
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	3301      	adds	r3, #1
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800663e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	069a      	lsls	r2, r3, #26
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006654:	430a      	orrs	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e01d      	b.n	8006696 <USB_HC_StartXfer+0x1fa>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <USB_HC_StartXfer+0x1d4>
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3b01      	subs	r3, #1
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	069b      	lsls	r3, r3, #26
 8006682:	431a      	orrs	r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800668c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006690:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006694:	601a      	str	r2, [r3, #0]
        USB_DRD_SET_CHEP_DBUF1_CNT(USBx, phy_ch_num, 0U, len);
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800669e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066b0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d110      	bne.n	80066de <USB_HC_StartXfer+0x242>
 80066bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80066da:	605a      	str	r2, [r3, #4]
 80066dc:	e16c      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80066e2:	d81c      	bhi.n	800671e <USB_HC_StartXfer+0x282>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <USB_HC_StartXfer+0x25e>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3301      	adds	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006702:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	069a      	lsls	r2, r3, #26
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	e14c      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <USB_HC_StartXfer+0x298>
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	3b01      	subs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800673c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	069b      	lsls	r3, r3, #26
 8006746:	431a      	orrs	r2, r3
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006754:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	e12d      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
      }
      else  /* Switch to single buffer mode */
      {
        (void)USB_HC_DoubleBuffer(USBx, (uint8_t)phy_ch_num, USB_DRD_BULK_DBUFF_DISABLE);
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2202      	movs	r2, #2
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fdfe 	bl	8006366 <USB_HC_DoubleBuffer>

        /* Set RX buffer count */
        USB_DRD_SET_CHEP_RX_CNT(USBx, phy_ch_num, len);
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006784:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006788:	605a      	str	r2, [r3, #4]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d110      	bne.n	80067b2 <USB_HC_StartXfer+0x316>
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80067ae:	605a      	str	r2, [r3, #4]
 80067b0:	e102      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80067b6:	d81c      	bhi.n	80067f2 <USB_HC_StartXfer+0x356>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <USB_HC_StartXfer+0x332>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	3301      	adds	r3, #1
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	069a      	lsls	r2, r3, #26
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067ec:	430a      	orrs	r2, r1
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	e0e2      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <USB_HC_StartXfer+0x36c>
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3b01      	subs	r3, #1
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006810:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	069b      	lsls	r3, r3, #26
 800681a:	431a      	orrs	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006824:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006828:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	e0c3      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
      }
    }
    else  /* Isochronous */
    {
      /* Set the Double buffer counter */
      USB_DRD_SET_CHEP_DBUF0_CNT(USBx, phy_ch_num, 0U, len);
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006846:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800684a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d110      	bne.n	8006878 <USB_HC_StartXfer+0x3dc>
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800685e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800686c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006870:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e03d      	b.n	80068f4 <USB_HC_StartXfer+0x458>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b3e      	cmp	r3, #62	@ 0x3e
 800687c:	d81c      	bhi.n	80068b8 <USB_HC_StartXfer+0x41c>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	085b      	lsrs	r3, r3, #1
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <USB_HC_StartXfer+0x3f8>
 800688e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006890:	3301      	adds	r3, #1
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800689c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	069a      	lsls	r2, r3, #26
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068b2:	430a      	orrs	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e01d      	b.n	80068f4 <USB_HC_StartXfer+0x458>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <USB_HC_StartXfer+0x432>
 80068c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ca:	3b01      	subs	r3, #1
 80068cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	069b      	lsls	r3, r3, #26
 80068e0:	431a      	orrs	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80068f2:	601a      	str	r2, [r3, #0]
      USB_DRD_SET_CHEP_DBUF1_CNT(USBx, phy_ch_num, 0U, len);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800690a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800690e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006912:	605a      	str	r2, [r3, #4]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d110      	bne.n	800693c <USB_HC_StartXfer+0x4a0>
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006922:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006934:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	e03d      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006940:	d81c      	bhi.n	800697c <USB_HC_StartXfer+0x4e0>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	633b      	str	r3, [r7, #48]	@ 0x30
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <USB_HC_StartXfer+0x4bc>
 8006952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006954:	3301      	adds	r3, #1
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006960:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	069a      	lsls	r2, r3, #26
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006972:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	e01d      	b.n	80069b8 <USB_HC_StartXfer+0x51c>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <USB_HC_StartXfer+0x4f6>
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	3b01      	subs	r3, #1
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800699a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	069b      	lsls	r3, r3, #26
 80069a4:	431a      	orrs	r2, r3
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80069b6:	605a      	str	r2, [r3, #4]
    }
#endif /* USE_USB_DOUBLE_BUFFER */

    /* Enable host channel */
    USB_DRD_SET_CHEP_RX_STATUS(USBx, phy_ch_num, USB_CH_RX_VALID);
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b4c      	ldr	r3, [pc, #304]	@ (8006af4 <USB_HC_StartXfer+0x658>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e07c      	b.n	8006ae8 <USB_HC_StartXfer+0x64c>
  }
  else   /* Out Channel */
  {
    /* Multi packet transfer */
    if (hc->xfer_len > hc->max_packet)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	8912      	ldrh	r2, [r2, #8]
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d903      	bls.n	8006a02 <USB_HC_StartXfer+0x566>
    {
      len = hc->max_packet;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	891b      	ldrh	r3, [r3, #8]
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	e002      	b.n	8006a08 <USB_HC_StartXfer+0x56c>
    }
    else
    {
      len = hc->xfer_len;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	60bb      	str	r3, [r7, #8]
    }

    /* Configure and validate Tx endpoint */
    if (hc->doublebuffer == 0U)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d13c      	bne.n	8006a8c <USB_HC_StartXfer+0x5f0>
    {
      USB_WritePMA(USBx, hc->xfer_buff, hc->pmaadress, (uint16_t)len);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68d9      	ldr	r1, [r3, #12]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fb79 	bl	8006116 <USB_WritePMA>
      USB_DRD_SET_CHEP_TX_CNT(USBx, phy_ch_num, (uint16_t)len);
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a3e:	b292      	uxth	r2, r2
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	041a      	lsls	r2, r3, #16
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a62:	430a      	orrs	r2, r1
 8006a64:	601a      	str	r2, [r3, #0]

      /* SET PID SETUP  */
      if ((hc->data_pid) == HC_PID_SETUP)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	7a9b      	ldrb	r3, [r3, #10]
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d120      	bne.n	8006ab0 <USB_HC_StartXfer+0x614>
      {
        USB_DRD_CHEP_TX_SETUP(USBx,  phy_ch_num);
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e011      	b.n	8006ab0 <USB_HC_StartXfer+0x614>
      }
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else if (hc->ep_type == EP_TYPE_BULK)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	79db      	ldrb	r3, [r3, #7]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d107      	bne.n	8006aa4 <USB_HC_StartXfer+0x608>
    {
      (void)USB_HC_BULK_DB_StartXfer(USBx, hc, ch_reg, &len);
 8006a94:	f107 0308 	add.w	r3, r7, #8
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f897 	bl	8006bd0 <USB_HC_BULK_DB_StartXfer>
 8006aa2:	e005      	b.n	8006ab0 <USB_HC_StartXfer+0x614>
    }
    else
    {
      (void)USB_HC_ISO_DB_StartXfer(USBx, hc, len);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f826 	bl	8006afc <USB_HC_ISO_DB_StartXfer>
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    /* Enable host channel */
    USB_DRD_SET_CHEP_TX_STATUS(USBx, hc->phy_ch_num, USB_CH_TX_VALID);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4b0e      	ldr	r3, [pc, #56]	@ (8006af8 <USB_HC_StartXfer+0x65c>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac4:	f083 0310 	eor.w	r3, r3, #16
 8006ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	f083 0320 	eor.w	r3, r3, #32
 8006ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3738      	adds	r7, #56	@ 0x38
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	07ffbf8f 	.word	0x07ffbf8f
 8006af8:	07ff8fbf 	.word	0x07ff8fbf

08006afc <USB_HC_ISO_DB_StartXfer>:
  * @retval HAL state
  */
static HAL_StatusTypeDef USB_HC_ISO_DB_StartXfer(USB_DRD_TypeDef *USBx,
                                                 USB_DRD_HCTypeDef *hc,
                                                 uint32_t len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t phy_ch_num = (uint32_t)hc->phy_ch_num;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	617b      	str	r3, [r7, #20]

  /* check the DTOG_TX to determine in which buffer we should write */
  if ((USB_DRD_GET_CHEP(USBx, phy_ch_num) & USB_CH_DTOG_TX) != 0U)
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d029      	beq.n	8006b74 <USB_HC_ISO_DB_StartXfer+0x78>
  {
    USB_DRD_SET_CHEP_DBUF0_CNT(USBx, phy_ch_num, 1U, len);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b3a:	b292      	uxth	r2, r2
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b4a:	6819      	ldr	r1, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	041a      	lsls	r2, r3, #16
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
    USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr0, (uint16_t)len);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68d9      	ldr	r1, [r3, #12]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fad2 	bl	8006116 <USB_WritePMA>
 8006b72:	e028      	b.n	8006bc6 <USB_HC_ISO_DB_StartXfer+0xca>
  }
  else
  {
    /* DTOGTX=0 */
    /* Set the Double buffer counter for pmabuffer0 */
    USB_DRD_SET_CHEP_DBUF1_CNT(USBx, phy_ch_num, 1U, len);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b9e:	6859      	ldr	r1, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	041a      	lsls	r2, r3, #16
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	605a      	str	r2, [r3, #4]
    USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr1, (uint16_t)len);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	68d9      	ldr	r1, [r3, #12]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff faa8 	bl	8006116 <USB_WritePMA>
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USB_HC_BULK_DB_StartXfer>:
  */
static HAL_StatusTypeDef USB_HC_BULK_DB_StartXfer(USB_DRD_TypeDef *USBx,
                                                  USB_DRD_HCTypeDef *hc,
                                                  uint32_t ch_reg,
                                                  uint32_t *len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
  uint32_t phy_ch_num = (uint32_t)hc->phy_ch_num;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	617b      	str	r3, [r7, #20]

  /* -Double Buffer Mangement- */
  if (hc->xfer_len_db > hc->max_packet)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	8912      	ldrh	r2, [r2, #8]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	f240 80ec 	bls.w	8006dca <USB_HC_BULK_DB_StartXfer+0x1fa>
  {
    /* enable double buffer mode */
    (void)USB_HC_DoubleBuffer(USBx, (uint8_t)phy_ch_num, USB_DRD_BULK_DBUFF_ENBALE);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fbb3 	bl	8006366 <USB_HC_DoubleBuffer>
    *len = hc->max_packet;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	891b      	ldrh	r3, [r3, #8]
 8006c04:	461a      	mov	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	601a      	str	r2, [r3, #0]
    hc->xfer_len_db -= *len;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	1ad2      	subs	r2, r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	615a      	str	r2, [r3, #20]

    /* Prepare two buffer before enabling host */
    if ((ch_reg & USB_CH_DTOG_TX) == 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d12c      	bne.n	8006c7c <USB_HC_BULK_DB_StartXfer+0xac>
    {
      /* Write Buffer0 */
      USB_DRD_SET_CHEP_DBUF0_CNT(USBx, phy_ch_num, 1U, (uint16_t)*len);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c4c:	6819      	ldr	r1, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	041a      	lsls	r2, r3, #16
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c62:	430a      	orrs	r2, r1
 8006c64:	601a      	str	r2, [r3, #0]
      USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr0, (uint16_t)*len);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68d9      	ldr	r1, [r3, #12]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fa4e 	bl	8006116 <USB_WritePMA>
 8006c7a:	e02b      	b.n	8006cd4 <USB_HC_BULK_DB_StartXfer+0x104>
    }
    else
    {
      /* Write Buffer1 */
      USB_DRD_SET_CHEP_DBUF1_CNT(USBx, phy_ch_num, 1U, (uint16_t)*len);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c96:	b292      	uxth	r2, r2
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ca2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	041a      	lsls	r2, r3, #16
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
      USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr1, (uint16_t)*len);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68d9      	ldr	r1, [r3, #12]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fa21 	bl	8006116 <USB_WritePMA>
    }

    hc->xfer_buff += *len;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	441a      	add	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	60da      	str	r2, [r3, #12]

    /* Multi packet transfer */
    if (hc->xfer_len_db > hc->max_packet)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	8912      	ldrh	r2, [r2, #8]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d907      	bls.n	8006cfe <USB_HC_BULK_DB_StartXfer+0x12e>
    {
      hc->xfer_len_db -= *len;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	695a      	ldr	r2, [r3, #20]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	615a      	str	r2, [r3, #20]
 8006cfc:	e006      	b.n	8006d0c <USB_HC_BULK_DB_StartXfer+0x13c>
    }
    else
    {
      *len = hc->xfer_len_db;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	601a      	str	r2, [r3, #0]
      hc->xfer_len_db = 0U;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	615a      	str	r2, [r3, #20]
    }

    if ((ch_reg & USB_CH_DTOG_TX) == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d12c      	bne.n	8006d70 <USB_HC_BULK_DB_StartXfer+0x1a0>
    {
      /* Write Buffer1 */
      USB_DRD_SET_CHEP_DBUF1_CNT(USBx, phy_ch_num, 1U, (uint16_t)*len);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d30:	b292      	uxth	r2, r2
 8006d32:	605a      	str	r2, [r3, #4]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	041a      	lsls	r2, r3, #16
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
      USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr1, (uint16_t)*len);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68d9      	ldr	r1, [r3, #12]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff f9d4 	bl	8006116 <USB_WritePMA>
 8006d6e:	e05f      	b.n	8006e30 <USB_HC_BULK_DB_StartXfer+0x260>
    }
    else
    {
      /* Write Buffer0 */
      USB_DRD_SET_CHEP_DBUF0_CNT(USBx, phy_ch_num, 1U, (uint16_t)*len);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	041a      	lsls	r2, r3, #16
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
      USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr0, (uint16_t)*len);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68d9      	ldr	r1, [r3, #12]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff f9a7 	bl	8006116 <USB_WritePMA>
 8006dc8:	e032      	b.n	8006e30 <USB_HC_BULK_DB_StartXfer+0x260>
    }
  }
  else
  {
    /* Disable bulk double buffer mode */
    (void)USB_HC_DoubleBuffer(USBx, (uint8_t)phy_ch_num, USB_DRD_BULK_DBUFF_DISABLE);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2202      	movs	r2, #2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fac7 	bl	8006366 <USB_HC_DoubleBuffer>
    USB_WritePMA(USBx, hc->xfer_buff, hc->pmaaddr0, (uint16_t)*len);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	68d9      	ldr	r1, [r3, #12]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff f995 	bl	8006116 <USB_WritePMA>
    USB_DRD_SET_CHEP_TX_CNT(USBx, phy_ch_num, (uint16_t)*len);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006df4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e06:	b292      	uxth	r2, r2
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e16:	6819      	ldr	r1, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	041a      	lsls	r2, r3, #16
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <USB_HC_IN_Halt>:
  * @param  hc_num Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_IN_Halt(USB_DRD_TypeDef *USBx, uint8_t phy_ch)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  /* Set disable to Channel */
  USB_DRD_SET_CHEP_RX_STATUS(USBx, phy_ch, USB_CH_RX_DIS);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <USB_HC_IN_Halt+0x40>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	441a      	add	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	07ffbf8f 	.word	0x07ffbf8f

08006e80 <USB_HC_OUT_Halt>:
  * @param  hc_num Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_OUT_Halt(USB_DRD_TypeDef *USBx, uint8_t phy_ch)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  /* Set disable to Channel */
  USB_DRD_SET_CHEP_TX_STATUS(USBx, phy_ch, USB_CH_TX_DIS);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <USB_HC_OUT_Halt+0x40>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	07ff8fbf 	.word	0x07ff8fbf

08006ec4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_DRD_TypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  USBx->ISTR &= ~(USB_ISTR_DIR | USB_ISTR_L1REQ |
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ed4:	f023 0390 	bic.w	r3, r3, #144	@ 0x90
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6453      	str	r3, [r2, #68]	@ 0x44
                  USB_ISTR_SUSP | USB_ISTR_WKUP |
                  USB_ISTR_ERR | USB_ISTR_PMAOVR |
                  USB_ISTR_CTR);

  /* Set PowerDown */
  USBx->CNTR |= USB_CNTR_PDWN;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee0:	f043 0202 	orr.w	r2, r3, #2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force a Reset */
  USBx->CNTR |= USB_CNTR_USBRST;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USBH_CDC_ReceiveCallback>:
/* USER CODE BEGIN 0 */


int flag = 1;
void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
	//flag = 1;
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
	//HAL_PWREx_EnableVddUSB();
		hhcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8006f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f98 <MX_USB_HOST_Init+0x80>)
 8006f20:	601a      	str	r2, [r3, #0]
		  hhcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f24:	2208      	movs	r2, #8
 8006f26:	711a      	strb	r2, [r3, #4]
		  hhcd_USB_DRD_FS.Init.Host_channels = 8;
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	715a      	strb	r2, [r3, #5]
		  hhcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8006f2e:	4b19      	ldr	r3, [pc, #100]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f30:	2202      	movs	r2, #2
 8006f32:	71da      	strb	r2, [r3, #7]
		  hhcd_USB_DRD_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f36:	2202      	movs	r2, #2
 8006f38:	725a      	strb	r2, [r3, #9]
		  hhcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	729a      	strb	r2, [r3, #10]
		  hhcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8006f40:	4b14      	ldr	r3, [pc, #80]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	72da      	strb	r2, [r3, #11]
		  hhcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8006f46:	4b13      	ldr	r3, [pc, #76]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	739a      	strb	r2, [r3, #14]
		  hhcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	73da      	strb	r2, [r3, #15]
		  hhcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <MX_USB_HOST_Init+0x7c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	741a      	strb	r2, [r3, #16]
//		    Error_Handler();
//		  }
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006f58:	2201      	movs	r2, #1
 8006f5a:	4910      	ldr	r1, [pc, #64]	@ (8006f9c <MX_USB_HOST_Init+0x84>)
 8006f5c:	4810      	ldr	r0, [pc, #64]	@ (8006fa0 <MX_USB_HOST_Init+0x88>)
 8006f5e:	f000 fe87 	bl	8007c70 <USBH_Init>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <MX_USB_HOST_Init+0x54>
  {
    Error_Handler();
 8006f68:	f7f9 faa8 	bl	80004bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006f6c:	490d      	ldr	r1, [pc, #52]	@ (8006fa4 <MX_USB_HOST_Init+0x8c>)
 8006f6e:	480c      	ldr	r0, [pc, #48]	@ (8006fa0 <MX_USB_HOST_Init+0x88>)
 8006f70:	f000 ff0c 	bl	8007d8c <USBH_RegisterClass>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <MX_USB_HOST_Init+0x66>
  {
    Error_Handler();
 8006f7a:	f7f9 fa9f 	bl	80004bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f7e:	4808      	ldr	r0, [pc, #32]	@ (8006fa0 <MX_USB_HOST_Init+0x88>)
 8006f80:	f000 ff90 	bl	8007ea4 <USBH_Start>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <MX_USB_HOST_Init+0x76>
  {
    Error_Handler();
 8006f8a:	f7f9 fa97 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000124 	.word	0x20000124
 8006f98:	40016000 	.word	0x40016000
 8006f9c:	08006fbd 	.word	0x08006fbd
 8006fa0:	20000488 	.word	0x20000488
 8006fa4:	2000000c 	.word	0x2000000c

08006fa8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006fac:	4802      	ldr	r0, [pc, #8]	@ (8006fb8 <MX_USB_HOST_Process+0x10>)
 8006fae:	f000 ff89 	bl	8007ec4 <USBH_Process>
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000488 	.word	0x20000488

08006fbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d831      	bhi.n	8007034 <USBH_UserProcess+0x78>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <USBH_UserProcess+0x1c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08007035 	.word	0x08007035
 8006fdc:	0800700d 	.word	0x0800700d
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08007021 	.word	0x08007021
 8006fe8:	08006fed 	.word	0x08006fed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006fec:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <USBH_UserProcess+0x84>)
 8006fee:	2203      	movs	r2, #3
 8006ff0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006ff8:	4812      	ldr	r0, [pc, #72]	@ (8007044 <USBH_UserProcess+0x88>)
 8006ffa:	f7f9 ffaf 	bl	8000f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8006ffe:	2200      	movs	r2, #0
 8007000:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007004:	480f      	ldr	r0, [pc, #60]	@ (8007044 <USBH_UserProcess+0x88>)
 8007006:	f7f9 ffa9 	bl	8000f5c <HAL_GPIO_WritePin>
  break;
 800700a:	e014      	b.n	8007036 <USBH_UserProcess+0x7a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800700c:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <USBH_UserProcess+0x84>)
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8007012:	2201      	movs	r2, #1
 8007014:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007018:	480a      	ldr	r0, [pc, #40]	@ (8007044 <USBH_UserProcess+0x88>)
 800701a:	f7f9 ff9f 	bl	8000f5c <HAL_GPIO_WritePin>
  break;
 800701e:	e00a      	b.n	8007036 <USBH_UserProcess+0x7a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007020:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <USBH_UserProcess+0x84>)
 8007022:	2201      	movs	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8007026:	2201      	movs	r2, #1
 8007028:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800702c:	4805      	ldr	r0, [pc, #20]	@ (8007044 <USBH_UserProcess+0x88>)
 800702e:	f7f9 ff95 	bl	8000f5c <HAL_GPIO_WritePin>
  break;
 8007032:	e000      	b.n	8007036 <USBH_UserProcess+0x7a>

  default:
  break;
 8007034:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000860 	.word	0x20000860
 8007044:	42020000 	.word	0x42020000

08007048 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b089      	sub	sp, #36	@ 0x24
 800704c:	af04      	add	r7, sp, #16
 800704e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007050:	2301      	movs	r3, #1
 8007052:	2202      	movs	r2, #2
 8007054:	2102      	movs	r1, #2
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fede 	bl	8007e18 <USBH_FindInterface>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2bff      	cmp	r3, #255	@ 0xff
 8007064:	d002      	beq.n	800706c <USBH_CDC_InterfaceInit+0x24>
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d901      	bls.n	8007070 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800706c:	2302      	movs	r3, #2
 800706e:	e13d      	b.n	80072ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 feb3 	bl	8007de0 <USBH_SelectInterface>
 800707a:	4603      	mov	r3, r0
 800707c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	e131      	b.n	80072ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800708e:	2050      	movs	r0, #80	@ 0x50
 8007090:	f002 f92a 	bl	80092e8 <malloc>
 8007094:	4603      	mov	r3, r0
 8007096:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e11f      	b.n	80072ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070ac:	2250      	movs	r2, #80	@ 0x50
 80070ae:	2100      	movs	r1, #0
 80070b0:	68b8      	ldr	r0, [r7, #8]
 80070b2:	f002 f9f7 	bl	80094a4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	211a      	movs	r1, #26
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da15      	bge.n	80070fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	211a      	movs	r1, #26
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	4413      	add	r3, r2
 80070da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	211a      	movs	r1, #26
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f002 f88e 	bl	8009222 <USBH_AllocPipe>
 8007106:	4603      	mov	r3, r0
 8007108:	461a      	mov	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	7819      	ldrb	r1, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	7858      	ldrb	r0, [r3, #1]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	8952      	ldrh	r2, [r2, #10]
 8007126:	9202      	str	r2, [sp, #8]
 8007128:	2203      	movs	r2, #3
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	4623      	mov	r3, r4
 8007130:	4602      	mov	r2, r0
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f002 f846 	bl	80091c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fd4f 	bl	8007be4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007146:	2300      	movs	r3, #0
 8007148:	2200      	movs	r2, #0
 800714a:	210a      	movs	r1, #10
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fe63 	bl	8007e18 <USBH_FindInterface>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2bff      	cmp	r3, #255	@ 0xff
 800715a:	d002      	beq.n	8007162 <USBH_CDC_InterfaceInit+0x11a>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d901      	bls.n	8007166 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007162:	2302      	movs	r3, #2
 8007164:	e0c2      	b.n	80072ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	211a      	movs	r1, #26
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b25b      	sxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	da16      	bge.n	80071ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	211a      	movs	r1, #26
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	211a      	movs	r1, #26
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	4413      	add	r3, r2
 80071a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071a4:	881a      	ldrh	r2, [r3, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	835a      	strh	r2, [r3, #26]
 80071aa:	e015      	b.n	80071d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	211a      	movs	r1, #26
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	211a      	movs	r1, #26
 80071c8:	fb01 f303 	mul.w	r3, r1, r3
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071d2:	881a      	ldrh	r2, [r3, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	211a      	movs	r1, #26
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da16      	bge.n	800721e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	211a      	movs	r1, #26
 80071f6:	fb01 f303 	mul.w	r3, r1, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	211a      	movs	r1, #26
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007216:	881a      	ldrh	r2, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	835a      	strh	r2, [r3, #26]
 800721c:	e015      	b.n	800724a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	211a      	movs	r1, #26
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	211a      	movs	r1, #26
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	7b9b      	ldrb	r3, [r3, #14]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 ffe6 	bl	8009222 <USBH_AllocPipe>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	7bdb      	ldrb	r3, [r3, #15]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 ffdc 	bl	8009222 <USBH_AllocPipe>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	7b59      	ldrb	r1, [r3, #13]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	7b98      	ldrb	r0, [r3, #14]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	8b12      	ldrh	r2, [r2, #24]
 800728a:	9202      	str	r2, [sp, #8]
 800728c:	2202      	movs	r2, #2
 800728e:	9201      	str	r2, [sp, #4]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4623      	mov	r3, r4
 8007294:	4602      	mov	r2, r0
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 ff94 	bl	80091c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	7b19      	ldrb	r1, [r3, #12]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	7bd8      	ldrb	r0, [r3, #15]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	8b52      	ldrh	r2, [r2, #26]
 80072b4:	9202      	str	r2, [sp, #8]
 80072b6:	2202      	movs	r2, #2
 80072b8:	9201      	str	r2, [sp, #4]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	4623      	mov	r3, r4
 80072be:	4602      	mov	r2, r0
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 ff7f 	bl	80091c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	7b5b      	ldrb	r3, [r3, #13]
 80072d2:	2200      	movs	r2, #0
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc84 	bl	8007be4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	7b1b      	ldrb	r3, [r3, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fc7d 	bl	8007be4 <USBH_LL_SetToggle>

  return USBH_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}

080072f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 ff74 	bl	8009202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 ff9f 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	7b1b      	ldrb	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00e      	beq.n	8007352 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	7b1b      	ldrb	r3, [r3, #12]
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 ff61 	bl	8009202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	7b1b      	ldrb	r3, [r3, #12]
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 ff8c 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	7b5b      	ldrb	r3, [r3, #13]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00e      	beq.n	8007378 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	7b5b      	ldrb	r3, [r3, #13]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 ff4e 	bl	8009202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	7b5b      	ldrb	r3, [r3, #13]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 ff79 	bl	8009264 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	4618      	mov	r0, r3
 800738e:	f001 ffb3 	bl	80092f8 <free>
    phost->pActiveClass->pData = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007398:	2200      	movs	r2, #0
 800739a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3340      	adds	r3, #64	@ 0x40
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f8da 	bl	8007578 <GetLineCoding>
 80073c4:	4603      	mov	r3, r0
 80073c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073c8:	7afb      	ldrb	r3, [r7, #11]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d105      	bne.n	80073da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073d4:	2102      	movs	r1, #2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073da:	7afb      	ldrb	r3, [r7, #11]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007404:	2b04      	cmp	r3, #4
 8007406:	d877      	bhi.n	80074f8 <USBH_CDC_Process+0x114>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <USBH_CDC_Process+0x2c>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007425 	.word	0x08007425
 8007414:	0800742b 	.word	0x0800742b
 8007418:	0800745b 	.word	0x0800745b
 800741c:	080074cf 	.word	0x080074cf
 8007420:	080074dd 	.word	0x080074dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
      break;
 8007428:	e06d      	b.n	8007506 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8c0 	bl	80075b6 <SetLineCoding>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007448:	e058      	b.n	80074fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d055      	beq.n	80074fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2204      	movs	r2, #4
 8007454:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007458:	e050      	b.n	80074fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3340      	adds	r3, #64	@ 0x40
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f889 	bl	8007578 <GetLineCoding>
 8007466:	4603      	mov	r3, r0
 8007468:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d126      	bne.n	80074be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007482:	791b      	ldrb	r3, [r3, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d13b      	bne.n	8007500 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007492:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007494:	429a      	cmp	r2, r3
 8007496:	d133      	bne.n	8007500 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d12b      	bne.n	8007500 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d124      	bne.n	8007500 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9d3 	bl	8007862 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074bc:	e020      	b.n	8007500 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d01d      	beq.n	8007500 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2204      	movs	r2, #4
 80074c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80074cc:	e018      	b.n	8007500 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8ec 	bl	80076ac <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f95f 	bl	8007798 <CDC_ProcessReception>
      break;
 80074da:	e014      	b.n	8007506 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fa45 	bl	800896e <USBH_ClrFeature>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80074f6:	e005      	b.n	8007504 <USBH_CDC_Process+0x120>

    default:
      break;
 80074f8:	bf00      	nop
 80074fa:	e004      	b.n	8007506 <USBH_CDC_Process+0x122>
      break;
 80074fc:	bf00      	nop
 80074fe:	e002      	b.n	8007506 <USBH_CDC_Process+0x122>
      break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <USBH_CDC_Process+0x122>
      break;
 8007504:	bf00      	nop

  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b0b      	cmp	r3, #11
 8007540:	d115      	bne.n	800756e <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fe56 	bl	8009202 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	7b1b      	ldrb	r3, [r3, #12]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fe50 	bl	8009202 <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	7b5b      	ldrb	r3, [r3, #13]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fe4a 	bl	8009202 <USBH_ClosePipe>
  }
  return USBH_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	22a1      	movs	r2, #161	@ 0xa1
 8007586:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2221      	movs	r2, #33	@ 0x21
 800758c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2207      	movs	r2, #7
 800759e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2207      	movs	r2, #7
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fbba 	bl	8008d20 <USBH_CtlReq>
 80075ac:	4603      	mov	r3, r0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2221      	movs	r2, #33	@ 0x21
 80075c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2207      	movs	r2, #7
 80075dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2207      	movs	r2, #7
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fb9b 	bl	8008d20 <USBH_CtlReq>
 80075ea:	4603      	mov	r3, r0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <USBH_CDC_Transmit+0x2e>
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800761e:	2b03      	cmp	r3, #3
 8007620:	d10f      	bne.n	8007642 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	625a      	str	r2, [r3, #36]	@ 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2203      	movs	r2, #3
 8007632:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    Status = USBH_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <USBH_CDC_Receive+0x2e>
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800767a:	2b03      	cmp	r3, #3
 800767c:	d10f      	bne.n	800769e <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	629a      	str	r2, [r3, #40]	@ 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2203      	movs	r2, #3
 800768e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    Status = USBH_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076be:	2300      	movs	r3, #0
 80076c0:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d002      	beq.n	80076d2 <CDC_ProcessTransmission+0x26>
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d023      	beq.n	8007718 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076d0:	e05e      	b.n	8007790 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	8b12      	ldrh	r2, [r2, #24]
 80076da:	4293      	cmp	r3, r2
 80076dc:	d90b      	bls.n	80076f6 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	69d9      	ldr	r1, [r3, #28]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8b1a      	ldrh	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	2001      	movs	r0, #1
 80076ec:	9000      	str	r0, [sp, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 fd25 	bl	800913e <USBH_BulkSendData>
 80076f4:	e00b      	b.n	800770e <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7b5b      	ldrb	r3, [r3, #13]
 8007704:	2001      	movs	r0, #1
 8007706:	9000      	str	r0, [sp, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fd18 	bl	800913e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007716:	e03b      	b.n	8007790 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	7b5b      	ldrb	r3, [r3, #13]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa36 	bl	8007b90 <USBH_LL_GetURBState>
 8007724:	4603      	mov	r3, r0
 8007726:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d128      	bne.n	8007780 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	8b12      	ldrh	r2, [r2, #24]
 8007736:	4293      	cmp	r3, r2
 8007738:	d90e      	bls.n	8007758 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	8b12      	ldrh	r2, [r2, #24]
 8007742:	1a9a      	subs	r2, r3, r2
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	8b12      	ldrh	r2, [r2, #24]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	61da      	str	r2, [r3, #28]
 8007756:	e002      	b.n	800775e <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800776e:	e00e      	b.n	800778e <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f868 	bl	800784e <USBH_CDC_TransmitCallback>
      break;
 800777e:	e006      	b.n	800778e <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800778e:	bf00      	nop
  }
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d002      	beq.n	80077be <CDC_ProcessReception+0x26>
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d00e      	beq.n	80077da <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077bc:	e043      	b.n	8007846 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a19      	ldr	r1, [r3, #32]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	8b5a      	ldrh	r2, [r3, #26]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	7b1b      	ldrb	r3, [r3, #12]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fcdc 	bl	8009188 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2204      	movs	r2, #4
 80077d4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80077d8:	e035      	b.n	8007846 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	7b1b      	ldrb	r3, [r3, #12]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9d5 	bl	8007b90 <USBH_LL_GetURBState>
 80077e6:	4603      	mov	r3, r0
 80077e8:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077ea:	7cfb      	ldrb	r3, [r7, #19]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d129      	bne.n	8007844 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	7b1b      	ldrb	r3, [r3, #12]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f938 	bl	8007a6c <USBH_LL_GetLastXferSize>
 80077fc:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	429a      	cmp	r2, r3
 8007806:	d016      	beq.n	8007836 <CDC_ProcessReception+0x9e>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	8b5b      	ldrh	r3, [r3, #26]
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4293      	cmp	r3, r2
 8007812:	d910      	bls.n	8007836 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	441a      	add	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2203      	movs	r2, #3
 8007830:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007834:	e006      	b.n	8007844 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fb5f 	bl	8006f02 <USBH_CDC_ReceiveCallback>
      break;
 8007844:	bf00      	nop
  }
}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8007884:	4618      	mov	r0, r3
 8007886:	f000 feea 	bl	800865e <USBH_LL_IncTimer>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 ff14 	bl	80086ce <USBH_LL_Connect>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ff1d 	bl	80086fc <USBH_LL_Disconnect>
}
 80078c2:	bf00      	nop
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70fb      	strb	r3, [r7, #3]
 80078d6:	4613      	mov	r3, r2
 80078d8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fedc 	bl	80086b2 <USBH_LL_PortEnabled>
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007912:	2b01      	cmp	r3, #1
 8007914:	d129      	bne.n	800796a <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_DRD_FS.pData = phost;
 8007916:	4a17      	ldr	r2, [pc, #92]	@ (8007974 <USBH_LL_Init+0x70>)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c2 3360 	str.w	r3, [r2, #864]	@ 0x360
  phost->pData = &hhcd_USB_DRD_FS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a14      	ldr	r2, [pc, #80]	@ (8007974 <USBH_LL_Init+0x70>)
 8007922:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8007926:	4b13      	ldr	r3, [pc, #76]	@ (8007974 <USBH_LL_Init+0x70>)
 8007928:	4a13      	ldr	r2, [pc, #76]	@ (8007978 <USBH_LL_Init+0x74>)
 800792a:	601a      	str	r2, [r3, #0]
  hhcd_USB_DRD_FS.Init.Host_channels = 8;
 800792c:	4b11      	ldr	r3, [pc, #68]	@ (8007974 <USBH_LL_Init+0x70>)
 800792e:	2208      	movs	r2, #8
 8007930:	715a      	strb	r2, [r3, #5]
  hhcd_USB_DRD_FS.Init.speed = HCD_SPEED_FULL;
 8007932:	4b10      	ldr	r3, [pc, #64]	@ (8007974 <USBH_LL_Init+0x70>)
 8007934:	2201      	movs	r2, #1
 8007936:	71da      	strb	r2, [r3, #7]
  hhcd_USB_DRD_FS.Init.dma_enable = DISABLE;
 8007938:	4b0e      	ldr	r3, [pc, #56]	@ (8007974 <USBH_LL_Init+0x70>)
 800793a:	2200      	movs	r2, #0
 800793c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_DRD_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <USBH_LL_Init+0x70>)
 8007940:	2202      	movs	r2, #2
 8007942:	725a      	strb	r2, [r3, #9]
  hhcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8007944:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <USBH_LL_Init+0x70>)
 8007946:	2200      	movs	r2, #0
 8007948:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_DRD_FS) != HAL_OK)
 800794a:	480a      	ldr	r0, [pc, #40]	@ (8007974 <USBH_LL_Init+0x70>)
 800794c:	f7f9 fbb0 	bl	80010b0 <HAL_HCD_Init>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 8007956:	f7f8 fdb1 	bl	80004bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_DRD_FS));
 800795a:	4806      	ldr	r0, [pc, #24]	@ (8007974 <USBH_LL_Init+0x70>)
 800795c:	f7fa fad8 	bl	8001f10 <HAL_HCD_GetCurrentFrame>
 8007960:	4603      	mov	r3, r0
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fe6b 	bl	8008640 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20000124 	.word	0x20000124
 8007978:	40016000 	.word	0x40016000

0800797c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007992:	4618      	mov	r0, r3
 8007994:	f7fa fa11 	bl	8001dba <HAL_HCD_Start>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f93a 	bl	8007c18 <USBH_Get_USB_Status>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fa fa2a 	bl	8001e22 <HAL_HCD_Stop>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 f91f 	bl	8007c18 <USBH_Get_USB_Status>
 80079da:	4603      	mov	r3, r0
 80079dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079de:	7bbb      	ldrb	r3, [r7, #14]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fa fa96 	bl	8001f2c <HAL_HCD_GetCurrentSpeed>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d00c      	beq.n	8007a20 <USBH_LL_GetSpeed+0x38>
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d80d      	bhi.n	8007a26 <USBH_LL_GetSpeed+0x3e>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <USBH_LL_GetSpeed+0x2c>
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d003      	beq.n	8007a1a <USBH_LL_GetSpeed+0x32>
 8007a12:	e008      	b.n	8007a26 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
    break;
 8007a18:	e008      	b.n	8007a2c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a1e:	e005      	b.n	8007a2c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007a20:	2302      	movs	r3, #2
 8007a22:	73fb      	strb	r3, [r7, #15]
    break;
 8007a24:	e002      	b.n	8007a2c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
    break;
 8007a2a:	bf00      	nop
  }
  return  speed;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fa fa0f 	bl	8001e70 <HAL_HCD_ResetPort>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 f8dd 	bl	8007c18 <USBH_Get_USB_Status>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007a7e:	78fa      	ldrb	r2, [r7, #3]
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fa fa2f 	bl	8001ee6 <HAL_HCD_HC_GetXferCount>
 8007a88:	4603      	mov	r3, r0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a92:	b590      	push	{r4, r7, lr}
 8007a94:	b089      	sub	sp, #36	@ 0x24
 8007a96:	af04      	add	r7, sp, #16
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	70fb      	strb	r3, [r7, #3]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70bb      	strb	r3, [r7, #2]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007aba:	787c      	ldrb	r4, [r7, #1]
 8007abc:	78ba      	ldrb	r2, [r7, #2]
 8007abe:	78f9      	ldrb	r1, [r7, #3]
 8007ac0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	f7f9 fb3d 	bl	8001150 <HAL_HCD_HC_Init>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 f89b 	bl	8007c18 <USBH_Get_USB_Status>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}

08007af0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 feae 	bl	8001870 <HAL_HCD_HC_Halt>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f87c 	bl	8007c18 <USBH_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007b2e:	b590      	push	{r4, r7, lr}
 8007b30:	b089      	sub	sp, #36	@ 0x24
 8007b32:	af04      	add	r7, sp, #16
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70bb      	strb	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007b56:	787c      	ldrb	r4, [r7, #1]
 8007b58:	78ba      	ldrb	r2, [r7, #2]
 8007b5a:	78f9      	ldrb	r1, [r7, #3]
 8007b5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b60:	9303      	str	r3, [sp, #12]
 8007b62:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	4623      	mov	r3, r4
 8007b72:	f7f9 fedb 	bl	800192c <HAL_HCD_HC_SubmitRequest>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f84b 	bl	8007c18 <USBH_Get_USB_Status>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}

08007b90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fa f988 	bl	8001ebc <HAL_HCD_HC_GetURBState>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
    //MX_DriverVbusFS(state);
  }

  /* USER CODE BEGIN 0 */
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // to Active the Vbus based on the nucleo board
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007bca:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <USBH_LL_DriverVBUS+0x28>)
 8007bcc:	f7f9 f9c6 	bl	8000f5c <HAL_GPIO_WritePin>
  /* USER CODE END 0*/

  HAL_Delay(200);
 8007bd0:	20c8      	movs	r0, #200	@ 0xc8
 8007bd2:	f7f8 febd 	bl	8000950 <HAL_Delay>
  return USBH_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	42020800 	.word	0x42020800

08007be4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	70bb      	strb	r3, [r7, #2]
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }*/

  return USBH_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7f8 fea0 	bl	8000950 <HAL_Delay>
}
 8007c10:	bf00      	nop
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d817      	bhi.n	8007c5c <USBH_Get_USB_Status+0x44>
 8007c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <USBH_Get_USB_Status+0x1c>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c4b 	.word	0x08007c4b
 8007c3c:	08007c51 	.word	0x08007c51
 8007c40:	08007c57 	.word	0x08007c57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
    break;
 8007c48:	e00b      	b.n	8007c62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4e:	e008      	b.n	8007c62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
    break;
 8007c54:	e005      	b.n	8007c62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c56:	2302      	movs	r3, #2
 8007c58:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5a:	e002      	b.n	8007c62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c60:	bf00      	nop
  }
  return usb_status;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c84:	2302      	movs	r3, #2
 8007c86:	e029      	b.n	8007cdc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	79fa      	ldrb	r2, [r7, #7]
 8007c8c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f81f 	bl	8007ce4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff fe15 	bl	8007904 <USBH_LL_Init>

  return USBH_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e009      	b.n	8007d0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	33e0      	adds	r3, #224	@ 0xe0
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d9f2      	bls.n	8007cf6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e009      	b.n	8007d2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d30:	d3f1      	bcc.n	8007d16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2240      	movs	r2, #64	@ 0x40
 8007d56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  return USBH_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d016      	beq.n	8007dce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10e      	bne.n	8007dc8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	33de      	adds	r3, #222	@ 0xde
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
 8007dc6:	e004      	b.n	8007dd2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	e001      	b.n	8007dd2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d204      	bcs.n	8007e06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007e04:	e001      	b.n	8007e0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e06:	2302      	movs	r3, #2
 8007e08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	4608      	mov	r0, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	461a      	mov	r2, r3
 8007e26:	4603      	mov	r3, r0
 8007e28:	70fb      	strb	r3, [r7, #3]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70bb      	strb	r3, [r7, #2]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e42:	e025      	b.n	8007e90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	221a      	movs	r2, #26
 8007e48:	fb02 f303 	mul.w	r3, r2, r3
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	3302      	adds	r3, #2
 8007e54:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d002      	beq.n	8007e66 <USBH_FindInterface+0x4e>
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	2bff      	cmp	r3, #255	@ 0xff
 8007e64:	d111      	bne.n	8007e8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e6a:	78ba      	ldrb	r2, [r7, #2]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d002      	beq.n	8007e76 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e70:	78bb      	ldrb	r3, [r7, #2]
 8007e72:	2bff      	cmp	r3, #255	@ 0xff
 8007e74:	d109      	bne.n	8007e8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e7a:	787a      	ldrb	r2, [r7, #1]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d002      	beq.n	8007e86 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e80:	787b      	ldrb	r3, [r7, #1]
 8007e82:	2bff      	cmp	r3, #255	@ 0xff
 8007e84:	d101      	bne.n	8007e8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	e006      	b.n	8007e98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e8a:	7dfb      	ldrb	r3, [r7, #23]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d9d6      	bls.n	8007e44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e96:	23ff      	movs	r3, #255	@ 0xff
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	371c      	adds	r7, #28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fd65 	bl	800797c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fe7f 	bl	8007bb8 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d102      	bne.n	8007ee6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b0b      	cmp	r3, #11
 8007eee:	f200 81b0 	bhi.w	8008252 <USBH_Process+0x38e>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <USBH_Process+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f29 	.word	0x08007f29
 8007efc:	08007f5b 	.word	0x08007f5b
 8007f00:	08007fc3 	.word	0x08007fc3
 8007f04:	080081ed 	.word	0x080081ed
 8007f08:	08008253 	.word	0x08008253
 8007f0c:	08008063 	.word	0x08008063
 8007f10:	08008193 	.word	0x08008193
 8007f14:	08008099 	.word	0x08008099
 8007f18:	080080b9 	.word	0x080080b9
 8007f1c:	080080d7 	.word	0x080080d7
 8007f20:	08008105 	.word	0x08008105
 8007f24:	080081d5 	.word	0x080081d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8190 	beq.w	8008256 <USBH_Process+0x392>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007f3c:	20c8      	movs	r0, #200	@ 0xc8
 8007f3e:	f7ff fe60 	bl	8007c02 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fd77 	bl	8007a36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f58:	e17d      	b.n	8008256 <USBH_Process+0x392>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d107      	bne.n	8007f74 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f72:	e17f      	b.n	8008274 <USBH_Process+0x3b0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007f7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f7e:	d914      	bls.n	8007faa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d903      	bls.n	8007fa2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	220d      	movs	r2, #13
 8007f9e:	701a      	strb	r2, [r3, #0]
      break;
 8007fa0:	e168      	b.n	8008274 <USBH_Process+0x3b0>
            phost->gState = HOST_IDLE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
      break;
 8007fa8:	e164      	b.n	8008274 <USBH_Process+0x3b0>
          phost->Timeout += 10U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007fb0:	f103 020a 	add.w	r2, r3, #10
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007fba:	200a      	movs	r0, #10
 8007fbc:	f7ff fe21 	bl	8007c02 <USBH_Delay>
      break;
 8007fc0:	e158      	b.n	8008274 <USBH_Process+0x3b0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007fd8:	2064      	movs	r0, #100	@ 0x64
 8007fda:	f7ff fe12 	bl	8007c02 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff fd02 	bl	80079e8 <USBH_LL_GetSpeed>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2205      	movs	r2, #5
 8007ff2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f913 	bl	8009222 <USBH_AllocPipe>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008004:	2180      	movs	r1, #128	@ 0x80
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f90b 	bl	8009222 <USBH_AllocPipe>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7919      	ldrb	r1, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008028:	9202      	str	r2, [sp, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	9201      	str	r2, [sp, #4]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4603      	mov	r3, r0
 8008032:	2280      	movs	r2, #128	@ 0x80
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f8c5 	bl	80091c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7959      	ldrb	r1, [r3, #5]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800804e:	9202      	str	r2, [sp, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	9201      	str	r2, [sp, #4]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4603      	mov	r3, r0
 8008058:	2200      	movs	r2, #0
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f8b2 	bl	80091c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008060:	e108      	b.n	8008274 <USBH_Process+0x3b0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f90c 	bl	8008280 <USBH_HandleEnum>
 8008068:	4603      	mov	r3, r0
 800806a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	f040 80f2 	bne.w	800825a <USBH_Process+0x396>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008084:	2b01      	cmp	r3, #1
 8008086:	d103      	bne.n	8008090 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2208      	movs	r2, #8
 800808c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800808e:	e0e4      	b.n	800825a <USBH_Process+0x396>
          phost->gState = HOST_INPUT;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2207      	movs	r2, #7
 8008094:	701a      	strb	r2, [r3, #0]
      break;
 8008096:	e0e0      	b.n	800825a <USBH_Process+0x396>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80dd 	beq.w	800825e <USBH_Process+0x39a>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080aa:	2101      	movs	r1, #1
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2208      	movs	r2, #8
 80080b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80080b6:	e0d2      	b.n	800825e <USBH_Process+0x39a>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc0d 	bl	80088e0 <USBH_SetCfg>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 80ca 	bne.w	8008262 <USBH_Process+0x39e>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2209      	movs	r2, #9
 80080d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d4:	e0c5      	b.n	8008262 <USBH_Process+0x39e>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBH_Process+0x238>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80080e4:	2101      	movs	r1, #1
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc1d 	bl	8008926 <USBH_SetFeature>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80b9 	bne.w	8008266 <USBH_Process+0x3a2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	220a      	movs	r2, #10
 80080f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080fa:	e0b4      	b.n	8008266 <USBH_Process+0x3a2>
        phost->gState = HOST_CHECK_CLASS;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	220a      	movs	r2, #10
 8008100:	701a      	strb	r2, [r3, #0]
      break;
 8008102:	e0b0      	b.n	8008266 <USBH_Process+0x3a2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80ad 	beq.w	800826a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
 800811c:	e016      	b.n	800814c <USBH_Process+0x288>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800811e:	7bfa      	ldrb	r2, [r7, #15]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	32de      	adds	r2, #222	@ 0xde
 8008124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008128:	791a      	ldrb	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008130:	429a      	cmp	r2, r3
 8008132:	d108      	bne.n	8008146 <USBH_Process+0x282>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008134:	7bfa      	ldrb	r2, [r7, #15]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32de      	adds	r2, #222	@ 0xde
 800813a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008144:	e005      	b.n	8008152 <USBH_Process+0x28e>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	3301      	adds	r3, #1
 800814a:	73fb      	strb	r3, [r7, #15]
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0e5      	beq.n	800811e <USBH_Process+0x25a>
          }
        }

        if (phost->pActiveClass != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d016      	beq.n	800818a <USBH_Process+0x2c6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <USBH_Process+0x2be>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2206      	movs	r2, #6
 8008172:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800817a:	2103      	movs	r1, #3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008180:	e073      	b.n	800826a <USBH_Process+0x3a6>
            phost->gState = HOST_ABORT_STATE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220d      	movs	r2, #13
 8008186:	701a      	strb	r2, [r3, #0]
      break;
 8008188:	e06f      	b.n	800826a <USBH_Process+0x3a6>
          phost->gState = HOST_ABORT_STATE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220d      	movs	r2, #13
 800818e:	701a      	strb	r2, [r3, #0]
      break;
 8008190:	e06b      	b.n	800826a <USBH_Process+0x3a6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d017      	beq.n	80081cc <USBH_Process+0x308>
      {
        status = phost->pActiveClass->Requests(phost);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <USBH_Process+0x2f8>
        {
          phost->gState = HOST_CLASS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	220b      	movs	r2, #11
 80081b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081ba:	e058      	b.n	800826e <USBH_Process+0x3aa>
        else if (status == USBH_FAIL)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d154      	bne.n	800826e <USBH_Process+0x3aa>
          phost->gState = HOST_ABORT_STATE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	220d      	movs	r2, #13
 80081c8:	701a      	strb	r2, [r3, #0]
      break;
 80081ca:	e050      	b.n	800826e <USBH_Process+0x3aa>
        phost->gState = HOST_ABORT_STATE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220d      	movs	r2, #13
 80081d0:	701a      	strb	r2, [r3, #0]
      break;
 80081d2:	e04c      	b.n	800826e <USBH_Process+0x3aa>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d049      	beq.n	8008272 <USBH_Process+0x3ae>
      {
        phost->pActiveClass->BgndProcess(phost);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
      }
      break;
 80081ea:	e042      	b.n	8008272 <USBH_Process+0x3ae>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff fd75 	bl	8007ce4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d009      	beq.n	8008218 <USBH_Process+0x354>
      {
        phost->pActiveClass->DeInit(phost);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <USBH_Process+0x36a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008228:	2105      	movs	r1, #5
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	d107      	bne.n	800824a <USBH_Process+0x386>
      {
        phost->device.is_ReEnumerated = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fe2e 	bl	8007ea4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008248:	e014      	b.n	8008274 <USBH_Process+0x3b0>
        (void)USBH_LL_Start(phost);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fb96 	bl	800797c <USBH_LL_Start>
      break;
 8008250:	e010      	b.n	8008274 <USBH_Process+0x3b0>

    case HOST_ABORT_STATE:
    default :
      break;
 8008252:	bf00      	nop
 8008254:	e00e      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 8008256:	bf00      	nop
 8008258:	e00c      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 800825a:	bf00      	nop
 800825c:	e00a      	b.n	8008274 <USBH_Process+0x3b0>
    break;
 800825e:	bf00      	nop
 8008260:	e008      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 8008262:	bf00      	nop
 8008264:	e006      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 8008266:	bf00      	nop
 8008268:	e004      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 800826a:	bf00      	nop
 800826c:	e002      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 800826e:	bf00      	nop
 8008270:	e000      	b.n	8008274 <USBH_Process+0x3b0>
      break;
 8008272:	bf00      	nop
  }
  return USBH_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af04      	add	r7, sp, #16
 8008286:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	2b07      	cmp	r3, #7
 8008296:	f200 81bd 	bhi.w	8008614 <USBH_HandleEnum+0x394>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <USBH_HandleEnum+0x20>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	0800837b 	.word	0x0800837b
 80082a8:	080083e5 	.word	0x080083e5
 80082ac:	0800846f 	.word	0x0800846f
 80082b0:	080084d9 	.word	0x080084d9
 80082b4:	08008549 	.word	0x08008549
 80082b8:	0800858f 	.word	0x0800858f
 80082bc:	080085d5 	.word	0x080085d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80082c0:	2108      	movs	r1, #8
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa3e 	bl	8008744 <USBH_Get_DevDesc>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12e      	bne.n	8008330 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7919      	ldrb	r1, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082f6:	9202      	str	r2, [sp, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	9201      	str	r2, [sp, #4]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	4603      	mov	r3, r0
 8008300:	2280      	movs	r2, #128	@ 0x80
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 ff5e 	bl	80091c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7959      	ldrb	r1, [r3, #5]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800831c:	9202      	str	r2, [sp, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	9201      	str	r2, [sp, #4]
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	4603      	mov	r3, r0
 8008326:	2200      	movs	r2, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 ff4b 	bl	80091c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800832e:	e173      	b.n	8008618 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b03      	cmp	r3, #3
 8008334:	f040 8170 	bne.w	8008618 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800833e:	3301      	adds	r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800834e:	2b03      	cmp	r3, #3
 8008350:	d903      	bls.n	800835a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220d      	movs	r2, #13
 8008356:	701a      	strb	r2, [r3, #0]
      break;
 8008358:	e15e      	b.n	8008618 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	795b      	ldrb	r3, [r3, #5]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 ff7f 	bl	8009264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	791b      	ldrb	r3, [r3, #4]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 ff79 	bl	8009264 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
      break;
 8008378:	e14e      	b.n	8008618 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800837a:	2112      	movs	r1, #18
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f9e1 	bl	8008744 <USBH_Get_DevDesc>
 8008382:	4603      	mov	r3, r0
 8008384:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008392:	e143      	b.n	800861c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b03      	cmp	r3, #3
 8008398:	f040 8140 	bne.w	800861c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083a2:	3301      	adds	r3, #1
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d903      	bls.n	80083be <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220d      	movs	r2, #13
 80083ba:	701a      	strb	r2, [r3, #0]
      break;
 80083bc:	e12e      	b.n	800861c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 ff4d 	bl	8009264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	791b      	ldrb	r3, [r3, #4]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 ff47 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
      break;
 80083e2:	e11b      	b.n	800861c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083e4:	2101      	movs	r1, #1
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa56 	bl	8008898 <USBH_SetAddress>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d130      	bne.n	8008458 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80083f6:	2002      	movs	r0, #2
 80083f8:	f7ff fc03 	bl	8007c02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2203      	movs	r2, #3
 8008408:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7919      	ldrb	r1, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800841e:	9202      	str	r2, [sp, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	9201      	str	r2, [sp, #4]
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	4603      	mov	r3, r0
 8008428:	2280      	movs	r2, #128	@ 0x80
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 feca 	bl	80091c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	7959      	ldrb	r1, [r3, #5]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008444:	9202      	str	r2, [sp, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	9201      	str	r2, [sp, #4]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	4603      	mov	r3, r0
 800844e:	2200      	movs	r2, #0
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 feb7 	bl	80091c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008456:	e0e3      	b.n	8008620 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b03      	cmp	r3, #3
 800845c:	f040 80e0 	bne.w	8008620 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	220d      	movs	r2, #13
 8008464:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
      break;
 800846c:	e0d8      	b.n	8008620 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800846e:	2109      	movs	r1, #9
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f98d 	bl	8008790 <USBH_Get_CfgDesc>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2204      	movs	r2, #4
 8008484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008486:	e0cd      	b.n	8008624 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b03      	cmp	r3, #3
 800848c:	f040 80ca 	bne.w	8008624 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008496:	3301      	adds	r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d903      	bls.n	80084b2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220d      	movs	r2, #13
 80084ae:	701a      	strb	r2, [r3, #0]
      break;
 80084b0:	e0b8      	b.n	8008624 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	795b      	ldrb	r3, [r3, #5]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fed3 	bl	8009264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fecd 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e0a5      	b.n	8008624 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f955 	bl	8008790 <USBH_Get_CfgDesc>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2205      	movs	r2, #5
 80084f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084f6:	e097      	b.n	8008628 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	f040 8094 	bne.w	8008628 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008506:	3301      	adds	r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008516:	2b03      	cmp	r3, #3
 8008518:	d903      	bls.n	8008522 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	220d      	movs	r2, #13
 800851e:	701a      	strb	r2, [r3, #0]
      break;
 8008520:	e082      	b.n	8008628 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	795b      	ldrb	r3, [r3, #5]
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fe9b 	bl	8009264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fe95 	bl	8009264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
      break;
 8008546:	e06f      	b.n	8008628 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800854e:	2b00      	cmp	r3, #0
 8008550:	d019      	beq.n	8008586 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800855e:	23ff      	movs	r3, #255	@ 0xff
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f939 	bl	80087d8 <USBH_Get_StringDesc>
 8008566:	4603      	mov	r3, r0
 8008568:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2206      	movs	r2, #6
 8008574:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008576:	e059      	b.n	800862c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	2b03      	cmp	r3, #3
 800857c:	d156      	bne.n	800862c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2206      	movs	r2, #6
 8008582:	705a      	strb	r2, [r3, #1]
      break;
 8008584:	e052      	b.n	800862c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2206      	movs	r2, #6
 800858a:	705a      	strb	r2, [r3, #1]
      break;
 800858c:	e04e      	b.n	800862c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008594:	2b00      	cmp	r3, #0
 8008596:	d019      	beq.n	80085cc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80085a4:	23ff      	movs	r3, #255	@ 0xff
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f916 	bl	80087d8 <USBH_Get_StringDesc>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2207      	movs	r2, #7
 80085ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085bc:	e038      	b.n	8008630 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085be:	7bbb      	ldrb	r3, [r7, #14]
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d135      	bne.n	8008630 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2207      	movs	r2, #7
 80085c8:	705a      	strb	r2, [r3, #1]
      break;
 80085ca:	e031      	b.n	8008630 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2207      	movs	r2, #7
 80085d0:	705a      	strb	r2, [r3, #1]
      break;
 80085d2:	e02d      	b.n	8008630 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d017      	beq.n	800860e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085ea:	23ff      	movs	r3, #255	@ 0xff
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f8f3 	bl	80087d8 <USBH_Get_StringDesc>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008600:	e018      	b.n	8008634 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b03      	cmp	r3, #3
 8008606:	d115      	bne.n	8008634 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
      break;
 800860c:	e012      	b.n	8008634 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
      break;
 8008612:	e00f      	b.n	8008634 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008614:	bf00      	nop
 8008616:	e00e      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008618:	bf00      	nop
 800861a:	e00c      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 800861c:	bf00      	nop
 800861e:	e00a      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008620:	bf00      	nop
 8008622:	e008      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008624:	bf00      	nop
 8008626:	e006      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008628:	bf00      	nop
 800862a:	e004      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 800862c:	bf00      	nop
 800862e:	e002      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <USBH_HandleEnum+0x3b6>
      break;
 8008634:	bf00      	nop
  }
  return Status;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f804 	bl	8008682 <USBH_HandleSof>
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b0b      	cmp	r3, #11
 8008692:	d10a      	bne.n	80086aa <USBH_HandleSof+0x28>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
  }
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80086c2:	bf00      	nop
}
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff f948 	bl	80079b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	791b      	ldrb	r3, [r3, #4]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd9b 	bl	8009264 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	795b      	ldrb	r3, [r3, #5]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fd95 	bl	8009264 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008756:	887b      	ldrh	r3, [r7, #2]
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4613      	mov	r3, r2
 800875c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008760:	2100      	movs	r1, #0
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f863 	bl	800882e <USBH_GetDescriptor>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <USBH_Get_DevDesc+0x42>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f203 3026 	addw	r0, r3, #806	@ 0x326
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800877e:	887a      	ldrh	r2, [r7, #2]
 8008780:	4619      	mov	r1, r3
 8008782:	f000 f918 	bl	80089b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	331c      	adds	r3, #28
 80087a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80087a2:	887b      	ldrh	r3, [r7, #2]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f83d 	bl	800882e <USBH_GetDescriptor>
 80087b4:	4603      	mov	r3, r0
 80087b6:	72fb      	strb	r3, [r7, #11]
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087c4:	887a      	ldrh	r2, [r7, #2]
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f960 	bl	8008a8e <USBH_ParseCfgDesc>
  }

  return status;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	461a      	mov	r2, r3
 80087e4:	460b      	mov	r3, r1
 80087e6:	72fb      	strb	r3, [r7, #11]
 80087e8:	4613      	mov	r3, r2
 80087ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80087f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80087fc:	893b      	ldrh	r3, [r7, #8]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	460b      	mov	r3, r1
 8008802:	2100      	movs	r1, #0
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f812 	bl	800882e <USBH_GetDescriptor>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800881a:	893a      	ldrh	r2, [r7, #8]
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fa31 	bl	8008c86 <USBH_ParseStringDesc>
  }

  return status;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	72fb      	strb	r3, [r7, #11]
 800883c:	4613      	mov	r3, r2
 800883e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	789b      	ldrb	r3, [r3, #2]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d11c      	bne.n	8008882 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008848:	7afb      	ldrb	r3, [r7, #11]
 800884a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800884e:	b2da      	uxtb	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2206      	movs	r2, #6
 8008858:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	893a      	ldrh	r2, [r7, #8]
 800885e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008860:	893b      	ldrh	r3, [r7, #8]
 8008862:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800886a:	d104      	bne.n	8008876 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f240 4209 	movw	r2, #1033	@ 0x409
 8008872:	829a      	strh	r2, [r3, #20]
 8008874:	e002      	b.n	800887c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8b3a      	ldrh	r2, [r7, #24]
 8008880:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008882:	8b3b      	ldrh	r3, [r7, #24]
 8008884:	461a      	mov	r2, r3
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fa49 	bl	8008d20 <USBH_CtlReq>
 800888e:	4603      	mov	r3, r0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	789b      	ldrb	r3, [r3, #2]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d10f      	bne.n	80088cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2205      	movs	r2, #5
 80088b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa25 	bl	8008d20 <USBH_CtlReq>
 80088d6:	4603      	mov	r3, r0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	789b      	ldrb	r3, [r3, #2]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10e      	bne.n	8008912 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2209      	movs	r2, #9
 80088fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	887a      	ldrh	r2, [r7, #2]
 8008904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa02 	bl	8008d20 <USBH_CtlReq>
 800891c:	4603      	mov	r3, r0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	789b      	ldrb	r3, [r3, #2]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d10f      	bne.n	800895a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2203      	movs	r2, #3
 8008944:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9de 	bl	8008d20 <USBH_CtlReq>
 8008964:	4603      	mov	r3, r0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	789b      	ldrb	r3, [r3, #2]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10f      	bne.n	80089a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	b29a      	uxth	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f9ba 	bl	8008d20 <USBH_CtlReq>
 80089ac:	4603      	mov	r3, r0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3302      	adds	r3, #2
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3303      	adds	r3, #3
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	791a      	ldrb	r2, [r3, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	795a      	ldrb	r2, [r3, #5]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	799a      	ldrb	r2, [r3, #6]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	79da      	ldrb	r2, [r3, #7]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d936      	bls.n	8008a82 <USBH_ParseDevDesc+0xcc>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3308      	adds	r3, #8
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	3309      	adds	r3, #9
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	021b      	lsls	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	4313      	orrs	r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	330a      	adds	r3, #10
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	330b      	adds	r3, #11
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	330c      	adds	r3, #12
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	330d      	adds	r3, #13
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	7b9a      	ldrb	r2, [r3, #14]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7bda      	ldrb	r2, [r3, #15]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7c1a      	ldrb	r2, [r3, #16]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7c5a      	ldrb	r2, [r3, #17]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	745a      	strb	r2, [r3, #17]
  }
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b08a      	sub	sp, #40	@ 0x28
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t                      ep_ix = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	785a      	ldrb	r2, [r3, #1]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	3303      	adds	r3, #3
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	791a      	ldrb	r2, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	795a      	ldrb	r2, [r3, #5]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	799a      	ldrb	r2, [r3, #6]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	79da      	ldrb	r2, [r3, #7]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	7a1a      	ldrb	r2, [r3, #8]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d95f      	bls.n	8008bc8 <USBH_ParseCfgDesc+0x13a>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b08:	2309      	movs	r3, #9
 8008b0a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b10:	e051      	b.n	8008bb6 <USBH_ParseCfgDesc+0x128>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b12:	f107 0316 	add.w	r3, r7, #22
 8008b16:	4619      	mov	r1, r3
 8008b18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b1a:	f000 f8e7 	bl	8008cec <USBH_GetNextDesc>
 8008b1e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d146      	bne.n	8008bb6 <USBH_ParseCfgDesc+0x128>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b2c:	221a      	movs	r2, #26
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	3308      	adds	r3, #8
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	3302      	adds	r3, #2
 8008b3a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b3e:	69f8      	ldr	r0, [r7, #28]
 8008b40:	f000 f846 	bl	8008bd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b4e:	e022      	b.n	8008b96 <USBH_ParseCfgDesc+0x108>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b50:	f107 0316 	add.w	r3, r7, #22
 8008b54:	4619      	mov	r1, r3
 8008b56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b58:	f000 f8c8 	bl	8008cec <USBH_GetNextDesc>
 8008b5c:	6278      	str	r0, [r7, #36]	@ 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	2b05      	cmp	r3, #5
 8008b64:	d117      	bne.n	8008b96 <USBH_ParseCfgDesc+0x108>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008b66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b6a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008b6e:	3201      	adds	r2, #1
 8008b70:	00d2      	lsls	r2, r2, #3
 8008b72:	211a      	movs	r1, #26
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	3304      	adds	r3, #4
 8008b82:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b86:	69b8      	ldr	r0, [r7, #24]
 8008b88:	f000 f851 	bl	8008c2e <USBH_ParseEPDesc>
            ep_ix++;
 8008b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8008b90:	3301      	adds	r3, #1
 8008b92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	791b      	ldrb	r3, [r3, #4]
 8008b9a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d204      	bcs.n	8008bac <USBH_ParseCfgDesc+0x11e>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	885a      	ldrh	r2, [r3, #2]
 8008ba6:	8afb      	ldrh	r3, [r7, #22]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d8d1      	bhi.n	8008b50 <USBH_ParseCfgDesc+0xc2>
          }
        }
        if_ix++;
 8008bac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d804      	bhi.n	8008bc8 <USBH_ParseCfgDesc+0x13a>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	885a      	ldrh	r2, [r3, #2]
 8008bc2:	8afb      	ldrh	r3, [r7, #22]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d8a4      	bhi.n	8008b12 <USBH_ParseCfgDesc+0x84>
      }
    }
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3728      	adds	r7, #40	@ 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785a      	ldrb	r2, [r3, #1]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	789a      	ldrb	r2, [r3, #2]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	78da      	ldrb	r2, [r3, #3]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	791a      	ldrb	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	795a      	ldrb	r2, [r3, #5]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	799a      	ldrb	r2, [r3, #6]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	79da      	ldrb	r2, [r3, #7]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	7a1a      	ldrb	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	721a      	strb	r2, [r3, #8]
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	785a      	ldrb	r2, [r3, #1]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	789a      	ldrb	r2, [r3, #2]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	78da      	ldrb	r2, [r3, #3]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	3305      	adds	r3, #5
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	799a      	ldrb	r2, [r3, #6]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	719a      	strb	r2, [r3, #6]
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b087      	sub	sp, #28
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	4613      	mov	r3, r2
 8008c92:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d120      	bne.n	8008ce0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	1e9a      	subs	r2, r3, #2
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	bf28      	it	cs
 8008caa:	4613      	movcs	r3, r2
 8008cac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	82fb      	strh	r3, [r7, #22]
 8008cb8:	e00b      	b.n	8008cd2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008cba:	8afb      	ldrh	r3, [r7, #22]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	781a      	ldrb	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ccc:	8afb      	ldrh	r3, [r7, #22]
 8008cce:	3302      	adds	r3, #2
 8008cd0:	82fb      	strh	r3, [r7, #22]
 8008cd2:	8afa      	ldrh	r2, [r7, #22]
 8008cd4:	8abb      	ldrh	r3, [r7, #20]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d3ef      	bcc.n	8008cba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	701a      	strb	r2, [r3, #0]
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	7812      	ldrb	r2, [r2, #0]
 8008cfe:	4413      	add	r3, r2
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d12:	68fb      	ldr	r3, [r7, #12]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	789b      	ldrb	r3, [r3, #2]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d002      	beq.n	8008d40 <USBH_CtlReq+0x20>
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d00f      	beq.n	8008d5e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008d3e:	e027      	b.n	8008d90 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	88fa      	ldrh	r2, [r7, #6]
 8008d4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2202      	movs	r2, #2
 8008d56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5c:	e018      	b.n	8008d90 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f81c 	bl	8008d9c <USBH_HandleControl>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <USBH_CtlReq+0x54>
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d106      	bne.n	8008d82 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	761a      	strb	r2, [r3, #24]
      break;
 8008d80:	e005      	b.n	8008d8e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d102      	bne.n	8008d8e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	709a      	strb	r2, [r3, #2]
      break;
 8008d8e:	bf00      	nop
  }
  return status;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008da4:	2301      	movs	r3, #1
 8008da6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7e1b      	ldrb	r3, [r3, #24]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	f200 8156 	bhi.w	8009064 <USBH_HandleControl+0x2c8>
 8008db8:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <USBH_HandleControl+0x24>)
 8008dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbe:	bf00      	nop
 8008dc0:	08008ded 	.word	0x08008ded
 8008dc4:	08008e07 	.word	0x08008e07
 8008dc8:	08008e71 	.word	0x08008e71
 8008dcc:	08008e97 	.word	0x08008e97
 8008dd0:	08008ecf 	.word	0x08008ecf
 8008dd4:	08008ef9 	.word	0x08008ef9
 8008dd8:	08008f4b 	.word	0x08008f4b
 8008ddc:	08008f6d 	.word	0x08008f6d
 8008de0:	08008fa9 	.word	0x08008fa9
 8008de4:	08008fcf 	.word	0x08008fcf
 8008de8:	0800900d 	.word	0x0800900d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f103 0110 	add.w	r1, r3, #16
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	795b      	ldrb	r3, [r3, #5]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f943 	bl	8009084 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	761a      	strb	r2, [r3, #24]
      break;
 8008e04:	e139      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	795b      	ldrb	r3, [r3, #5]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7fe febf 	bl	8007b90 <USBH_LL_GetURBState>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d11e      	bne.n	8008e5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	7c1b      	ldrb	r3, [r3, #16]
 8008e20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	8adb      	ldrh	r3, [r3, #22]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008e2e:	7b7b      	ldrb	r3, [r7, #13]
 8008e30:	2b80      	cmp	r3, #128	@ 0x80
 8008e32:	d103      	bne.n	8008e3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2203      	movs	r2, #3
 8008e38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e3a:	e115      	b.n	8009068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	761a      	strb	r2, [r3, #24]
      break;
 8008e42:	e111      	b.n	8009068 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008e44:	7b7b      	ldrb	r3, [r7, #13]
 8008e46:	2b80      	cmp	r3, #128	@ 0x80
 8008e48:	d103      	bne.n	8008e52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2209      	movs	r2, #9
 8008e4e:	761a      	strb	r2, [r3, #24]
      break;
 8008e50:	e10a      	b.n	8009068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2207      	movs	r2, #7
 8008e56:	761a      	strb	r2, [r3, #24]
      break;
 8008e58:	e106      	b.n	8009068 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d003      	beq.n	8008e68 <USBH_HandleControl+0xcc>
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	f040 8100 	bne.w	8009068 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	220b      	movs	r2, #11
 8008e6c:	761a      	strb	r2, [r3, #24]
      break;
 8008e6e:	e0fb      	b.n	8009068 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6899      	ldr	r1, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	899a      	ldrh	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	791b      	ldrb	r3, [r3, #4]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f93a 	bl	8009102 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	761a      	strb	r2, [r3, #24]
      break;
 8008e94:	e0f1      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7fe fe77 	bl	8007b90 <USBH_LL_GetURBState>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d102      	bne.n	8008eb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2209      	movs	r2, #9
 8008eb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d102      	bne.n	8008ebe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ebc:	e0d6      	b.n	800906c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	f040 80d3 	bne.w	800906c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220b      	movs	r2, #11
 8008eca:	761a      	strb	r2, [r3, #24]
      break;
 8008ecc:	e0ce      	b.n	800906c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6899      	ldr	r1, [r3, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	899a      	ldrh	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	795b      	ldrb	r3, [r3, #5]
 8008eda:	2001      	movs	r0, #1
 8008edc:	9000      	str	r0, [sp, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8ea 	bl	80090b8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2206      	movs	r2, #6
 8008ef4:	761a      	strb	r2, [r3, #24]
      break;
 8008ef6:	e0c0      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	795b      	ldrb	r3, [r3, #5]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fe fe46 	bl	8007b90 <USBH_LL_GetURBState>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d103      	bne.n	8008f16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2207      	movs	r2, #7
 8008f12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f14:	e0ac      	b.n	8009070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b05      	cmp	r3, #5
 8008f1a:	d105      	bne.n	8008f28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	220c      	movs	r2, #12
 8008f20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008f22:	2303      	movs	r3, #3
 8008f24:	73fb      	strb	r3, [r7, #15]
      break;
 8008f26:	e0a3      	b.n	8009070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d103      	bne.n	8008f36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2205      	movs	r2, #5
 8008f32:	761a      	strb	r2, [r3, #24]
      break;
 8008f34:	e09c      	b.n	8009070 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	f040 8099 	bne.w	8009070 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	220b      	movs	r2, #11
 8008f42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
      break;
 8008f48:	e092      	b.n	8009070 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	791b      	ldrb	r3, [r3, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2100      	movs	r1, #0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8d5 	bl	8009102 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2208      	movs	r2, #8
 8008f68:	761a      	strb	r2, [r3, #24]

      break;
 8008f6a:	e086      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	791b      	ldrb	r3, [r3, #4]
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fe fe0c 	bl	8007b90 <USBH_LL_GetURBState>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d105      	bne.n	8008f8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	220d      	movs	r2, #13
 8008f86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008f8c:	e072      	b.n	8009074 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d103      	bne.n	8008f9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	220b      	movs	r2, #11
 8008f98:	761a      	strb	r2, [r3, #24]
      break;
 8008f9a:	e06b      	b.n	8009074 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d168      	bne.n	8009074 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa6:	e065      	b.n	8009074 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	795b      	ldrb	r3, [r3, #5]
 8008fac:	2201      	movs	r2, #1
 8008fae:	9200      	str	r2, [sp, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f87f 	bl	80090b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	220a      	movs	r2, #10
 8008fca:	761a      	strb	r2, [r3, #24]
      break;
 8008fcc:	e055      	b.n	800907a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	795b      	ldrb	r3, [r3, #5]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fe fddb 	bl	8007b90 <USBH_LL_GetURBState>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d105      	bne.n	8008ff0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	220d      	movs	r2, #13
 8008fec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fee:	e043      	b.n	8009078 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2209      	movs	r2, #9
 8008ffa:	761a      	strb	r2, [r3, #24]
      break;
 8008ffc:	e03c      	b.n	8009078 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d139      	bne.n	8009078 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	220b      	movs	r2, #11
 8009008:	761a      	strb	r2, [r3, #24]
      break;
 800900a:	e035      	b.n	8009078 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7e5b      	ldrb	r3, [r3, #25]
 8009010:	3301      	adds	r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	765a      	strb	r2, [r3, #25]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7e5b      	ldrb	r3, [r3, #25]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d806      	bhi.n	800902e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800902c:	e025      	b.n	800907a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009034:	2106      	movs	r1, #6
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	795b      	ldrb	r3, [r3, #5]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f90c 	bl	8009264 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f906 	bl	8009264 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800905e:	2302      	movs	r3, #2
 8009060:	73fb      	strb	r3, [r7, #15]
      break;
 8009062:	e00a      	b.n	800907a <USBH_HandleControl+0x2de>

    default:
      break;
 8009064:	bf00      	nop
 8009066:	e008      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009068:	bf00      	nop
 800906a:	e006      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 800906c:	bf00      	nop
 800906e:	e004      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009070:	bf00      	nop
 8009072:	e002      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009074:	bf00      	nop
 8009076:	e000      	b.n	800907a <USBH_HandleControl+0x2de>
      break;
 8009078:	bf00      	nop
  }

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af04      	add	r7, sp, #16
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009092:	79f9      	ldrb	r1, [r7, #7]
 8009094:	2300      	movs	r3, #0
 8009096:	9303      	str	r3, [sp, #12]
 8009098:	2308      	movs	r3, #8
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	2200      	movs	r2, #0
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7fe fd40 	bl	8007b2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4611      	mov	r1, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	460b      	mov	r3, r1
 80090c8:	80fb      	strh	r3, [r7, #6]
 80090ca:	4613      	mov	r3, r2
 80090cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090dc:	7979      	ldrb	r1, [r7, #5]
 80090de:	7e3b      	ldrb	r3, [r7, #24]
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	9302      	str	r3, [sp, #8]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	2301      	movs	r3, #1
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	2200      	movs	r2, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7fe fd1b 	bl	8007b2e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b088      	sub	sp, #32
 8009106:	af04      	add	r7, sp, #16
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	4611      	mov	r1, r2
 800910e:	461a      	mov	r2, r3
 8009110:	460b      	mov	r3, r1
 8009112:	80fb      	strh	r3, [r7, #6]
 8009114:	4613      	mov	r3, r2
 8009116:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009118:	7979      	ldrb	r1, [r7, #5]
 800911a:	2300      	movs	r3, #0
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	2301      	movs	r3, #1
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	2300      	movs	r3, #0
 800912c:	2201      	movs	r2, #1
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7fe fcfd 	bl	8007b2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009134:	2300      	movs	r3, #0

}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b088      	sub	sp, #32
 8009142:	af04      	add	r7, sp, #16
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	4611      	mov	r1, r2
 800914a:	461a      	mov	r2, r3
 800914c:	460b      	mov	r3, r1
 800914e:	80fb      	strh	r3, [r7, #6]
 8009150:	4613      	mov	r3, r2
 8009152:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009162:	7979      	ldrb	r1, [r7, #5]
 8009164:	7e3b      	ldrb	r3, [r7, #24]
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	88fb      	ldrh	r3, [r7, #6]
 800916a:	9302      	str	r3, [sp, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2301      	movs	r3, #1
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2302      	movs	r3, #2
 8009176:	2200      	movs	r2, #0
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7fe fcd8 	bl	8007b2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	460b      	mov	r3, r1
 8009198:	80fb      	strh	r3, [r7, #6]
 800919a:	4613      	mov	r3, r2
 800919c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800919e:	7979      	ldrb	r1, [r7, #5]
 80091a0:	2300      	movs	r3, #0
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	2301      	movs	r3, #1
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2302      	movs	r3, #2
 80091b2:	2201      	movs	r2, #1
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7fe fcba 	bl	8007b2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af04      	add	r7, sp, #16
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	70fb      	strb	r3, [r7, #3]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70bb      	strb	r3, [r7, #2]
 80091da:	4613      	mov	r3, r2
 80091dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80091de:	7878      	ldrb	r0, [r7, #1]
 80091e0:	78ba      	ldrb	r2, [r7, #2]
 80091e2:	78f9      	ldrb	r1, [r7, #3]
 80091e4:	8b3b      	ldrh	r3, [r7, #24]
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	7d3b      	ldrb	r3, [r7, #20]
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	7c3b      	ldrb	r3, [r7, #16]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	4603      	mov	r3, r0
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7fe fc4d 	bl	8007a92 <USBH_LL_OpenPipe>

  return USBH_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fe fc6c 	bl	8007af0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f836 	bl	80092a0 <USBH_GetFreePipe>
 8009234:	4603      	mov	r3, r0
 8009236:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009238:	89fb      	ldrh	r3, [r7, #14]
 800923a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800923e:	4293      	cmp	r3, r2
 8009240:	d00a      	beq.n	8009258 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	89fb      	ldrh	r3, [r7, #14]
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	33e0      	adds	r3, #224	@ 0xe0
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	b2db      	uxtb	r3, r3
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	2b0f      	cmp	r3, #15
 8009274:	d80d      	bhi.n	8009292 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	33e0      	adds	r3, #224	@ 0xe0
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	33e0      	adds	r3, #224	@ 0xe0
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e00f      	b.n	80092d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	33e0      	adds	r3, #224	@ 0xe0
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	e007      	b.n	80092dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	3301      	adds	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	2b0f      	cmp	r3, #15
 80092d6:	d9ec      	bls.n	80092b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80092d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <malloc>:
 80092e8:	4b02      	ldr	r3, [pc, #8]	@ (80092f4 <malloc+0xc>)
 80092ea:	4601      	mov	r1, r0
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	f000 b82d 	b.w	800934c <_malloc_r>
 80092f2:	bf00      	nop
 80092f4:	2000002c 	.word	0x2000002c

080092f8 <free>:
 80092f8:	4b02      	ldr	r3, [pc, #8]	@ (8009304 <free+0xc>)
 80092fa:	4601      	mov	r1, r0
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f000 b915 	b.w	800952c <_free_r>
 8009302:	bf00      	nop
 8009304:	2000002c 	.word	0x2000002c

08009308 <sbrk_aligned>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4e0f      	ldr	r6, [pc, #60]	@ (8009348 <sbrk_aligned+0x40>)
 800930c:	460c      	mov	r4, r1
 800930e:	4605      	mov	r5, r0
 8009310:	6831      	ldr	r1, [r6, #0]
 8009312:	b911      	cbnz	r1, 800931a <sbrk_aligned+0x12>
 8009314:	f000 f8ce 	bl	80094b4 <_sbrk_r>
 8009318:	6030      	str	r0, [r6, #0]
 800931a:	4621      	mov	r1, r4
 800931c:	4628      	mov	r0, r5
 800931e:	f000 f8c9 	bl	80094b4 <_sbrk_r>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	d103      	bne.n	800932e <sbrk_aligned+0x26>
 8009326:	f04f 34ff 	mov.w	r4, #4294967295
 800932a:	4620      	mov	r0, r4
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	1cc4      	adds	r4, r0, #3
 8009330:	f024 0403 	bic.w	r4, r4, #3
 8009334:	42a0      	cmp	r0, r4
 8009336:	d0f8      	beq.n	800932a <sbrk_aligned+0x22>
 8009338:	1a21      	subs	r1, r4, r0
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f8ba 	bl	80094b4 <_sbrk_r>
 8009340:	3001      	adds	r0, #1
 8009342:	d1f2      	bne.n	800932a <sbrk_aligned+0x22>
 8009344:	e7ef      	b.n	8009326 <sbrk_aligned+0x1e>
 8009346:	bf00      	nop
 8009348:	20000864 	.word	0x20000864

0800934c <_malloc_r>:
 800934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009350:	1ccd      	adds	r5, r1, #3
 8009352:	4606      	mov	r6, r0
 8009354:	f025 0503 	bic.w	r5, r5, #3
 8009358:	3508      	adds	r5, #8
 800935a:	2d0c      	cmp	r5, #12
 800935c:	bf38      	it	cc
 800935e:	250c      	movcc	r5, #12
 8009360:	2d00      	cmp	r5, #0
 8009362:	db01      	blt.n	8009368 <_malloc_r+0x1c>
 8009364:	42a9      	cmp	r1, r5
 8009366:	d904      	bls.n	8009372 <_malloc_r+0x26>
 8009368:	230c      	movs	r3, #12
 800936a:	6033      	str	r3, [r6, #0]
 800936c:	2000      	movs	r0, #0
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009448 <_malloc_r+0xfc>
 8009376:	f000 f869 	bl	800944c <__malloc_lock>
 800937a:	f8d8 3000 	ldr.w	r3, [r8]
 800937e:	461c      	mov	r4, r3
 8009380:	bb44      	cbnz	r4, 80093d4 <_malloc_r+0x88>
 8009382:	4629      	mov	r1, r5
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff ffbf 	bl	8009308 <sbrk_aligned>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	4604      	mov	r4, r0
 800938e:	d158      	bne.n	8009442 <_malloc_r+0xf6>
 8009390:	f8d8 4000 	ldr.w	r4, [r8]
 8009394:	4627      	mov	r7, r4
 8009396:	2f00      	cmp	r7, #0
 8009398:	d143      	bne.n	8009422 <_malloc_r+0xd6>
 800939a:	2c00      	cmp	r4, #0
 800939c:	d04b      	beq.n	8009436 <_malloc_r+0xea>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	4639      	mov	r1, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	eb04 0903 	add.w	r9, r4, r3
 80093a8:	f000 f884 	bl	80094b4 <_sbrk_r>
 80093ac:	4581      	cmp	r9, r0
 80093ae:	d142      	bne.n	8009436 <_malloc_r+0xea>
 80093b0:	6821      	ldr	r1, [r4, #0]
 80093b2:	4630      	mov	r0, r6
 80093b4:	1a6d      	subs	r5, r5, r1
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7ff ffa6 	bl	8009308 <sbrk_aligned>
 80093bc:	3001      	adds	r0, #1
 80093be:	d03a      	beq.n	8009436 <_malloc_r+0xea>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	442b      	add	r3, r5
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	f8d8 3000 	ldr.w	r3, [r8]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	bb62      	cbnz	r2, 8009428 <_malloc_r+0xdc>
 80093ce:	f8c8 7000 	str.w	r7, [r8]
 80093d2:	e00f      	b.n	80093f4 <_malloc_r+0xa8>
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	1b52      	subs	r2, r2, r5
 80093d8:	d420      	bmi.n	800941c <_malloc_r+0xd0>
 80093da:	2a0b      	cmp	r2, #11
 80093dc:	d917      	bls.n	800940e <_malloc_r+0xc2>
 80093de:	1961      	adds	r1, r4, r5
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	6025      	str	r5, [r4, #0]
 80093e4:	bf18      	it	ne
 80093e6:	6059      	strne	r1, [r3, #4]
 80093e8:	6863      	ldr	r3, [r4, #4]
 80093ea:	bf08      	it	eq
 80093ec:	f8c8 1000 	streq.w	r1, [r8]
 80093f0:	5162      	str	r2, [r4, r5]
 80093f2:	604b      	str	r3, [r1, #4]
 80093f4:	4630      	mov	r0, r6
 80093f6:	f000 f82f 	bl	8009458 <__malloc_unlock>
 80093fa:	f104 000b 	add.w	r0, r4, #11
 80093fe:	1d23      	adds	r3, r4, #4
 8009400:	f020 0007 	bic.w	r0, r0, #7
 8009404:	1ac2      	subs	r2, r0, r3
 8009406:	bf1c      	itt	ne
 8009408:	1a1b      	subne	r3, r3, r0
 800940a:	50a3      	strne	r3, [r4, r2]
 800940c:	e7af      	b.n	800936e <_malloc_r+0x22>
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	42a3      	cmp	r3, r4
 8009412:	bf0c      	ite	eq
 8009414:	f8c8 2000 	streq.w	r2, [r8]
 8009418:	605a      	strne	r2, [r3, #4]
 800941a:	e7eb      	b.n	80093f4 <_malloc_r+0xa8>
 800941c:	4623      	mov	r3, r4
 800941e:	6864      	ldr	r4, [r4, #4]
 8009420:	e7ae      	b.n	8009380 <_malloc_r+0x34>
 8009422:	463c      	mov	r4, r7
 8009424:	687f      	ldr	r7, [r7, #4]
 8009426:	e7b6      	b.n	8009396 <_malloc_r+0x4a>
 8009428:	461a      	mov	r2, r3
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	42a3      	cmp	r3, r4
 800942e:	d1fb      	bne.n	8009428 <_malloc_r+0xdc>
 8009430:	2300      	movs	r3, #0
 8009432:	6053      	str	r3, [r2, #4]
 8009434:	e7de      	b.n	80093f4 <_malloc_r+0xa8>
 8009436:	230c      	movs	r3, #12
 8009438:	4630      	mov	r0, r6
 800943a:	6033      	str	r3, [r6, #0]
 800943c:	f000 f80c 	bl	8009458 <__malloc_unlock>
 8009440:	e794      	b.n	800936c <_malloc_r+0x20>
 8009442:	6005      	str	r5, [r0, #0]
 8009444:	e7d6      	b.n	80093f4 <_malloc_r+0xa8>
 8009446:	bf00      	nop
 8009448:	20000868 	.word	0x20000868

0800944c <__malloc_lock>:
 800944c:	4801      	ldr	r0, [pc, #4]	@ (8009454 <__malloc_lock+0x8>)
 800944e:	f000 b86b 	b.w	8009528 <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	200009a8 	.word	0x200009a8

08009458 <__malloc_unlock>:
 8009458:	4801      	ldr	r0, [pc, #4]	@ (8009460 <__malloc_unlock+0x8>)
 800945a:	f000 b866 	b.w	800952a <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	200009a8 	.word	0x200009a8

08009464 <siprintf>:
 8009464:	b40e      	push	{r1, r2, r3}
 8009466:	b500      	push	{lr}
 8009468:	b09c      	sub	sp, #112	@ 0x70
 800946a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800946e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	9107      	str	r1, [sp, #28]
 8009476:	9104      	str	r1, [sp, #16]
 8009478:	4808      	ldr	r0, [pc, #32]	@ (800949c <siprintf+0x38>)
 800947a:	4909      	ldr	r1, [pc, #36]	@ (80094a0 <siprintf+0x3c>)
 800947c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009480:	9105      	str	r1, [sp, #20]
 8009482:	a902      	add	r1, sp, #8
 8009484:	6800      	ldr	r0, [r0, #0]
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	f000 f8f6 	bl	8009678 <_svfiprintf_r>
 800948c:	9b02      	ldr	r3, [sp, #8]
 800948e:	2200      	movs	r2, #0
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	b01c      	add	sp, #112	@ 0x70
 8009494:	f85d eb04 	ldr.w	lr, [sp], #4
 8009498:	b003      	add	sp, #12
 800949a:	4770      	bx	lr
 800949c:	2000002c 	.word	0x2000002c
 80094a0:	ffff0208 	.word	0xffff0208

080094a4 <memset>:
 80094a4:	4402      	add	r2, r0
 80094a6:	4603      	mov	r3, r0
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d100      	bne.n	80094ae <memset+0xa>
 80094ac:	4770      	bx	lr
 80094ae:	f803 1b01 	strb.w	r1, [r3], #1
 80094b2:	e7f9      	b.n	80094a8 <memset+0x4>

080094b4 <_sbrk_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	2300      	movs	r3, #0
 80094b8:	4d05      	ldr	r5, [pc, #20]	@ (80094d0 <_sbrk_r+0x1c>)
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	f7f7 f8b6 	bl	8000630 <_sbrk>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_sbrk_r+0x1a>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_sbrk_r+0x1a>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	200009a4 	.word	0x200009a4

080094d4 <__errno>:
 80094d4:	4b01      	ldr	r3, [pc, #4]	@ (80094dc <__errno+0x8>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	2000002c 	.word	0x2000002c

080094e0 <__libc_init_array>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009518 <__libc_init_array+0x38>)
 80094e4:	2600      	movs	r6, #0
 80094e6:	4c0d      	ldr	r4, [pc, #52]	@ (800951c <__libc_init_array+0x3c>)
 80094e8:	1b64      	subs	r4, r4, r5
 80094ea:	10a4      	asrs	r4, r4, #2
 80094ec:	42a6      	cmp	r6, r4
 80094ee:	d109      	bne.n	8009504 <__libc_init_array+0x24>
 80094f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009520 <__libc_init_array+0x40>)
 80094f2:	2600      	movs	r6, #0
 80094f4:	4c0b      	ldr	r4, [pc, #44]	@ (8009524 <__libc_init_array+0x44>)
 80094f6:	f000 fbb9 	bl	8009c6c <_init>
 80094fa:	1b64      	subs	r4, r4, r5
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	42a6      	cmp	r6, r4
 8009500:	d105      	bne.n	800950e <__libc_init_array+0x2e>
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f855 3b04 	ldr.w	r3, [r5], #4
 8009508:	3601      	adds	r6, #1
 800950a:	4798      	blx	r3
 800950c:	e7ee      	b.n	80094ec <__libc_init_array+0xc>
 800950e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009512:	3601      	adds	r6, #1
 8009514:	4798      	blx	r3
 8009516:	e7f2      	b.n	80094fe <__libc_init_array+0x1e>
 8009518:	08009cd8 	.word	0x08009cd8
 800951c:	08009cd8 	.word	0x08009cd8
 8009520:	08009cd8 	.word	0x08009cd8
 8009524:	08009cdc 	.word	0x08009cdc

08009528 <__retarget_lock_acquire_recursive>:
 8009528:	4770      	bx	lr

0800952a <__retarget_lock_release_recursive>:
 800952a:	4770      	bx	lr

0800952c <_free_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4605      	mov	r5, r0
 8009530:	2900      	cmp	r1, #0
 8009532:	d041      	beq.n	80095b8 <_free_r+0x8c>
 8009534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009538:	1f0c      	subs	r4, r1, #4
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfb8      	it	lt
 800953e:	18e4      	addlt	r4, r4, r3
 8009540:	f7ff ff84 	bl	800944c <__malloc_lock>
 8009544:	4a1d      	ldr	r2, [pc, #116]	@ (80095bc <_free_r+0x90>)
 8009546:	6813      	ldr	r3, [r2, #0]
 8009548:	b933      	cbnz	r3, 8009558 <_free_r+0x2c>
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	6014      	str	r4, [r2, #0]
 800954e:	4628      	mov	r0, r5
 8009550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009554:	f7ff bf80 	b.w	8009458 <__malloc_unlock>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d908      	bls.n	800956e <_free_r+0x42>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	1821      	adds	r1, r4, r0
 8009560:	428b      	cmp	r3, r1
 8009562:	bf01      	itttt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	1809      	addeq	r1, r1, r0
 800956a:	6021      	streq	r1, [r4, #0]
 800956c:	e7ed      	b.n	800954a <_free_r+0x1e>
 800956e:	461a      	mov	r2, r3
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	b10b      	cbz	r3, 8009578 <_free_r+0x4c>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d9fa      	bls.n	800956e <_free_r+0x42>
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	1850      	adds	r0, r2, r1
 800957c:	42a0      	cmp	r0, r4
 800957e:	d10b      	bne.n	8009598 <_free_r+0x6c>
 8009580:	6820      	ldr	r0, [r4, #0]
 8009582:	4401      	add	r1, r0
 8009584:	1850      	adds	r0, r2, r1
 8009586:	6011      	str	r1, [r2, #0]
 8009588:	4283      	cmp	r3, r0
 800958a:	d1e0      	bne.n	800954e <_free_r+0x22>
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4408      	add	r0, r1
 8009592:	6053      	str	r3, [r2, #4]
 8009594:	6010      	str	r0, [r2, #0]
 8009596:	e7da      	b.n	800954e <_free_r+0x22>
 8009598:	d902      	bls.n	80095a0 <_free_r+0x74>
 800959a:	230c      	movs	r3, #12
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	e7d6      	b.n	800954e <_free_r+0x22>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	1821      	adds	r1, r4, r0
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf02      	ittt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	bf08      	it	eq
 80095b2:	6021      	streq	r1, [r4, #0]
 80095b4:	6054      	str	r4, [r2, #4]
 80095b6:	e7ca      	b.n	800954e <_free_r+0x22>
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	20000868 	.word	0x20000868

080095c0 <__ssputs_r>:
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	461f      	mov	r7, r3
 80095c6:	688e      	ldr	r6, [r1, #8]
 80095c8:	4682      	mov	sl, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	42be      	cmp	r6, r7
 80095ce:	4690      	mov	r8, r2
 80095d0:	680b      	ldr	r3, [r1, #0]
 80095d2:	d82d      	bhi.n	8009630 <__ssputs_r+0x70>
 80095d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095dc:	d026      	beq.n	800962c <__ssputs_r+0x6c>
 80095de:	6965      	ldr	r5, [r4, #20]
 80095e0:	6909      	ldr	r1, [r1, #16]
 80095e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095e6:	eba3 0901 	sub.w	r9, r3, r1
 80095ea:	1c7b      	adds	r3, r7, #1
 80095ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f0:	444b      	add	r3, r9
 80095f2:	106d      	asrs	r5, r5, #1
 80095f4:	429d      	cmp	r5, r3
 80095f6:	bf38      	it	cc
 80095f8:	461d      	movcc	r5, r3
 80095fa:	0553      	lsls	r3, r2, #21
 80095fc:	d527      	bpl.n	800964e <__ssputs_r+0x8e>
 80095fe:	4629      	mov	r1, r5
 8009600:	f7ff fea4 	bl	800934c <_malloc_r>
 8009604:	4606      	mov	r6, r0
 8009606:	b360      	cbz	r0, 8009662 <__ssputs_r+0xa2>
 8009608:	464a      	mov	r2, r9
 800960a:	6921      	ldr	r1, [r4, #16]
 800960c:	f000 faea 	bl	8009be4 <memcpy>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	6126      	str	r6, [r4, #16]
 800961e:	444e      	add	r6, r9
 8009620:	6165      	str	r5, [r4, #20]
 8009622:	eba5 0509 	sub.w	r5, r5, r9
 8009626:	6026      	str	r6, [r4, #0]
 8009628:	463e      	mov	r6, r7
 800962a:	60a5      	str	r5, [r4, #8]
 800962c:	42be      	cmp	r6, r7
 800962e:	d900      	bls.n	8009632 <__ssputs_r+0x72>
 8009630:	463e      	mov	r6, r7
 8009632:	4632      	mov	r2, r6
 8009634:	4641      	mov	r1, r8
 8009636:	6820      	ldr	r0, [r4, #0]
 8009638:	f000 faac 	bl	8009b94 <memmove>
 800963c:	68a3      	ldr	r3, [r4, #8]
 800963e:	2000      	movs	r0, #0
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	4433      	add	r3, r6
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	462a      	mov	r2, r5
 8009650:	f000 fad5 	bl	8009bfe <_realloc_r>
 8009654:	4606      	mov	r6, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d1e0      	bne.n	800961c <__ssputs_r+0x5c>
 800965a:	6921      	ldr	r1, [r4, #16]
 800965c:	4650      	mov	r0, sl
 800965e:	f7ff ff65 	bl	800952c <_free_r>
 8009662:	230c      	movs	r3, #12
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	e7e9      	b.n	800964a <__ssputs_r+0x8a>
	...

08009678 <_svfiprintf_r>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	4698      	mov	r8, r3
 800967e:	898b      	ldrh	r3, [r1, #12]
 8009680:	b09d      	sub	sp, #116	@ 0x74
 8009682:	4607      	mov	r7, r0
 8009684:	061b      	lsls	r3, r3, #24
 8009686:	460d      	mov	r5, r1
 8009688:	4614      	mov	r4, r2
 800968a:	d510      	bpl.n	80096ae <_svfiprintf_r+0x36>
 800968c:	690b      	ldr	r3, [r1, #16]
 800968e:	b973      	cbnz	r3, 80096ae <_svfiprintf_r+0x36>
 8009690:	2140      	movs	r1, #64	@ 0x40
 8009692:	f7ff fe5b 	bl	800934c <_malloc_r>
 8009696:	6028      	str	r0, [r5, #0]
 8009698:	6128      	str	r0, [r5, #16]
 800969a:	b930      	cbnz	r0, 80096aa <_svfiprintf_r+0x32>
 800969c:	230c      	movs	r3, #12
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	b01d      	add	sp, #116	@ 0x74
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096aa:	2340      	movs	r3, #64	@ 0x40
 80096ac:	616b      	str	r3, [r5, #20]
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b4:	f04f 0901 	mov.w	r9, #1
 80096b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800985c <_svfiprintf_r+0x1e4>
 80096bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096be:	2320      	movs	r3, #32
 80096c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096c4:	2330      	movs	r3, #48	@ 0x30
 80096c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096ca:	4623      	mov	r3, r4
 80096cc:	469a      	mov	sl, r3
 80096ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d2:	b10a      	cbz	r2, 80096d8 <_svfiprintf_r+0x60>
 80096d4:	2a25      	cmp	r2, #37	@ 0x25
 80096d6:	d1f9      	bne.n	80096cc <_svfiprintf_r+0x54>
 80096d8:	ebba 0b04 	subs.w	fp, sl, r4
 80096dc:	d00b      	beq.n	80096f6 <_svfiprintf_r+0x7e>
 80096de:	465b      	mov	r3, fp
 80096e0:	4622      	mov	r2, r4
 80096e2:	4629      	mov	r1, r5
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff ff6b 	bl	80095c0 <__ssputs_r>
 80096ea:	3001      	adds	r0, #1
 80096ec:	f000 80a7 	beq.w	800983e <_svfiprintf_r+0x1c6>
 80096f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096f2:	445a      	add	r2, fp
 80096f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80096f6:	f89a 3000 	ldrb.w	r3, [sl]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 809f 	beq.w	800983e <_svfiprintf_r+0x1c6>
 8009700:	2300      	movs	r3, #0
 8009702:	f04f 32ff 	mov.w	r2, #4294967295
 8009706:	f10a 0a01 	add.w	sl, sl, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	9307      	str	r3, [sp, #28]
 800970e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009712:	931a      	str	r3, [sp, #104]	@ 0x68
 8009714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009718:	4654      	mov	r4, sl
 800971a:	2205      	movs	r2, #5
 800971c:	484f      	ldr	r0, [pc, #316]	@ (800985c <_svfiprintf_r+0x1e4>)
 800971e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009722:	f000 fa51 	bl	8009bc8 <memchr>
 8009726:	9a04      	ldr	r2, [sp, #16]
 8009728:	b9d8      	cbnz	r0, 8009762 <_svfiprintf_r+0xea>
 800972a:	06d0      	lsls	r0, r2, #27
 800972c:	bf44      	itt	mi
 800972e:	2320      	movmi	r3, #32
 8009730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009734:	0711      	lsls	r1, r2, #28
 8009736:	bf44      	itt	mi
 8009738:	232b      	movmi	r3, #43	@ 0x2b
 800973a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800973e:	f89a 3000 	ldrb.w	r3, [sl]
 8009742:	2b2a      	cmp	r3, #42	@ 0x2a
 8009744:	d015      	beq.n	8009772 <_svfiprintf_r+0xfa>
 8009746:	9a07      	ldr	r2, [sp, #28]
 8009748:	4654      	mov	r4, sl
 800974a:	2000      	movs	r0, #0
 800974c:	f04f 0c0a 	mov.w	ip, #10
 8009750:	4621      	mov	r1, r4
 8009752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009756:	3b30      	subs	r3, #48	@ 0x30
 8009758:	2b09      	cmp	r3, #9
 800975a:	d94b      	bls.n	80097f4 <_svfiprintf_r+0x17c>
 800975c:	b1b0      	cbz	r0, 800978c <_svfiprintf_r+0x114>
 800975e:	9207      	str	r2, [sp, #28]
 8009760:	e014      	b.n	800978c <_svfiprintf_r+0x114>
 8009762:	eba0 0308 	sub.w	r3, r0, r8
 8009766:	46a2      	mov	sl, r4
 8009768:	fa09 f303 	lsl.w	r3, r9, r3
 800976c:	4313      	orrs	r3, r2
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	e7d2      	b.n	8009718 <_svfiprintf_r+0xa0>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	1d19      	adds	r1, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	9103      	str	r1, [sp, #12]
 800977c:	bfbb      	ittet	lt
 800977e:	425b      	neglt	r3, r3
 8009780:	f042 0202 	orrlt.w	r2, r2, #2
 8009784:	9307      	strge	r3, [sp, #28]
 8009786:	9307      	strlt	r3, [sp, #28]
 8009788:	bfb8      	it	lt
 800978a:	9204      	strlt	r2, [sp, #16]
 800978c:	7823      	ldrb	r3, [r4, #0]
 800978e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009790:	d10a      	bne.n	80097a8 <_svfiprintf_r+0x130>
 8009792:	7863      	ldrb	r3, [r4, #1]
 8009794:	2b2a      	cmp	r3, #42	@ 0x2a
 8009796:	d132      	bne.n	80097fe <_svfiprintf_r+0x186>
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	3402      	adds	r4, #2
 800979c:	1d1a      	adds	r2, r3, #4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097a4:	9203      	str	r2, [sp, #12]
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800986c <_svfiprintf_r+0x1f4>
 80097ac:	2203      	movs	r2, #3
 80097ae:	7821      	ldrb	r1, [r4, #0]
 80097b0:	4650      	mov	r0, sl
 80097b2:	f000 fa09 	bl	8009bc8 <memchr>
 80097b6:	b138      	cbz	r0, 80097c8 <_svfiprintf_r+0x150>
 80097b8:	eba0 000a 	sub.w	r0, r0, sl
 80097bc:	2240      	movs	r2, #64	@ 0x40
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3401      	adds	r4, #1
 80097c2:	4082      	lsls	r2, r0
 80097c4:	4313      	orrs	r3, r2
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097cc:	2206      	movs	r2, #6
 80097ce:	4824      	ldr	r0, [pc, #144]	@ (8009860 <_svfiprintf_r+0x1e8>)
 80097d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097d4:	f000 f9f8 	bl	8009bc8 <memchr>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d036      	beq.n	800984a <_svfiprintf_r+0x1d2>
 80097dc:	4b21      	ldr	r3, [pc, #132]	@ (8009864 <_svfiprintf_r+0x1ec>)
 80097de:	bb1b      	cbnz	r3, 8009828 <_svfiprintf_r+0x1b0>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	3307      	adds	r3, #7
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	3308      	adds	r3, #8
 80097ea:	9303      	str	r3, [sp, #12]
 80097ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ee:	4433      	add	r3, r6
 80097f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f2:	e76a      	b.n	80096ca <_svfiprintf_r+0x52>
 80097f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f8:	460c      	mov	r4, r1
 80097fa:	2001      	movs	r0, #1
 80097fc:	e7a8      	b.n	8009750 <_svfiprintf_r+0xd8>
 80097fe:	2300      	movs	r3, #0
 8009800:	3401      	adds	r4, #1
 8009802:	f04f 0c0a 	mov.w	ip, #10
 8009806:	4619      	mov	r1, r3
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	4620      	mov	r0, r4
 800980c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009810:	3a30      	subs	r2, #48	@ 0x30
 8009812:	2a09      	cmp	r2, #9
 8009814:	d903      	bls.n	800981e <_svfiprintf_r+0x1a6>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0c6      	beq.n	80097a8 <_svfiprintf_r+0x130>
 800981a:	9105      	str	r1, [sp, #20]
 800981c:	e7c4      	b.n	80097a8 <_svfiprintf_r+0x130>
 800981e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009822:	4604      	mov	r4, r0
 8009824:	2301      	movs	r3, #1
 8009826:	e7f0      	b.n	800980a <_svfiprintf_r+0x192>
 8009828:	ab03      	add	r3, sp, #12
 800982a:	462a      	mov	r2, r5
 800982c:	a904      	add	r1, sp, #16
 800982e:	4638      	mov	r0, r7
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	4b0d      	ldr	r3, [pc, #52]	@ (8009868 <_svfiprintf_r+0x1f0>)
 8009834:	f3af 8000 	nop.w
 8009838:	1c42      	adds	r2, r0, #1
 800983a:	4606      	mov	r6, r0
 800983c:	d1d6      	bne.n	80097ec <_svfiprintf_r+0x174>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	065b      	lsls	r3, r3, #25
 8009842:	f53f af2d 	bmi.w	80096a0 <_svfiprintf_r+0x28>
 8009846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009848:	e72c      	b.n	80096a4 <_svfiprintf_r+0x2c>
 800984a:	ab03      	add	r3, sp, #12
 800984c:	462a      	mov	r2, r5
 800984e:	a904      	add	r1, sp, #16
 8009850:	4638      	mov	r0, r7
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4b04      	ldr	r3, [pc, #16]	@ (8009868 <_svfiprintf_r+0x1f0>)
 8009856:	f000 f87d 	bl	8009954 <_printf_i>
 800985a:	e7ed      	b.n	8009838 <_svfiprintf_r+0x1c0>
 800985c:	08009ca4 	.word	0x08009ca4
 8009860:	08009cae 	.word	0x08009cae
 8009864:	00000000 	.word	0x00000000
 8009868:	080095c1 	.word	0x080095c1
 800986c:	08009caa 	.word	0x08009caa

08009870 <_printf_common>:
 8009870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	4616      	mov	r6, r2
 8009876:	4698      	mov	r8, r3
 8009878:	688a      	ldr	r2, [r1, #8]
 800987a:	4607      	mov	r7, r0
 800987c:	690b      	ldr	r3, [r1, #16]
 800987e:	460c      	mov	r4, r1
 8009880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009884:	4293      	cmp	r3, r2
 8009886:	bfb8      	it	lt
 8009888:	4613      	movlt	r3, r2
 800988a:	6033      	str	r3, [r6, #0]
 800988c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009890:	b10a      	cbz	r2, 8009896 <_printf_common+0x26>
 8009892:	3301      	adds	r3, #1
 8009894:	6033      	str	r3, [r6, #0]
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	0699      	lsls	r1, r3, #26
 800989a:	bf42      	ittt	mi
 800989c:	6833      	ldrmi	r3, [r6, #0]
 800989e:	3302      	addmi	r3, #2
 80098a0:	6033      	strmi	r3, [r6, #0]
 80098a2:	6825      	ldr	r5, [r4, #0]
 80098a4:	f015 0506 	ands.w	r5, r5, #6
 80098a8:	d106      	bne.n	80098b8 <_printf_common+0x48>
 80098aa:	f104 0a19 	add.w	sl, r4, #25
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	6832      	ldr	r2, [r6, #0]
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dc2b      	bgt.n	8009910 <_printf_common+0xa0>
 80098b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098bc:	6822      	ldr	r2, [r4, #0]
 80098be:	3b00      	subs	r3, #0
 80098c0:	bf18      	it	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	0692      	lsls	r2, r2, #26
 80098c6:	d430      	bmi.n	800992a <_printf_common+0xba>
 80098c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098cc:	4641      	mov	r1, r8
 80098ce:	4638      	mov	r0, r7
 80098d0:	47c8      	blx	r9
 80098d2:	3001      	adds	r0, #1
 80098d4:	d023      	beq.n	800991e <_printf_common+0xae>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	341a      	adds	r4, #26
 80098da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80098de:	f003 0306 	and.w	r3, r3, #6
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	bf0a      	itet	eq
 80098e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80098ea:	2500      	movne	r5, #0
 80098ec:	6833      	ldreq	r3, [r6, #0]
 80098ee:	f04f 0600 	mov.w	r6, #0
 80098f2:	bf08      	it	eq
 80098f4:	1aed      	subeq	r5, r5, r3
 80098f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80098fa:	bf08      	it	eq
 80098fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009900:	4293      	cmp	r3, r2
 8009902:	bfc4      	itt	gt
 8009904:	1a9b      	subgt	r3, r3, r2
 8009906:	18ed      	addgt	r5, r5, r3
 8009908:	42b5      	cmp	r5, r6
 800990a:	d11a      	bne.n	8009942 <_printf_common+0xd2>
 800990c:	2000      	movs	r0, #0
 800990e:	e008      	b.n	8009922 <_printf_common+0xb2>
 8009910:	2301      	movs	r3, #1
 8009912:	4652      	mov	r2, sl
 8009914:	4641      	mov	r1, r8
 8009916:	4638      	mov	r0, r7
 8009918:	47c8      	blx	r9
 800991a:	3001      	adds	r0, #1
 800991c:	d103      	bne.n	8009926 <_printf_common+0xb6>
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	3501      	adds	r5, #1
 8009928:	e7c1      	b.n	80098ae <_printf_common+0x3e>
 800992a:	18e1      	adds	r1, r4, r3
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	2030      	movs	r0, #48	@ 0x30
 8009930:	3302      	adds	r3, #2
 8009932:	4422      	add	r2, r4
 8009934:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800993c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009940:	e7c2      	b.n	80098c8 <_printf_common+0x58>
 8009942:	2301      	movs	r3, #1
 8009944:	4622      	mov	r2, r4
 8009946:	4641      	mov	r1, r8
 8009948:	4638      	mov	r0, r7
 800994a:	47c8      	blx	r9
 800994c:	3001      	adds	r0, #1
 800994e:	d0e6      	beq.n	800991e <_printf_common+0xae>
 8009950:	3601      	adds	r6, #1
 8009952:	e7d9      	b.n	8009908 <_printf_common+0x98>

08009954 <_printf_i>:
 8009954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	7e0f      	ldrb	r7, [r1, #24]
 800995a:	4691      	mov	r9, r2
 800995c:	4680      	mov	r8, r0
 800995e:	460c      	mov	r4, r1
 8009960:	2f78      	cmp	r7, #120	@ 0x78
 8009962:	469a      	mov	sl, r3
 8009964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800996a:	d807      	bhi.n	800997c <_printf_i+0x28>
 800996c:	2f62      	cmp	r7, #98	@ 0x62
 800996e:	d80a      	bhi.n	8009986 <_printf_i+0x32>
 8009970:	2f00      	cmp	r7, #0
 8009972:	f000 80d2 	beq.w	8009b1a <_printf_i+0x1c6>
 8009976:	2f58      	cmp	r7, #88	@ 0x58
 8009978:	f000 80b9 	beq.w	8009aee <_printf_i+0x19a>
 800997c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009984:	e03a      	b.n	80099fc <_printf_i+0xa8>
 8009986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800998a:	2b15      	cmp	r3, #21
 800998c:	d8f6      	bhi.n	800997c <_printf_i+0x28>
 800998e:	a101      	add	r1, pc, #4	@ (adr r1, 8009994 <_printf_i+0x40>)
 8009990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009994:	080099ed 	.word	0x080099ed
 8009998:	08009a01 	.word	0x08009a01
 800999c:	0800997d 	.word	0x0800997d
 80099a0:	0800997d 	.word	0x0800997d
 80099a4:	0800997d 	.word	0x0800997d
 80099a8:	0800997d 	.word	0x0800997d
 80099ac:	08009a01 	.word	0x08009a01
 80099b0:	0800997d 	.word	0x0800997d
 80099b4:	0800997d 	.word	0x0800997d
 80099b8:	0800997d 	.word	0x0800997d
 80099bc:	0800997d 	.word	0x0800997d
 80099c0:	08009b01 	.word	0x08009b01
 80099c4:	08009a2b 	.word	0x08009a2b
 80099c8:	08009abb 	.word	0x08009abb
 80099cc:	0800997d 	.word	0x0800997d
 80099d0:	0800997d 	.word	0x0800997d
 80099d4:	08009b23 	.word	0x08009b23
 80099d8:	0800997d 	.word	0x0800997d
 80099dc:	08009a2b 	.word	0x08009a2b
 80099e0:	0800997d 	.word	0x0800997d
 80099e4:	0800997d 	.word	0x0800997d
 80099e8:	08009ac3 	.word	0x08009ac3
 80099ec:	6833      	ldr	r3, [r6, #0]
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6032      	str	r2, [r6, #0]
 80099f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80099fc:	2301      	movs	r3, #1
 80099fe:	e09d      	b.n	8009b3c <_printf_i+0x1e8>
 8009a00:	6833      	ldr	r3, [r6, #0]
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	1d19      	adds	r1, r3, #4
 8009a06:	6031      	str	r1, [r6, #0]
 8009a08:	0606      	lsls	r6, r0, #24
 8009a0a:	d501      	bpl.n	8009a10 <_printf_i+0xbc>
 8009a0c:	681d      	ldr	r5, [r3, #0]
 8009a0e:	e003      	b.n	8009a18 <_printf_i+0xc4>
 8009a10:	0645      	lsls	r5, r0, #25
 8009a12:	d5fb      	bpl.n	8009a0c <_printf_i+0xb8>
 8009a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	da03      	bge.n	8009a24 <_printf_i+0xd0>
 8009a1c:	232d      	movs	r3, #45	@ 0x2d
 8009a1e:	426d      	negs	r5, r5
 8009a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a24:	4859      	ldr	r0, [pc, #356]	@ (8009b8c <_printf_i+0x238>)
 8009a26:	230a      	movs	r3, #10
 8009a28:	e011      	b.n	8009a4e <_printf_i+0xfa>
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	0608      	lsls	r0, r1, #24
 8009a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a34:	d402      	bmi.n	8009a3c <_printf_i+0xe8>
 8009a36:	0649      	lsls	r1, r1, #25
 8009a38:	bf48      	it	mi
 8009a3a:	b2ad      	uxthmi	r5, r5
 8009a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a3e:	6033      	str	r3, [r6, #0]
 8009a40:	4852      	ldr	r0, [pc, #328]	@ (8009b8c <_printf_i+0x238>)
 8009a42:	bf14      	ite	ne
 8009a44:	230a      	movne	r3, #10
 8009a46:	2308      	moveq	r3, #8
 8009a48:	2100      	movs	r1, #0
 8009a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a4e:	6866      	ldr	r6, [r4, #4]
 8009a50:	2e00      	cmp	r6, #0
 8009a52:	60a6      	str	r6, [r4, #8]
 8009a54:	bfa2      	ittt	ge
 8009a56:	6821      	ldrge	r1, [r4, #0]
 8009a58:	f021 0104 	bicge.w	r1, r1, #4
 8009a5c:	6021      	strge	r1, [r4, #0]
 8009a5e:	b90d      	cbnz	r5, 8009a64 <_printf_i+0x110>
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	d04b      	beq.n	8009afc <_printf_i+0x1a8>
 8009a64:	4616      	mov	r6, r2
 8009a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a6e:	5dc7      	ldrb	r7, [r0, r7]
 8009a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a74:	462f      	mov	r7, r5
 8009a76:	460d      	mov	r5, r1
 8009a78:	42bb      	cmp	r3, r7
 8009a7a:	d9f4      	bls.n	8009a66 <_printf_i+0x112>
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d10b      	bne.n	8009a98 <_printf_i+0x144>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	07df      	lsls	r7, r3, #31
 8009a84:	d508      	bpl.n	8009a98 <_printf_i+0x144>
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	6861      	ldr	r1, [r4, #4]
 8009a8a:	4299      	cmp	r1, r3
 8009a8c:	bfde      	ittt	le
 8009a8e:	2330      	movle	r3, #48	@ 0x30
 8009a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a98:	1b92      	subs	r2, r2, r6
 8009a9a:	6122      	str	r2, [r4, #16]
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	aa03      	add	r2, sp, #12
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f8cd a000 	str.w	sl, [sp]
 8009aa8:	f7ff fee2 	bl	8009870 <_printf_common>
 8009aac:	3001      	adds	r0, #1
 8009aae:	d14a      	bne.n	8009b46 <_printf_i+0x1f2>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	b004      	add	sp, #16
 8009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	f043 0320 	orr.w	r3, r3, #32
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	2778      	movs	r7, #120	@ 0x78
 8009ac4:	4832      	ldr	r0, [pc, #200]	@ (8009b90 <_printf_i+0x23c>)
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009acc:	061f      	lsls	r7, r3, #24
 8009ace:	6831      	ldr	r1, [r6, #0]
 8009ad0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ad4:	d402      	bmi.n	8009adc <_printf_i+0x188>
 8009ad6:	065f      	lsls	r7, r3, #25
 8009ad8:	bf48      	it	mi
 8009ada:	b2ad      	uxthmi	r5, r5
 8009adc:	6031      	str	r1, [r6, #0]
 8009ade:	07d9      	lsls	r1, r3, #31
 8009ae0:	bf44      	itt	mi
 8009ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ae6:	6023      	strmi	r3, [r4, #0]
 8009ae8:	b11d      	cbz	r5, 8009af2 <_printf_i+0x19e>
 8009aea:	2310      	movs	r3, #16
 8009aec:	e7ac      	b.n	8009a48 <_printf_i+0xf4>
 8009aee:	4827      	ldr	r0, [pc, #156]	@ (8009b8c <_printf_i+0x238>)
 8009af0:	e7e9      	b.n	8009ac6 <_printf_i+0x172>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	f023 0320 	bic.w	r3, r3, #32
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	e7f6      	b.n	8009aea <_printf_i+0x196>
 8009afc:	4616      	mov	r6, r2
 8009afe:	e7bd      	b.n	8009a7c <_printf_i+0x128>
 8009b00:	6833      	ldr	r3, [r6, #0]
 8009b02:	6825      	ldr	r5, [r4, #0]
 8009b04:	1d18      	adds	r0, r3, #4
 8009b06:	6961      	ldr	r1, [r4, #20]
 8009b08:	6030      	str	r0, [r6, #0]
 8009b0a:	062e      	lsls	r6, r5, #24
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	d501      	bpl.n	8009b14 <_printf_i+0x1c0>
 8009b10:	6019      	str	r1, [r3, #0]
 8009b12:	e002      	b.n	8009b1a <_printf_i+0x1c6>
 8009b14:	0668      	lsls	r0, r5, #25
 8009b16:	d5fb      	bpl.n	8009b10 <_printf_i+0x1bc>
 8009b18:	8019      	strh	r1, [r3, #0]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	e7bc      	b.n	8009a9c <_printf_i+0x148>
 8009b22:	6833      	ldr	r3, [r6, #0]
 8009b24:	2100      	movs	r1, #0
 8009b26:	1d1a      	adds	r2, r3, #4
 8009b28:	6032      	str	r2, [r6, #0]
 8009b2a:	681e      	ldr	r6, [r3, #0]
 8009b2c:	6862      	ldr	r2, [r4, #4]
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f000 f84a 	bl	8009bc8 <memchr>
 8009b34:	b108      	cbz	r0, 8009b3a <_printf_i+0x1e6>
 8009b36:	1b80      	subs	r0, r0, r6
 8009b38:	6060      	str	r0, [r4, #4]
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b44:	e7aa      	b.n	8009a9c <_printf_i+0x148>
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	4632      	mov	r2, r6
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	47d0      	blx	sl
 8009b50:	3001      	adds	r0, #1
 8009b52:	d0ad      	beq.n	8009ab0 <_printf_i+0x15c>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	079b      	lsls	r3, r3, #30
 8009b58:	d413      	bmi.n	8009b82 <_printf_i+0x22e>
 8009b5a:	68e0      	ldr	r0, [r4, #12]
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	4298      	cmp	r0, r3
 8009b60:	bfb8      	it	lt
 8009b62:	4618      	movlt	r0, r3
 8009b64:	e7a6      	b.n	8009ab4 <_printf_i+0x160>
 8009b66:	2301      	movs	r3, #1
 8009b68:	4632      	mov	r2, r6
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	47d0      	blx	sl
 8009b70:	3001      	adds	r0, #1
 8009b72:	d09d      	beq.n	8009ab0 <_printf_i+0x15c>
 8009b74:	3501      	adds	r5, #1
 8009b76:	68e3      	ldr	r3, [r4, #12]
 8009b78:	9903      	ldr	r1, [sp, #12]
 8009b7a:	1a5b      	subs	r3, r3, r1
 8009b7c:	42ab      	cmp	r3, r5
 8009b7e:	dcf2      	bgt.n	8009b66 <_printf_i+0x212>
 8009b80:	e7eb      	b.n	8009b5a <_printf_i+0x206>
 8009b82:	2500      	movs	r5, #0
 8009b84:	f104 0619 	add.w	r6, r4, #25
 8009b88:	e7f5      	b.n	8009b76 <_printf_i+0x222>
 8009b8a:	bf00      	nop
 8009b8c:	08009cb5 	.word	0x08009cb5
 8009b90:	08009cc6 	.word	0x08009cc6

08009b94 <memmove>:
 8009b94:	4288      	cmp	r0, r1
 8009b96:	b510      	push	{r4, lr}
 8009b98:	eb01 0402 	add.w	r4, r1, r2
 8009b9c:	d902      	bls.n	8009ba4 <memmove+0x10>
 8009b9e:	4284      	cmp	r4, r0
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	d807      	bhi.n	8009bb4 <memmove+0x20>
 8009ba4:	1e43      	subs	r3, r0, #1
 8009ba6:	42a1      	cmp	r1, r4
 8009ba8:	d008      	beq.n	8009bbc <memmove+0x28>
 8009baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bb2:	e7f8      	b.n	8009ba6 <memmove+0x12>
 8009bb4:	4402      	add	r2, r0
 8009bb6:	4601      	mov	r1, r0
 8009bb8:	428a      	cmp	r2, r1
 8009bba:	d100      	bne.n	8009bbe <memmove+0x2a>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bc6:	e7f7      	b.n	8009bb8 <memmove+0x24>

08009bc8 <memchr>:
 8009bc8:	b2c9      	uxtb	r1, r1
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4402      	add	r2, r0
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	d101      	bne.n	8009bda <memchr+0x12>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e003      	b.n	8009be2 <memchr+0x1a>
 8009bda:	7804      	ldrb	r4, [r0, #0]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	428c      	cmp	r4, r1
 8009be0:	d1f6      	bne.n	8009bd0 <memchr+0x8>
 8009be2:	bd10      	pop	{r4, pc}

08009be4 <memcpy>:
 8009be4:	440a      	add	r2, r1
 8009be6:	1e43      	subs	r3, r0, #1
 8009be8:	4291      	cmp	r1, r2
 8009bea:	d100      	bne.n	8009bee <memcpy+0xa>
 8009bec:	4770      	bx	lr
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf4:	4291      	cmp	r1, r2
 8009bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bfa:	d1f9      	bne.n	8009bf0 <memcpy+0xc>
 8009bfc:	bd10      	pop	{r4, pc}

08009bfe <_realloc_r>:
 8009bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c02:	4680      	mov	r8, r0
 8009c04:	4615      	mov	r5, r2
 8009c06:	460c      	mov	r4, r1
 8009c08:	b921      	cbnz	r1, 8009c14 <_realloc_r+0x16>
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c10:	f7ff bb9c 	b.w	800934c <_malloc_r>
 8009c14:	b92a      	cbnz	r2, 8009c22 <_realloc_r+0x24>
 8009c16:	f7ff fc89 	bl	800952c <_free_r>
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c22:	f000 f81a 	bl	8009c5a <_malloc_usable_size_r>
 8009c26:	4285      	cmp	r5, r0
 8009c28:	4606      	mov	r6, r0
 8009c2a:	d802      	bhi.n	8009c32 <_realloc_r+0x34>
 8009c2c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c30:	d8f4      	bhi.n	8009c1c <_realloc_r+0x1e>
 8009c32:	4629      	mov	r1, r5
 8009c34:	4640      	mov	r0, r8
 8009c36:	f7ff fb89 	bl	800934c <_malloc_r>
 8009c3a:	4607      	mov	r7, r0
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d0ec      	beq.n	8009c1a <_realloc_r+0x1c>
 8009c40:	42b5      	cmp	r5, r6
 8009c42:	462a      	mov	r2, r5
 8009c44:	4621      	mov	r1, r4
 8009c46:	bf28      	it	cs
 8009c48:	4632      	movcs	r2, r6
 8009c4a:	f7ff ffcb 	bl	8009be4 <memcpy>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4640      	mov	r0, r8
 8009c52:	463c      	mov	r4, r7
 8009c54:	f7ff fc6a 	bl	800952c <_free_r>
 8009c58:	e7e0      	b.n	8009c1c <_realloc_r+0x1e>

08009c5a <_malloc_usable_size_r>:
 8009c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5e:	1f18      	subs	r0, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbc      	itt	lt
 8009c64:	580b      	ldrlt	r3, [r1, r0]
 8009c66:	18c0      	addlt	r0, r0, r3
 8009c68:	4770      	bx	lr
	...

08009c6c <_init>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	bf00      	nop
 8009c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c72:	bc08      	pop	{r3}
 8009c74:	469e      	mov	lr, r3
 8009c76:	4770      	bx	lr

08009c78 <_fini>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	bf00      	nop
 8009c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c7e:	bc08      	pop	{r3}
 8009c80:	469e      	mov	lr, r3
 8009c82:	4770      	bx	lr
