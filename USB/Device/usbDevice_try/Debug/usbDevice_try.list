
usbDevice_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800641c  0800641c  0000741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800642c  0800642c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  0800642c  0800642c  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800642c  0800642c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006430  08006430  00007430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006434  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000000c  08006440  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  20000310  08006440  00008310  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d894  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  000158d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081e  00000000  00000000  000186c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f66d  00000000  00000000  00018ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd23  00000000  00000000  0003854b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c010b  00000000  00000000  0004626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c10  00000000  00000000  001063bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00108fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08006404 	.word	0x08006404

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08006404 	.word	0x08006404

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 f9e6 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f806 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f8a2 	bl	80003ec <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80002a8:	f000 f86e 	bl	8000388 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <main+0x14>

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b09c      	sub	sp, #112	@ 0x70
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0320 	add.w	r3, r7, #32
 80002ba:	2250      	movs	r2, #80	@ 0x50
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f006 f873 	bl	80063aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	f107 0308 	add.w	r3, r7, #8
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000384 <SystemClock_Config+0xd4>)
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	4a2a      	ldr	r2, [pc, #168]	@ (8000384 <SystemClock_Config+0xd4>)
 80002dc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002e0:	6113      	str	r3, [r2, #16]
 80002e2:	4b28      	ldr	r3, [pc, #160]	@ (8000384 <SystemClock_Config+0xd4>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80002ee:	bf00      	nop
 80002f0:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <SystemClock_Config+0xd4>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	2b08      	cmp	r3, #8
 80002fa:	d1f9      	bne.n	80002f0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80002fc:	2322      	movs	r3, #34	@ 0x22
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000304:	2308      	movs	r3, #8
 8000306:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2340      	movs	r3, #64	@ 0x40
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800030c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSI;
 8000316:	2301      	movs	r3, #1
 8000318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800031a:	2308      	movs	r3, #8
 800031c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 128;
 800031e:	2380      	movs	r3, #128	@ 0x80
 8000320:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000322:	2308      	movs	r3, #8
 8000324:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000326:	2302      	movs	r3, #2
 8000328:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800032a:	2302      	movs	r3, #2
 800032c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800032e:	2308      	movs	r3, #8
 8000330:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000332:	2300      	movs	r3, #0
 8000334:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0320 	add.w	r3, r7, #32
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fe68 	bl	8002014 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800034a:	f000 f869 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	231f      	movs	r3, #31
 8000350:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2303      	movs	r3, #3
 8000354:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2103      	movs	r1, #3
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fa89 	bl	8002884 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000378:	f000 f852 	bl	8000420 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3770      	adds	r7, #112	@ 0x70
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	44020800 	.word	0x44020800

08000388 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800038c:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 800038e:	4a16      	ldr	r2, [pc, #88]	@ (80003e8 <MX_USB_PCD_Init+0x60>)
 8000390:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000392:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 8000394:	2208      	movs	r2, #8
 8000396:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 800039a:	2202      	movs	r2, #2
 800039c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800039e:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003a0:	2202      	movs	r2, #2
 80003a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_USB_PCD_Init+0x5c>)
 80003d0:	f000 fbfd 	bl	8000bce <HAL_PCD_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80003da:	f000 f821 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40016000 	.word	0x40016000

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_GPIO_Init+0x30>)
 80003f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003f8:	4a08      	ldr	r2, [pc, #32]	@ (800041c <MX_GPIO_Init+0x30>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_GPIO_Init+0x30>)
 8000404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	44020c00 	.word	0x44020c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
	...

0800043c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b0a6      	sub	sp, #152	@ 0x98
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2288      	movs	r2, #136	@ 0x88
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f005 ffac 	bl	80063aa <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a18      	ldr	r2, [pc, #96]	@ (80004b8 <HAL_PCD_MspInit+0x7c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d129      	bne.n	80004b0 <HAL_PCD_MspInit+0x74>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800045c:	f04f 0200 	mov.w	r2, #0
 8000460:	f04f 0310 	mov.w	r3, #16
 8000464:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000468:	2330      	movs	r3, #48	@ 0x30
 800046a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fd06 	bl	8002e84 <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 800047e:	f7ff ffcf 	bl	8000420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <HAL_PCD_MspInit+0x80>)
 8000484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000488:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <HAL_PCD_MspInit+0x80>)
 800048a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800048e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_PCD_MspInit+0x80>)
 8000494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	204a      	movs	r0, #74	@ 0x4a
 80004a6:	f000 fa57 	bl	8000958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80004aa:	204a      	movs	r0, #74	@ 0x4a
 80004ac:	f000 fa6e 	bl	800098c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3798      	adds	r7, #152	@ 0x98
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40016000 	.word	0x40016000
 80004bc:	44020c00 	.word	0x44020c00

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <NMI_Handler+0x4>

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f000 f947 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <USB_DRD_FS_IRQHandler+0x10>)
 8000526:	f000 fc23 	bl	8000d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800053a:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <SystemInit+0xc8>)
 800053c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000540:	4a2e      	ldr	r2, [pc, #184]	@ (80005fc <SystemInit+0xc8>)
 8000542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000546:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <SystemInit+0xcc>)
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000550:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <SystemInit+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <SystemInit+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemInit+0xcc>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4927      	ldr	r1, [pc, #156]	@ (8000600 <SystemInit+0xcc>)
 8000562:	4b28      	ldr	r3, [pc, #160]	@ (8000604 <SystemInit+0xd0>)
 8000564:	4013      	ands	r3, r2
 8000566:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SystemInit+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800056e:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <SystemInit+0xcc>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemInit+0xcc>)
 8000576:	4a24      	ldr	r2, [pc, #144]	@ (8000608 <SystemInit+0xd4>)
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <SystemInit+0xcc>)
 800057c:	2200      	movs	r2, #0
 800057e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemInit+0xcc>)
 8000582:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <SystemInit+0xd4>)
 8000584:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <SystemInit+0xcc>)
 8000588:	2200      	movs	r2, #0
 800058a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800058c:	4b1c      	ldr	r3, [pc, #112]	@ (8000600 <SystemInit+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1b      	ldr	r2, [pc, #108]	@ (8000600 <SystemInit+0xcc>)
 8000592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000598:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <SystemInit+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800059e:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <SystemInit+0xc8>)
 80005a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80005a4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <SystemInit+0xd8>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80005ae:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80005b6:	d003      	beq.n	80005c0 <SystemInit+0x8c>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80005be:	d117      	bne.n	80005f0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <SystemInit+0xd8>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <SystemInit+0xd8>)
 80005ce:	4a10      	ldr	r2, [pc, #64]	@ (8000610 <SystemInit+0xdc>)
 80005d0:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <SystemInit+0xd8>)
 80005d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <SystemInit+0xe0>)
 80005d6:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <SystemInit+0xd8>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <SystemInit+0xd8>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <SystemInit+0xd8>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <SystemInit+0xd8>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	61d3      	str	r3, [r2, #28]
  }
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	44020c00 	.word	0x44020c00
 8000604:	fae2eae3 	.word	0xfae2eae3
 8000608:	01010280 	.word	0x01010280
 800060c:	40022000 	.word	0x40022000
 8000610:	08192a3b 	.word	0x08192a3b
 8000614:	4c5d6e7f 	.word	0x4c5d6e7f

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000650 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800061c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800061e:	e003      	b.n	8000628 <LoopCopyDataInit>

08000620 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000622:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000624:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000626:	3104      	adds	r1, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <LoopForever+0xe>)
	adds	r2, r0, r1
 800062c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800062e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000630:	d3f6      	bcc.n	8000620 <CopyDataInit>
	ldr	r2, =_sbss
 8000632:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000634:	e002      	b.n	800063c <LoopFillZerobss>

08000636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000636:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000638:	f842 3b04 	str.w	r3, [r2], #4

0800063c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <LoopForever+0x16>)
	cmp	r2, r3
 800063e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000640:	d3f9      	bcc.n	8000636 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000642:	f7ff ff77 	bl	8000534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f005 feb9 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fe25 	bl	8000298 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000650:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000654:	08006434 	.word	0x08006434
	ldr	r0, =_sdata
 8000658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800065c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000660:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000664:	20000310 	.word	0x20000310

08000668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_IRQHandler>
	...

0800066c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f966 	bl	8000942 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000676:	f002 fabd 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800067a:	4602      	mov	r2, r0
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <HAL_Init+0x44>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f003 030f 	and.w	r3, r3, #15
 8000684:	490b      	ldr	r1, [pc, #44]	@ (80006b4 <HAL_Init+0x48>)
 8000686:	5ccb      	ldrb	r3, [r1, r3]
 8000688:	fa22 f303 	lsr.w	r3, r2, r3
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <HAL_Init+0x4c>)
 800068e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000690:	2004      	movs	r0, #4
 8000692:	f000 f9ab 	bl	80009ec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f810 	bl	80006bc <HAL_InitTick>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e002      	b.n	80006ac <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006a6:	f7ff fec1 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	44020c00 	.word	0x44020c00
 80006b4:	0800641c 	.word	0x0800641c
 80006b8:	20000000 	.word	0x20000000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80006c8:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <HAL_InitTick+0xdc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	e05c      	b.n	800078e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <HAL_InitTick+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d10c      	bne.n	80006fa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <HAL_InitTick+0xe4>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <HAL_InitTick+0xdc>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e037      	b.n	800076a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80006fa:	f000 f9cf 	bl	8000a9c <HAL_SYSTICK_GetCLKSourceConfig>
 80006fe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d023      	beq.n	800074e <HAL_InitTick+0x92>
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d82d      	bhi.n	8000768 <HAL_InitTick+0xac>
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d003      	beq.n	800071a <HAL_InitTick+0x5e>
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d00d      	beq.n	8000734 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000718:	e026      	b.n	8000768 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800071a:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <HAL_InitTick+0xe4>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <HAL_InitTick+0xdc>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000728:	fbb3 f3f1 	udiv	r3, r3, r1
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60fb      	str	r3, [r7, #12]
        break;
 8000732:	e01a      	b.n	800076a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_InitTick+0xdc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000742:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	60fb      	str	r3, [r7, #12]
        break;
 800074c:	e00d      	b.n	800076a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0xdc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000758:	fbb3 f3f2 	udiv	r3, r3, r2
 800075c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000760:	fbb2 f3f3 	udiv	r3, r2, r3
 8000764:	60fb      	str	r3, [r7, #12]
        break;
 8000766:	e000      	b.n	800076a <HAL_InitTick+0xae>
        break;
 8000768:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f000 f91c 	bl	80009a8 <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e009      	b.n	800078e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077a:	2200      	movs	r2, #0
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	f04f 30ff 	mov.w	r0, #4294967295
 8000782:	f000 f8e9 	bl	8000958 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <HAL_InitTick+0xe8>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000308 	.word	0x20000308

080007d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000308 	.word	0x20000308

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	@ (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db0b      	blt.n	8000876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	f003 021f 	and.w	r2, r3, #31
 8000864:	4907      	ldr	r1, [pc, #28]	@ (8000884 <__NVIC_EnableIRQ+0x38>)
 8000866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086a:	095b      	lsrs	r3, r3, #5
 800086c:	2001      	movs	r0, #1
 800086e:	fa00 f202 	lsl.w	r2, r0, r2
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100

08000888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db0a      	blt.n	80008b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <__NVIC_SetPriority+0x4c>)
 80008a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	440b      	add	r3, r1
 80008ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b0:	e00a      	b.n	80008c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <__NVIC_SetPriority+0x50>)
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	3b04      	subs	r3, #4
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	440b      	add	r3, r1
 80008c6:	761a      	strb	r2, [r3, #24]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	@ 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f1c3 0307 	rsb	r3, r3, #7
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	bf28      	it	cs
 80008fa:	2304      	movcs	r3, #4
 80008fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3304      	adds	r3, #4
 8000902:	2b06      	cmp	r3, #6
 8000904:	d902      	bls.n	800090c <NVIC_EncodePriority+0x30>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3b03      	subs	r3, #3
 800090a:	e000      	b.n	800090e <NVIC_EncodePriority+0x32>
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	f04f 32ff 	mov.w	r2, #4294967295
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43da      	mvns	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	401a      	ands	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000924:	f04f 31ff 	mov.w	r1, #4294967295
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43d9      	mvns	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	4313      	orrs	r3, r2
         );
}
 8000936:	4618      	mov	r0, r3
 8000938:	3724      	adds	r7, #36	@ 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff4c 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000966:	f7ff ff63 	bl	8000830 <__NVIC_GetPriorityGrouping>
 800096a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	6978      	ldr	r0, [r7, #20]
 8000972:	f7ff ffb3 	bl	80008dc <NVIC_EncodePriority>
 8000976:	4602      	mov	r2, r0
 8000978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff82 	bl	8000888 <__NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff56 	bl	800084c <__NVIC_EnableIRQ>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b8:	d301      	bcc.n	80009be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00d      	b.n	80009da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_SYSTICK_Config+0x40>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_SYSTICK_Config+0x40>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_SYSTICK_Config+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <HAL_SYSTICK_Config+0x40>)
 80009d2:	f043 0303 	orr.w	r3, r3, #3
 80009d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d844      	bhi.n	8000a84 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80009fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000a00 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a23 	.word	0x08000a23
 8000a04:	08000a41 	.word	0x08000a41
 8000a08:	08000a63 	.word	0x08000a63
 8000a0c:	08000a85 	.word	0x08000a85
 8000a10:	08000a15 	.word	0x08000a15
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6013      	str	r3, [r2, #0]
      break;
 8000a20:	e031      	b.n	8000a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a28:	f023 0304 	bic.w	r3, r3, #4
 8000a2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a36:	f023 030c 	bic.w	r3, r3, #12
 8000a3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a3e:	e022      	b.n	8000a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a13      	ldr	r2, [pc, #76]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a46:	f023 0304 	bic.w	r3, r3, #4
 8000a4a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a52:	f023 030c 	bic.w	r3, r3, #12
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a60:	e011      	b.n	8000a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a68:	f023 0304 	bic.w	r3, r3, #4
 8000a6c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000a74:	f023 030c 	bic.w	r3, r3, #12
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000a82:	e000      	b.n	8000a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000a84:	bf00      	nop
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e010 	.word	0xe000e010
 8000a98:	44020c00 	.word	0x44020c00

08000a9c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	e01e      	b.n	8000af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d00f      	beq.n	8000ae6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d80f      	bhi.n	8000aec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d003      	beq.n	8000ae0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ad8:	e008      	b.n	8000aec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
        break;
 8000ade:	e008      	b.n	8000af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
        break;
 8000ae4:	e005      	b.n	8000af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
        break;
 8000aea:	e002      	b.n	8000af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
        break;
 8000af0:	bf00      	nop
    }
  }
  return systick_source;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000e010 	.word	0xe000e010
 8000b04:	44020c00 	.word	0x44020c00

08000b08 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8000b14:	230a      	movs	r3, #10
 8000b16:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8000b18:	e002      	b.n	8000b20 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f9      	bne.n	8000b1a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b3c:	b29b      	uxth	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8000b56:	230a      	movs	r3, #10
 8000b58:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8000b5a:	e002      	b.n	8000b62 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f9      	bne.n	8000b5c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	0c1b      	lsrs	r3, r3, #16
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b7e:	b29b      	uxth	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8000b98:	230a      	movs	r3, #10
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8000b9c:	e002      	b.n	8000ba4 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f9      	bne.n	8000b9e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000bb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc0:	b29b      	uxth	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af02      	add	r7, sp, #8
 8000bd4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e0c3      	b.n	8000d68 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fc21 	bl	800043c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fff8 	bl	8003bfc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e03f      	b.n	8000c92 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3315      	adds	r3, #21
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	440b      	add	r3, r1
 8000c34:	3314      	adds	r3, #20
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3317      	adds	r3, #23
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3324      	adds	r3, #36	@ 0x24
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3328      	adds	r3, #40	@ 0x28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3304      	adds	r3, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	791b      	ldrb	r3, [r3, #4]
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d3ba      	bcc.n	8000c12 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e044      	b.n	8000d2c <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	440b      	add	r3, r1
 8000d08:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3b5      	bcc.n	8000ca2 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7c1a      	ldrb	r2, [r3, #16]
 8000d3e:	f88d 2000 	strb.w	r2, [sp]
 8000d42:	3304      	adds	r3, #4
 8000d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d46:	f002 ff91 	bl	8003c6c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7b1b      	ldrb	r3, [r3, #12]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d102      	bne.n	8000d66 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f001 f929 	bl	8001fb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f816 	bl	8004dae <USB_ReadInterrupts>
 8000d82:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f91c 	bl	8000fcc <PCD_EP_ISR_Handler>

    return;
 8000d94:	e0de      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d010      	beq.n	8000dc2 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8000dae:	400b      	ands	r3, r1
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f004 f91d 	bl	8004ff2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f8e1 	bl	8000f82 <HAL_PCD_SetAddress>

    return;
 8000dc0:	e0c8      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d009      	beq.n	8000de0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8000dda:	400b      	ands	r3, r1
 8000ddc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8000dde:	e0b9      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8000df8:	400b      	ands	r3, r1
 8000dfa:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8000dfc:	e0aa      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d029      	beq.n	8000e5c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0208 	bic.w	r2, r2, #8
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d107      	bne.n	8000e42 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f001 f8dd 	bl	8001ffc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f893 	bl	8000f6e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000e56:	400b      	ands	r3, r1
 8000e58:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8000e5a:	e07b      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d01c      	beq.n	8000ea0 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0208 	orr.w	r2, r2, #8
 8000e74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8000e84:	400b      	ands	r3, r1
 8000e86:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0204 	orr.w	r2, r2, #4
 8000e96:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f85e 	bl	8000f5a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000e9e:	e059      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d033      	beq.n	8000f12 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8000eb8:	400b      	ands	r3, r1
 8000eba:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d121      	bne.n	8000f0a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0204 	orr.w	r2, r2, #4
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0208 	orr.w	r2, r2, #8
 8000ee4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 f87a 	bl	8001ffc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000f08:	e024      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f825 	bl	8000f5a <HAL_PCD_SuspendCallback>
    return;
 8000f10:	e020      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f004 f851 	bl	8004fd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000f34:	e00e      	b.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8000f52:	bf00      	nop
  }
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_PCD_SetAddress+0x1a>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e012      	b.n	8000fc2 <HAL_PCD_SetAddress+0x40>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fee8 	bl	8004d88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000fd4:	e326      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fdc:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8000fde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8000fea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8124 	bne.w	800123c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ff4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d13e      	bne.n	800107c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b89      	ldr	r3, [pc, #548]	@ (800122c <PCD_EP_ISR_Handler+0x260>)
 8001006:	4013      	ands	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001014:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3314      	adds	r3, #20
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800101c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001034:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	441a      	add	r2, r3
 8001040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001042:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001044:	2100      	movs	r1, #0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f003 ffab 	bl	8004fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7c5b      	ldrb	r3, [r3, #17]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 82e6 	beq.w	8001624 <PCD_EP_ISR_Handler+0x658>
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 82e1 	bne.w	8001624 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7c5b      	ldrb	r3, [r3, #17]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800106c:	b2da      	uxtb	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	745a      	strb	r2, [r3, #17]
 800107a:	e2d3      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800108c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800108e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001092:	2b00      	cmp	r3, #0
 8001094:	d027      	beq.n	80010e6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f7ff fd31 	bl	8000b08 <PCD_GET_EP_RX_CNT>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80010b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80010bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f003 fee3 	bl	8004e8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b58      	ldr	r3, [pc, #352]	@ (8001230 <PCD_EP_ISR_Handler+0x264>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010dc:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f003 ff32 	bl	8004f48 <HAL_PCD_SetupStageCallback>
 80010e4:	e29e      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80010e6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f280 829a 	bge.w	8001624 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001230 <PCD_EP_ISR_Handler+0x264>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001102:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001106:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f7ff fcf8 	bl	8000b08 <PCD_GET_EP_RX_CNT>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d019      	beq.n	800115c <PCD_EP_ISR_Handler+0x190>
 8001128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d015      	beq.n	800115c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001136:	6959      	ldr	r1, [r3, #20]
 8001138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800113c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001140:	b29b      	uxth	r3, r3
 8001142:	f003 fea3 	bl	8004e8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	441a      	add	r2, r3
 8001150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001152:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f003 ff08 	bl	8004f6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001164:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 825a 	bne.w	8001624 <PCD_EP_ISR_Handler+0x658>
 8001170:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001172:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001176:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800117a:	f000 8253 	beq.w	8001624 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800117e:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a2c      	ldr	r2, [pc, #176]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 8001184:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001188:	6053      	str	r3, [r2, #4]
 800118a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <PCD_EP_ISR_Handler+0x1d4>
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800119c:	6053      	str	r3, [r2, #4]
 800119e:	e02e      	b.n	80011fe <PCD_EP_ISR_Handler+0x232>
 80011a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80011a6:	d814      	bhi.n	80011d2 <PCD_EP_ISR_Handler+0x206>
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <PCD_EP_ISR_Handler+0x1f6>
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	069b      	lsls	r3, r3, #26
 80011ca:	491a      	ldr	r1, [pc, #104]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
 80011d0:	e015      	b.n	80011fe <PCD_EP_ISR_Handler+0x232>
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <PCD_EP_ISR_Handler+0x220>
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	069b      	lsls	r3, r3, #26
 80011f4:	4313      	orrs	r3, r2
 80011f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001234 <PCD_EP_ISR_Handler+0x268>)
 80011f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011fc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <PCD_EP_ISR_Handler+0x26c>)
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e1fb      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
 800122c:	07ff8f0f 	.word	0x07ff8f0f
 8001230:	07ff0f8f 	.word	0x07ff0f8f
 8001234:	40016400 	.word	0x40016400
 8001238:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800124e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001252:	2b00      	cmp	r3, #0
 8001254:	f280 80bd 	bge.w	80013d2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b9e      	ldr	r3, [pc, #632]	@ (80014e4 <PCD_EP_ISR_Handler+0x518>)
 800126a:	4013      	ands	r3, r2
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001282:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001284:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	4413      	add	r3, r2
 8001298:	3304      	adds	r3, #4
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800129c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d116      	bne.n	80012d2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f7ff fc2a 	bl	8000b08 <PCD_GET_EP_RX_CNT>
 80012b4:	4603      	mov	r3, r0
 80012b6:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 80012b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d067      	beq.n	800138e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c4:	6959      	ldr	r1, [r3, #20]
 80012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c8:	88da      	ldrh	r2, [r3, #6]
 80012ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012cc:	f003 fdde 	bl	8004e8c <USB_ReadPMA>
 80012d0:	e05d      	b.n	800138e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	78db      	ldrb	r3, [r3, #3]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d108      	bne.n	80012ec <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80012dc:	461a      	mov	r2, r3
 80012de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f9ad 	bl	8001640 <HAL_PCD_EP_DB_Receive>
 80012e6:	4603      	mov	r3, r0
 80012e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ea:	e050      	b.n	800138e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b7a      	ldr	r3, [pc, #488]	@ (80014e8 <PCD_EP_ISR_Handler+0x51c>)
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	441a      	add	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001316:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800131a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d016      	beq.n	8001362 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f7ff fc03 	bl	8000b4a <PCD_GET_EP_DBUF0_CNT>
 8001344:	4603      	mov	r3, r0
 8001346:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8001348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01f      	beq.n	800138e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001354:	6959      	ldr	r1, [r3, #20]
 8001356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001358:	891a      	ldrh	r2, [r3, #8]
 800135a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800135c:	f003 fd96 	bl	8004e8c <USB_ReadPMA>
 8001360:	e015      	b.n	800138e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fc0d 	bl	8000b8c <PCD_GET_EP_DBUF1_CNT>
 8001372:	4603      	mov	r3, r0
 8001374:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8001376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	6959      	ldr	r1, [r3, #20]
 8001384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001386:	895a      	ldrh	r2, [r3, #10]
 8001388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800138a:	f003 fd7f 	bl	8004e8c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800138e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001394:	441a      	add	r2, r3
 8001396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001398:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013a0:	441a      	add	r2, r3
 80013a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <PCD_EP_ISR_Handler+0x3ec>
 80013ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d206      	bcs.n	80013c6 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f003 fdd4 	bl	8004f6c <HAL_PCD_DataOutStageCallback>
 80013c4:	e005      	b.n	80013d2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fc71 	bl	8003cb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80013d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80013d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8123 	beq.w	8001624 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80013de:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	3310      	adds	r3, #16
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <PCD_EP_ISR_Handler+0x520>)
 8001406:	4013      	ands	r3, r2
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800141a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f040 80b8 	bne.w	800159a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800142a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001432:	7b1b      	ldrb	r3, [r3, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80a9 	beq.w	800158c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800143a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800143c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d055      	beq.n	80014f0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d124      	bne.n	8001496 <PCD_EP_ISR_Handler+0x4ca>
 800144c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001466:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800146a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800147a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800148a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800148e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e07a      	b.n	800158c <PCD_EP_ISR_Handler+0x5c0>
 8001496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d176      	bne.n	800158c <PCD_EP_ISR_Handler+0x5c0>
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80014bc:	b292      	uxth	r2, r2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80014ca:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80014ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e054      	b.n	800158c <PCD_EP_ISR_Handler+0x5c0>
 80014e2:	bf00      	nop
 80014e4:	07ff0f8f 	.word	0x07ff0f8f
 80014e8:	07ff8f8f 	.word	0x07ff8f8f
 80014ec:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d124      	bne.n	8001542 <PCD_EP_ISR_Handler+0x576>
 80014f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001512:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001516:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001526:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001536:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800153a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	e024      	b.n	800158c <PCD_EP_ISR_Handler+0x5c0>
 8001542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d120      	bne.n	800158c <PCD_EP_ISR_Handler+0x5c0>
 800154a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001554:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001568:	b292      	uxth	r2, r2
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8001576:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800157a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001584:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001588:	6852      	ldr	r2, [r2, #4]
 800158a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800158c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f003 fd05 	bl	8004fa2 <HAL_PCD_DataInStageCallback>
 8001598:	e044      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800159a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d139      	bne.n	8001618 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80015ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80015be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d906      	bls.n	80015d6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80015c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d2:	619a      	str	r2, [r3, #24]
 80015d4:	e002      	b.n	80015dc <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80015dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f003 fcd9 	bl	8004fa2 <HAL_PCD_DataInStageCallback>
 80015f0:	e018      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80015f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015f8:	441a      	add	r2, r3
 80015fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80015fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001604:	441a      	add	r2, r3
 8001606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001608:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fb4f 	bl	8003cb4 <USB_EPStartXfer>
 8001616:	e005      	b.n	8001624 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001618:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800161a:	461a      	mov	r2, r3
 800161c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8e8 	bl	80017f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f acd1 	bne.w	8000fd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3738      	adds	r7, #56	@ 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop

08001640 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d062      	beq.n	800171e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f7ff fa71 	bl	8000b4a <PCD_GET_EP_DBUF0_CNT>
 8001668:	4603      	mov	r3, r0
 800166a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	8bfb      	ldrh	r3, [r7, #30]
 8001672:	429a      	cmp	r2, r3
 8001674:	d306      	bcc.n	8001684 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	8bfb      	ldrh	r3, [r7, #30]
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	e002      	b.n	800168a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11b      	bne.n	80016ca <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b52      	ldr	r3, [pc, #328]	@ (80017ec <HAL_PCD_EP_DB_Receive+0x1ac>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c8:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d017      	beq.n	8001704 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	441a      	add	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001702:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8001704:	8bfb      	ldrh	r3, [r7, #30]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06b      	beq.n	80017e2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	6959      	ldr	r1, [r3, #20]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	891a      	ldrh	r2, [r3, #8]
 8001716:	8bfb      	ldrh	r3, [r7, #30]
 8001718:	f003 fbb8 	bl	8004e8c <USB_ReadPMA>
 800171c:	e061      	b.n	80017e2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f7ff fa2f 	bl	8000b8c <PCD_GET_EP_DBUF1_CNT>
 800172e:	4603      	mov	r3, r0
 8001730:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	8bfb      	ldrh	r3, [r7, #30]
 8001738:	429a      	cmp	r2, r3
 800173a:	d306      	bcc.n	800174a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	8bfb      	ldrh	r3, [r7, #30]
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	e002      	b.n	8001750 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11b      	bne.n	8001790 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_PCD_EP_DB_Receive+0x1ac>)
 800176a:	4013      	ands	r3, r2
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	441a      	add	r2, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d117      	bne.n	80017ca <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	441a      	add	r2, r3
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017c8:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	895a      	ldrh	r2, [r3, #10]
 80017dc:	8bfb      	ldrh	r3, [r7, #30]
 80017de:	f003 fb55 	bl	8004e8c <USB_ReadPMA>
    }
  }

  return count;
 80017e2:	8bfb      	ldrh	r3, [r7, #30]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	07ffbf8f 	.word	0x07ffbf8f
 80017f0:	07ff8f8f 	.word	0x07ff8f8f

080017f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	@ 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	4613      	mov	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 81d5 	beq.w	8001bb8 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f7ff f996 	bl	8000b4a <PCD_GET_EP_DBUF0_CNT>
 800181e:	4603      	mov	r3, r0
 8001820:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	8bfb      	ldrh	r3, [r7, #30]
 8001828:	429a      	cmp	r2, r3
 800182a:	d906      	bls.n	800183a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	619a      	str	r2, [r3, #24]
 8001838:	e002      	b.n	8001840 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 80c1 	bne.w	80019cc <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d124      	bne.n	800189c <HAL_PCD_EP_DB_Transmit+0xa8>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800185c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800186c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001870:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001894:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e024      	b.n	80018e6 <HAL_PCD_EP_DB_Transmit+0xf2>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d120      	bne.n	80018e6 <HAL_PCD_EP_DB_Transmit+0xf2>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80018c2:	b292      	uxth	r2, r2
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80018d0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d124      	bne.n	8001938 <HAL_PCD_EP_DB_Transmit+0x144>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800190c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800191c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800192c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001930:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e024      	b.n	8001982 <HAL_PCD_EP_DB_Transmit+0x18e>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d120      	bne.n	8001982 <HAL_PCD_EP_DB_Transmit+0x18e>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800194a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800195a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800195e:	b292      	uxth	r2, r2
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800196c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800197a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800197e:	6852      	ldr	r2, [r2, #4]
 8001980:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f003 fb0a 	bl	8004fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 82e5 	beq.w	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b8e      	ldr	r3, [pc, #568]	@ (8001be4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	441a      	add	r2, r3
 80019be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e2cb      	b.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d017      	beq.n	8001a06 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b7f      	ldr	r3, [pc, #508]	@ (8001be4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	441a      	add	r2, r3
 80019fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a04:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f040 82a9 	bne.w	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	8bfb      	ldrh	r3, [r7, #30]
 8001a18:	441a      	add	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	8bfb      	ldrh	r3, [r7, #30]
 8001a24:	441a      	add	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d309      	bcc.n	8001a4a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	621a      	str	r2, [r3, #32]
 8001a48:	e014      	b.n	8001a74 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8001a52:	8bfb      	ldrh	r3, [r7, #30]
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001a5e:	e009      	b.n	8001a74 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d16a      	bne.n	8001b52 <HAL_PCD_EP_DB_Transmit+0x35e>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001a9a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d112      	bne.n	8001acc <HAL_PCD_EP_DB_Transmit+0x2d8>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ac4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e06a      	b.n	8001ba2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ad0:	d81e      	bhi.n	8001b10 <HAL_PCD_EP_DB_Transmit+0x31c>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8001ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001af2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afa:	069a      	lsls	r2, r3, #26
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e048      	b.n	8001ba2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <HAL_PCD_EP_DB_Transmit+0x332>
 8001b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b22:	3b01      	subs	r3, #1
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b38:	069b      	lsls	r3, r3, #26
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e027      	b.n	8001ba2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d123      	bne.n	8001ba2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	6959      	ldr	r1, [r3, #20]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	891a      	ldrh	r2, [r3, #8]
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f003 f90a 	bl	8004dca <USB_WritePMA>
 8001bb6:	e1d5      	b.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f7fe ffe2 	bl	8000b8c <PCD_GET_EP_DBUF1_CNT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d308      	bcc.n	8001be8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	8bfb      	ldrh	r3, [r7, #30]
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	e004      	b.n	8001bee <HAL_PCD_EP_DB_Transmit+0x3fa>
 8001be4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80c1 	bne.w	8001d7a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	785b      	ldrb	r3, [r3, #1]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d124      	bne.n	8001c4a <HAL_PCD_EP_DB_Transmit+0x456>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c1e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e024      	b.n	8001c94 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d120      	bne.n	8001c94 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c70:	b292      	uxth	r2, r2
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8001c7e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d124      	bne.n	8001ce6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ca6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001cba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001cde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	e024      	b.n	8001d30 <HAL_PCD_EP_DB_Transmit+0x53c>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	785b      	ldrb	r3, [r3, #1]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d120      	bne.n	8001d30 <HAL_PCD_EP_DB_Transmit+0x53c>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8001d1a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001d2c:	6852      	ldr	r2, [r2, #4]
 8001d2e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f003 f933 	bl	8004fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 810e 	bne.w	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b95      	ldr	r3, [pc, #596]	@ (8001fb0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	441a      	add	r2, r3
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e0f4      	b.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d117      	bne.n	8001db4 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b86      	ldr	r3, [pc, #536]	@ (8001fb0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	441a      	add	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db2:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 80d2 	bne.w	8001f64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	8bfb      	ldrh	r3, [r7, #30]
 8001dc6:	441a      	add	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	8bfb      	ldrh	r3, [r7, #30]
 8001dd2:	441a      	add	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d309      	bcc.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	621a      	str	r2, [r3, #32]
 8001df6:	e014      	b.n	8001e22 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8001e00:	8bfb      	ldrh	r3, [r7, #30]
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001e0c:	e009      	b.n	8001e22 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d16a      	bne.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x70c>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e48:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <HAL_PCD_EP_DB_Transmit+0x686>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	e06a      	b.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e7e:	d81e      	bhi.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x6ca>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ea0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ea4:	6859      	ldr	r1, [r3, #4]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	069a      	lsls	r2, r3, #26
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001eb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	e048      	b.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	069b      	lsls	r3, r3, #26
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ef8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e027      	b.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d123      	bne.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001f26:	b292      	uxth	r2, r2
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6959      	ldr	r1, [r3, #20]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	895a      	ldrh	r2, [r3, #10]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f002 ff33 	bl	8004dca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	f083 0310 	eor.w	r3, r3, #16
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f84:	f083 0320 	eor.w	r3, r3, #32
 8001f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3738      	adds	r7, #56	@ 0x38
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	07ff8f8f 	.word	0x07ff8f8f
 8001fb4:	07ff8fbf 	.word	0x07ff8fbf

08001fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f000 bc28 	b.w	8002878 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4b94      	ldr	r3, [pc, #592]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 0318 	and.w	r3, r3, #24
 8002030:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002032:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x46>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b18      	cmp	r3, #24
 8002052:	d114      	bne.n	800207e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d111      	bne.n	800207e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bc08 	b.w	8002878 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002068:	4b84      	ldr	r3, [pc, #528]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	4981      	ldr	r1, [pc, #516]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002078:	4313      	orrs	r3, r2
 800207a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800207c:	e040      	b.n	8002100 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe fb9d 	bl	80007d0 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800209a:	f7fe fb99 	bl	80007d0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e3e5      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020ac:	4b73      	ldr	r3, [pc, #460]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020b8:	4b70      	ldr	r3, [pc, #448]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	496d      	ldr	r1, [pc, #436]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	618b      	str	r3, [r1, #24]
 80020cc:	e018      	b.n	8002100 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020ce:	4b6b      	ldr	r3, [pc, #428]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6a      	ldr	r2, [pc, #424]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fb79 	bl	80007d0 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020e2:	f7fe fb75 	bl	80007d0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e3c1      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b10      	cmp	r3, #16
 8002112:	d005      	beq.n	8002120 <HAL_RCC_OscConfig+0x10c>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b18      	cmp	r3, #24
 8002118:	d109      	bne.n	800212e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 8092 	bne.w	800224e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e3a4      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x132>
 8002138:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4f      	ldr	r2, [pc, #316]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e058      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <HAL_RCC_OscConfig+0x160>
 800214e:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4a      	ldr	r2, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b48      	ldr	r3, [pc, #288]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a47      	ldr	r2, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002160:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b45      	ldr	r3, [pc, #276]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a44      	ldr	r2, [pc, #272]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e041      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_OscConfig+0x190>
 800217e:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a3e      	ldr	r2, [pc, #248]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b3c      	ldr	r3, [pc, #240]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002190:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1c0>
 80021ae:	4b33      	ldr	r3, [pc, #204]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a32      	ldr	r2, [pc, #200]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b30      	ldr	r3, [pc, #192]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2f      	ldr	r2, [pc, #188]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e011      	b.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a25      	ldr	r2, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a22      	ldr	r2, [pc, #136]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 80021f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fae6 	bl	80007d0 <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002208:	f7fe fae2 	bl	80007d0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	@ 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e32e      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x1f4>
 8002226:	e012      	b.n	800224e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fad2 	bl	80007d0 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002230:	f7fe face 	bl	80007d0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e31a      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCC_OscConfig+0x268>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 809a 	beq.w	8002390 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x25a>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b18      	cmp	r3, #24
 8002266:	d149      	bne.n	80022fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d146      	bne.n	80022fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e2fe      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
 800227a:	bf00      	nop
 800227c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002286:	4b9a      	ldr	r3, [pc, #616]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0218 	and.w	r2, r3, #24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	429a      	cmp	r2, r3
 8002294:	d014      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002296:	4b96      	ldr	r3, [pc, #600]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0218 	bic.w	r2, r3, #24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4993      	ldr	r1, [pc, #588]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80022a8:	f000 fdd0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022ac:	4b91      	ldr	r3, [pc, #580]	@ (80024f4 <HAL_RCC_OscConfig+0x4e0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fa03 	bl	80006bc <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e2db      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fa86 	bl	80007d0 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022c8:	f7fe fa82 	bl	80007d0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e2ce      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022da:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80022e6:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	497e      	ldr	r1, [pc, #504]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022fa:	e049      	b.n	8002390 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02c      	beq.n	800235e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002304:	4b7a      	ldr	r3, [pc, #488]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0218 	bic.w	r2, r3, #24
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4977      	ldr	r1, [pc, #476]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fa55 	bl	80007d0 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800232a:	f7fe fa51 	bl	80007d0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e29d      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002348:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	4966      	ldr	r1, [pc, #408]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	610b      	str	r3, [r1, #16]
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b64      	ldr	r3, [pc, #400]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a63      	ldr	r2, [pc, #396]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fa31 	bl	80007d0 <HAL_GetTick>
 800236e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002372:	f7fe fa2d 	bl	80007d0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e279      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002384:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a4:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023aa:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fa0c 	bl	80007d0 <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023bc:	f7fe fa08 	bl	80007d0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e254      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80023ce:	4b48      	ldr	r3, [pc, #288]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x3a8>
 80023dc:	e01b      	b.n	8002416 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e4:	4a42      	ldr	r2, [pc, #264]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe f9ef 	bl	80007d0 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80023f6:	f7fe f9eb 	bl	80007d0 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e237      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002408:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800240a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800240e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d2 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d118      	bne.n	8002462 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002430:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243c:	f7fe f9c8 	bl	80007d0 <HAL_GetTick>
 8002440:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe f9c4 	bl	80007d0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e210      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x4e4>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_RCC_OscConfig+0x468>
 800246a:	4b21      	ldr	r3, [pc, #132]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800246c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002470:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800247a:	e074      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d118      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4a2>
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800249a:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 800249c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024a4:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024aa:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024b4:	e057      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d11e      	bne.n	80024fc <HAL_RCC_OscConfig+0x4e8>
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c4:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <HAL_RCC_OscConfig+0x4dc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 80024f0:	44020c00 	.word	0x44020c00
 80024f4:	20000004 	.word	0x20000004
 80024f8:	44020800 	.word	0x44020800
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b85      	cmp	r3, #133	@ 0x85
 8002502:	d118      	bne.n	8002536 <HAL_RCC_OscConfig+0x522>
 8002504:	4ba2      	ldr	r3, [pc, #648]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800250a:	4aa1      	ldr	r2, [pc, #644]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002514:	4b9e      	ldr	r3, [pc, #632]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800251a:	4a9d      	ldr	r2, [pc, #628]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800251c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002524:	4b9a      	ldr	r3, [pc, #616]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800252a:	4a99      	ldr	r2, [pc, #612]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002534:	e017      	b.n	8002566 <HAL_RCC_OscConfig+0x552>
 8002536:	4b96      	ldr	r3, [pc, #600]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800253c:	4a94      	ldr	r2, [pc, #592]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254c:	4a90      	ldr	r2, [pc, #576]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002556:	4b8e      	ldr	r3, [pc, #568]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800255c:	4a8c      	ldr	r2, [pc, #560]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800255e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe f92f 	bl	80007d0 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe f92b 	bl	80007d0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e175      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	4b80      	ldr	r3, [pc, #512]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800258e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ed      	beq.n	8002576 <HAL_RCC_OscConfig+0x562>
 800259a:	e015      	b.n	80025c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe f918 	bl	80007d0 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7fe f914 	bl	80007d0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e15e      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ba:	4b75      	ldr	r3, [pc, #468]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ed      	bne.n	80025a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d036      	beq.n	8002642 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d019      	beq.n	8002610 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe f8f2 	bl	80007d0 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80025f0:	f7fe f8ee 	bl	80007d0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e13a      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002602:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x5dc>
 800260e:	e018      	b.n	8002642 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002610:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800261a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe f8d8 	bl	80007d0 <HAL_GetTick>
 8002620:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002624:	f7fe f8d4 	bl	80007d0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e120      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002636:	4b56      	ldr	r3, [pc, #344]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8115 	beq.w	8002876 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b18      	cmp	r3, #24
 8002650:	f000 80af 	beq.w	80027b2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 8086 	bne.w	800276a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4b      	ldr	r2, [pc, #300]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe f8b1 	bl	80007d0 <HAL_GetTick>
 800266e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002672:	f7fe f8ad 	bl	80007d0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0f9      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026a4:	0212      	lsls	r2, r2, #8
 80026a6:	430a      	orrs	r2, r1
 80026a8:	4939      	ldr	r1, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	3b01      	subs	r3, #1
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	3b01      	subs	r3, #1
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	3b01      	subs	r3, #1
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80026de:	492c      	ldr	r1, [pc, #176]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80026e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026ea:	f023 0310 	bic.w	r3, r3, #16
 80026ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f4:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80026fa:	4b25      	ldr	r3, [pc, #148]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	491f      	ldr	r1, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f023 0220 	bic.w	r2, r3, #32
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002724:	491a      	ldr	r1, [pc, #104]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800273c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe f845 	bl	80007d0 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800274a:	f7fe f841 	bl	80007d0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e08d      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x736>
 8002768:	e085      	b.n	8002876 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a08      	ldr	r2, [pc, #32]	@ (8002790 <HAL_RCC_OscConfig+0x77c>)
 8002770:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe f82b 	bl	80007d0 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800277e:	f7fe f827 	bl	80007d0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d903      	bls.n	8002794 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e073      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
 8002790:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	4a36      	ldr	r2, [pc, #216]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027a6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	6293      	str	r3, [r2, #40]	@ 0x28
 80027b0:	e061      	b.n	8002876 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027b8:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d031      	beq.n	800282a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d12a      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d122      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d11a      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0a5b      	lsrs	r3, r3, #9
 80027f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d111      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002812:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d108      	bne.n	800282a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0e1b      	lsrs	r3, r3, #24
 800281c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e024      	b.n	8002878 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800282e:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800283c:	429a      	cmp	r2, r3
 800283e:	d01a      	beq.n	8002876 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	4a0e      	ldr	r2, [pc, #56]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fd ffc0 	bl	80007d0 <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002852:	bf00      	nop
 8002854:	f7fd ffbc 	bl	80007d0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4293      	cmp	r3, r2
 800285e:	d0f9      	beq.n	8002854 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_RCC_OscConfig+0x86c>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	44020c00 	.word	0x44020c00

08002884 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e19e      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b83      	ldr	r3, [pc, #524]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b80      	ldr	r3, [pc, #512]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	497e      	ldr	r1, [pc, #504]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_RCC_ClockConfig+0x224>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e186      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	4b74      	ldr	r3, [pc, #464]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d909      	bls.n	80028fa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80028e6:	4b71      	ldr	r3, [pc, #452]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	496d      	ldr	r1, [pc, #436]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	4b68      	ldr	r3, [pc, #416]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002914:	429a      	cmp	r2, r3
 8002916:	d909      	bls.n	800292c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002918:	4b64      	ldr	r3, [pc, #400]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4961      	ldr	r1, [pc, #388]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002928:	4313      	orrs	r3, r2
 800292a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b5b      	ldr	r3, [pc, #364]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002948:	4b58      	ldr	r3, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4955      	ldr	r1, [pc, #340]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002956:	4313      	orrs	r3, r2
 8002958:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	429a      	cmp	r2, r3
 8002974:	d908      	bls.n	8002988 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002976:	4b4d      	ldr	r3, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 020f 	bic.w	r2, r3, #15
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	494a      	ldr	r1, [pc, #296]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002984:	4313      	orrs	r3, r2
 8002986:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8093 	beq.w	8002abc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800299e:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d121      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e113      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e107      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80029ce:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0fb      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0f3      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	492c      	ldr	r1, [pc, #176]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fd fee6 	bl	80007d0 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d112      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7fd fede 	bl	80007d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0d7      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0318 	and.w	r3, r3, #24
 8002a2e:	2b18      	cmp	r3, #24
 8002a30:	d1ee      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x18c>
 8002a32:	e043      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3e:	f7fd fec7 	bl	80007d0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0c0      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a54:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f003 0318 	and.w	r3, r3, #24
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d1ee      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1ba>
 8002a60:	e02c      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d122      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fd feb0 	bl	80007d0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0a9      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_RCC_ClockConfig+0x228>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0318 	and.w	r3, r3, #24
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1e8>
 8002a8e:	e015      	b.n	8002abc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd fe9e 	bl	80007d0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d906      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e097      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 0318 	and.w	r3, r3, #24
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4b44      	ldr	r3, [pc, #272]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d208      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ad8:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 020f 	bic.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	493e      	ldr	r1, [pc, #248]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aea:	4b3e      	ldr	r3, [pc, #248]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d210      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 020f 	bic.w	r2, r3, #15
 8002b00:	4938      	ldr	r1, [pc, #224]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b08:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_RCC_ClockConfig+0x360>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e05d      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4927      	ldr	r1, [pc, #156]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d209      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b66:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d209      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bac:	f000 f822 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x35c>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490b      	ldr	r1, [pc, #44]	@ (8002be8 <HAL_RCC_ClockConfig+0x364>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <HAL_RCC_ClockConfig+0x368>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_RCC_ClockConfig+0x36c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fd76 	bl	80006bc <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	44020c00 	.word	0x44020c00
 8002be4:	40022000 	.word	0x40022000
 8002be8:	0800641c 	.word	0x0800641c
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0318 	and.w	r3, r3, #24
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d102      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c06:	4b8a      	ldr	r3, [pc, #552]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e107      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0c:	4b87      	ldr	r3, [pc, #540]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f003 0318 	and.w	r3, r3, #24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c18:	4b84      	ldr	r3, [pc, #528]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c24:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	4a81      	ldr	r2, [pc, #516]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e0f1      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c38:	4b7e      	ldr	r3, [pc, #504]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e0ee      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0318 	and.w	r3, r3, #24
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d102      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x244>)
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e0e5      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	4b76      	ldr	r3, [pc, #472]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0318 	and.w	r3, r3, #24
 8002c58:	2b18      	cmp	r3, #24
 8002c5a:	f040 80dd 	bne.w	8002e18 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002c68:	4b70      	ldr	r3, [pc, #448]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002c74:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c80:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80b7 	beq.w	8002e12 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d056      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x16a>
 8002cb0:	e077      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02d      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	08db      	lsrs	r3, r3, #3
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce8:	4b50      	ldr	r3, [pc, #320]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cfc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d18:	e065      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d24:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e40 <HAL_RCC_GetSysClockFreq+0x24c>
 8002d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d40:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d5c:	e043      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d68:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x250>
 8002d6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d70:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d80:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d84:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002da0:	e021      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e48 <HAL_RCC_GetSysClockFreq+0x254>
 8002db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002e3c <HAL_RCC_GetSysClockFreq+0x248>
 8002dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002de4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x238>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dea:	0a5b      	lsrs	r3, r3, #9
 8002dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df0:	3301      	adds	r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dfe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0a:	ee17 3a90 	vmov	r3, s15
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e004      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e001      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e1a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	44020c00 	.word	0x44020c00
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	03d09000 	.word	0x03d09000
 8002e38:	017d7840 	.word	0x017d7840
 8002e3c:	46000000 	.word	0x46000000
 8002e40:	4c742400 	.word	0x4c742400
 8002e44:	4bbebc20 	.word	0x4bbebc20
 8002e48:	4a742400 	.word	0x4a742400

08002e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e50:	f7ff fed0 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e5a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e5e:	4907      	ldr	r1, [pc, #28]	@ (8002e7c <HAL_RCC_GetHCLKFreq+0x30>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002e62:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e70:	681b      	ldr	r3, [r3, #0]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	44020c00 	.word	0x44020c00
 8002e7c:	0800641c 	.word	0x0800641c
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b0aa      	sub	sp, #168	@ 0xa8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	ea54 0305 	orrs.w	r3, r4, r5
 8002eae:	d00b      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002eb0:	4bb8      	ldr	r3, [pc, #736]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002eb6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4ab4      	ldr	r2, [pc, #720]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 0801 	and.w	r8, r2, #1
 8002ed4:	f04f 0900 	mov.w	r9, #0
 8002ed8:	ea58 0309 	orrs.w	r3, r8, r9
 8002edc:	d038      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d819      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f25 	.word	0x08002f25
 8002ef4:	08002f09 	.word	0x08002f09
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f25 	.word	0x08002f25
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fddc 	bl	8003acc <RCCEx_PLL2_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8002f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f26:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002f2e:	4b99      	ldr	r3, [pc, #612]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f34:	f023 0107 	bic.w	r1, r3, #7
 8002f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3e:	4a95      	ldr	r2, [pc, #596]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f40:	430b      	orrs	r3, r1
 8002f42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002f4c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f002 0a02 	and.w	sl, r2, #2
 8002f5c:	f04f 0b00 	mov.w	fp, #0
 8002f60:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f64:	d03c      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	2b28      	cmp	r3, #40	@ 0x28
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8002f70:	2b28      	cmp	r3, #40	@ 0x28
 8002f72:	d815      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d019      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d811      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002f7c:	2b18      	cmp	r3, #24
 8002f7e:	d017      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002f80:	2b18      	cmp	r3, #24
 8002f82:	d80d      	bhi.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f90:	3308      	adds	r3, #8
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fd9a 	bl	8003acc <RCCEx_PLL2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8002fa6:	e006      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002fa8:	bf00      	nop
 8002faa:	e004      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002fac:	bf00      	nop
 8002fae:	e002      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8002fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002fbe:	4b75      	ldr	r3, [pc, #468]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fc4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	4a71      	ldr	r2, [pc, #452]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fd6:	e003      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002fdc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f002 0304 	and.w	r3, r2, #4
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ff6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	d040      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003000:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800300a:	d01e      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800300c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003010:	d817      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003016:	d01a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301c:	d811      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800301e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003020:	d017      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003022:	2bc0      	cmp	r3, #192	@ 0xc0
 8003024:	d80d      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d015      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d109      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800302e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003032:	3308      	adds	r3, #8
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd49 	bl	8003acc <RCCEx_PLL2_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003040:	e00a      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800304a:	bf00      	nop
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800304e:	bf00      	nop
 8003050:	e002      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10c      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003060:	4b4c      	ldr	r3, [pc, #304]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003066:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800306a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	4a48      	ldr	r2, [pc, #288]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003072:	430b      	orrs	r3, r1
 8003074:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800307e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800308e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003098:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800309c:	460b      	mov	r3, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	d043      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80030a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80030ac:	d021      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80030ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80030b2:	d81a      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x266>
 80030b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b8:	d01d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80030ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030be:	d814      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x266>
 80030c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030c4:	d019      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x276>
 80030c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ca:	d80e      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x266>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80030d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d4:	d109      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030da:	3308      	adds	r3, #8
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fcf5 	bl	8003acc <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80030e8:	e00a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80030fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003100:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10c      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800310e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003112:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800311a:	430b      	orrs	r3, r1
 800311c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003120:	e003      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003122:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003126:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800312a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003136:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003138:	2300      	movs	r3, #0
 800313a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800313c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003140:	460b      	mov	r3, r1
 8003142:	4313      	orrs	r3, r2
 8003144:	d03e      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003146:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800314a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003150:	d01b      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003152:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003156:	d814      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800315c:	d017      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800315e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003162:	d80e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d109      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800316e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003172:	3308      	adds	r3, #8
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fca9 	bl	8003acc <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003180:	e00b      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003188:	e007      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800318a:	bf00      	nop
 800318c:	e005      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800318e:	bf00      	nop
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003192:	bf00      	nop
 8003194:	44020c00 	.word	0x44020c00
        break;
 8003198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80031a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80031ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4aa1      	ldr	r2, [pc, #644]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80031b4:	430b      	orrs	r3, r1
 80031b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80031c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80031d2:	2300      	movs	r3, #0
 80031d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80031d6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80031da:	460b      	mov	r3, r1
 80031dc:	4313      	orrs	r3, r2
 80031de:	d03b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80031e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80031e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031ea:	d01b      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80031ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031f0:	d814      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x398>
 80031f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031f6:	d017      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80031f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031fc:	d80e      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x398>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d014      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003206:	d109      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800320c:	3308      	adds	r3, #8
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc5c 	bl	8003acc <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800321a:	e008      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003222:	e004      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003224:	bf00      	nop
 8003226:	e002      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800322c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003236:	4b80      	ldr	r3, [pc, #512]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003238:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800323c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003240:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	4a7c      	ldr	r2, [pc, #496]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003248:	430b      	orrs	r3, r1
 800324a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800324e:	e003      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003254:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003258:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003266:	2300      	movs	r3, #0
 8003268:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800326a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800326e:	460b      	mov	r3, r1
 8003270:	4313      	orrs	r3, r2
 8003272:	d033      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003274:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800327e:	d015      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003284:	d80e      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800328a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800328e:	d109      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003290:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003294:	3308      	adds	r3, #8
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fc18 	bl	8003acc <RCCEx_PLL2_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80032a2:	e006      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80032b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80032ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032c0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80032c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80032d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80032dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	2100      	movs	r1, #0
 80032e6:	6639      	str	r1, [r7, #96]	@ 0x60
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80032ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80032f2:	460b      	mov	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	d033      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80032f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003302:	d015      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003308:	d80e      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800330e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003312:	d109      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003318:	3308      	adds	r3, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fbd6 	bl	8003acc <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003326:	e006      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800332e:	e002      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003336:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800333e:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003344:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	4a3a      	ldr	r2, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003350:	430b      	orrs	r3, r1
 8003352:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800335c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	2100      	movs	r1, #0
 800336a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800336c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003372:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003376:	460b      	mov	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800337c:	4b2e      	ldr	r3, [pc, #184]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003386:	61d3      	str	r3, [r2, #28]
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003394:	4a28      	ldr	r2, [pc, #160]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003396:	430b      	orrs	r3, r1
 8003398:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800339a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80033a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a8:	2300      	movs	r3, #0
 80033aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d046      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80033b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80033c0:	d021      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80033c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80033c6:	d81a      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d01d      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d2:	d814      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80033d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033d8:	d019      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80033da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033de:	d80e      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e8:	d109      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033ee:	3308      	adds	r3, #8
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb6b 	bl	8003acc <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80033fc:	e00a      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003406:	bf00      	nop
 8003408:	e004      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003414:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10f      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800341c:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800341e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003422:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003426:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800342e:	430b      	orrs	r3, r1
 8003430:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003436:	bf00      	nop
 8003438:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003440:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003452:	2300      	movs	r3, #0
 8003454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003456:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d043      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003460:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800346a:	d021      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800346c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003470:	d81a      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003476:	d01d      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347c:	d814      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800347e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003482:	d019      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003488:	d80e      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x638>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003492:	d109      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003498:	3308      	adds	r3, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fb16 	bl	8003acc <RCCEx_PLL2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80034a6:	e00a      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80034ae:	e006      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80034b0:	bf00      	nop
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80034b4:	bf00      	nop
 80034b6:	e002      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80034b8:	bf00      	nop
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80034c6:	4bb6      	ldr	r3, [pc, #728]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80034cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	4ab2      	ldr	r2, [pc, #712]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80034f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034f6:	2300      	movs	r3, #0
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80034fe:	460b      	mov	r3, r1
 8003500:	4313      	orrs	r3, r2
 8003502:	d030      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003504:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800350a:	2b05      	cmp	r3, #5
 800350c:	d80f      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800350e:	2b03      	cmp	r3, #3
 8003510:	d211      	bcs.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003512:	2b01      	cmp	r3, #1
 8003514:	d911      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003516:	2b02      	cmp	r3, #2
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800351a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800351e:	3308      	adds	r3, #8
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fad3 	bl	8003acc <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10c      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003544:	4b96      	ldr	r3, [pc, #600]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800354a:	f023 0107 	bic.w	r1, r3, #7
 800354e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003554:	4a92      	ldr	r2, [pc, #584]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003556:	430b      	orrs	r3, r1
 8003558:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003562:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003566:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	2100      	movs	r1, #0
 8003570:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003578:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003582:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800358c:	2b08      	cmp	r3, #8
 800358e:	d005      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003596:	e002      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003598:	bf00      	nop
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800359c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80035a6:	4b7e      	ldr	r3, [pc, #504]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ac:	f023 0108 	bic.w	r1, r3, #8
 80035b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b6:	4a7a      	ldr	r2, [pc, #488]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80035c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f000 80b0 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80035e6:	4b6f      	ldr	r3, [pc, #444]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	4a6e      	ldr	r2, [pc, #440]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f2:	f7fd f8ed 	bl	80007d0 <HAL_GetTick>
 80035f6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80035fa:	e00b      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fd f8e8 	bl	80007d0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d903      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003612:	e005      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003614:	4b63      	ldr	r3, [pc, #396]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ed      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003620:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 808a 	bne.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800362a:	4b5d      	ldr	r3, [pc, #372]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800362c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8003640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003646:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800364a:	429a      	cmp	r2, r3
 800364c:	d01b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800364e:	4b54      	ldr	r3, [pc, #336]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003658:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365c:	4b50      	ldr	r3, [pc, #320]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800365e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003662:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003668:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800366c:	4b4c      	ldr	r3, [pc, #304]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800366e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003672:	4a4b      	ldr	r2, [pc, #300]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003678:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800367c:	4a48      	ldr	r2, [pc, #288]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800367e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd f89d 	bl	80007d0 <HAL_GetTick>
 8003696:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	e00d      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fd f898 	bl	80007d0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d903      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80036b6:	e006      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b8:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ea      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80036c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d132      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80036ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036dc:	d10f      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80036de:	4b30      	ldr	r3, [pc, #192]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80036f6:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	61d3      	str	r3, [r2, #28]
 80036fc:	e005      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x886>
 80036fe:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003704:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800370c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003716:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800371a:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800371c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8003720:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372a:	4a1d      	ldr	r2, [pc, #116]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800372c:	430b      	orrs	r3, r1
 800372e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003732:	e008      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003734:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003738:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003742:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003746:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003758:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d038      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003762:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	2b30      	cmp	r3, #48	@ 0x30
 800376a:	d014      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800376c:	2b30      	cmp	r3, #48	@ 0x30
 800376e:	d80e      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d012      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d80a      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800377c:	2b10      	cmp	r3, #16
 800377e:	d106      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003780:	4b07      	ldr	r3, [pc, #28]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	4a06      	ldr	r2, [pc, #24]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800378c:	e00d      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003794:	e009      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8003796:	bf00      	nop
 8003798:	e007      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800379a:	bf00      	nop
 800379c:	e005      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x926>
 800379e:	bf00      	nop
 80037a0:	44020c00 	.word	0x44020c00
 80037a4:	44020800 	.word	0x44020800
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80037b2:	4bb5      	ldr	r3, [pc, #724]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	49b1      	ldr	r1, [pc, #708]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80037d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80037d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	d03c      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80037f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80037f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d81d      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80037fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003815 	.word	0x08003815
 8003804:	08003823 	.word	0x08003823
 8003808:	08003837 	.word	0x08003837
 800380c:	0800383f 	.word	0x0800383f
 8003810:	0800383f 	.word	0x0800383f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b9c      	ldr	r3, [pc, #624]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	4a9b      	ldr	r2, [pc, #620]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003820:	e00e      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003826:	3308      	adds	r3, #8
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f94f 	bl	8003acc <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003834:	e004      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800383c:	e000      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800383e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003840:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10c      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003848:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800384a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003858:	498b      	ldr	r1, [pc, #556]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003860:	e003      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003866:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800386a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003880:	460b      	mov	r3, r1
 8003882:	4313      	orrs	r3, r2
 8003884:	d03c      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	2b20      	cmp	r3, #32
 800388e:	d01f      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d819      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8003894:	2b18      	cmp	r3, #24
 8003896:	d01d      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003898:	2b18      	cmp	r3, #24
 800389a:	d815      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d007      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80038a4:	e010      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a6:	4b78      	ldr	r3, [pc, #480]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038aa:	4a77      	ldr	r2, [pc, #476]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80038b2:	e010      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038b8:	3308      	adds	r3, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f906 	bl	8003acc <RCCEx_PLL2_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80038c6:	e006      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80038d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80038de:	4b6a      	ldr	r3, [pc, #424]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80038e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	4966      	ldr	r1, [pc, #408]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003900:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d03e      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800391c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003926:	d020      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d819      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800392e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003930:	d01d      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003932:	2bc0      	cmp	r3, #192	@ 0xc0
 8003934:	d815      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d007      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800393e:	e010      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b51      	ldr	r3, [pc, #324]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	4a50      	ldr	r2, [pc, #320]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800394c:	e010      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800394e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003952:	3308      	adds	r3, #8
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f8b9 	bl	8003acc <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800396e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003970:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10c      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003978:	4b43      	ldr	r3, [pc, #268]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800397a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800397e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003982:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003988:	493f      	ldr	r1, [pc, #252]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003996:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800399a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	2100      	movs	r1, #0
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d038      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80039b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c0:	d00e      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c6:	d815      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d017      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d0:	d110      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80039de:	e00e      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e4:	3308      	adds	r3, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f870 	bl	8003acc <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003a06:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	491c      	ldr	r1, [pc, #112]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	2100      	movs	r1, #0
 8003a32:	6039      	str	r1, [r7, #0]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d039      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a4a:	2b30      	cmp	r3, #48	@ 0x30
 8003a4c:	d01e      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003a4e:	2b30      	cmp	r3, #48	@ 0x30
 8003a50:	d815      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d002      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d007      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003a5a:	e010      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a66:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a68:	e011      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6e:	3308      	adds	r3, #8
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f82b 	bl	8003acc <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003a7c:	e007      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a84:	e003      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003a86:	bf00      	nop
 8003a88:	44020c00 	.word	0x44020c00
        break;
 8003a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003a96:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa6:	4908      	ldr	r1, [pc, #32]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003aae:	e003      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ab4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8003ab8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	37a8      	adds	r7, #168	@ 0xa8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	44020c00 	.word	0x44020c00

08003acc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8003ad4:	4b48      	ldr	r3, [pc, #288]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a47      	ldr	r2, [pc, #284]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003ada:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ade:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ae0:	f7fc fe76 	bl	80007d0 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ae8:	f7fc fe72 	bl	80007d0 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e07a      	b.n	8003bf0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003b06:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6811      	ldr	r1, [r2, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6852      	ldr	r2, [r2, #4]
 8003b1a:	0212      	lsls	r2, r2, #8
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	4936      	ldr	r1, [pc, #216]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	025b      	lsls	r3, r3, #9
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b54:	4928      	ldr	r1, [pc, #160]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003b5a:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	f023 020c 	bic.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	4924      	ldr	r1, [pc, #144]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8003b6c:	4b22      	ldr	r3, [pc, #136]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	f023 0220 	bic.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	491f      	ldr	r1, [pc, #124]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	491c      	ldr	r1, [pc, #112]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8003b98:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ba0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a12      	ldr	r2, [r2, #32]
 8003ba8:	00d2      	lsls	r2, r2, #3
 8003baa:	4913      	ldr	r1, [pc, #76]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003bb6:	f043 0310 	orr.w	r3, r3, #16
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bc6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bc8:	f7fc fe02 	bl	80007d0 <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bd0:	f7fc fdfe 	bl	80007d0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <RCCEx_PLL2_Config+0x12c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0

}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	44020c00 	.word	0x44020c00

08003bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c04:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8003c08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c44:	e00b      	b.n	8003c5e <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c58:	e001      	b.n	8003c5e <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	f107 001c 	add.w	r0, r7, #28
 8003c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f023 0201 	bic.w	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8003c90:	2100      	movs	r1, #0
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ffc7 	bl	8003c26 <USB_SetCurrentMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cae:	b004      	add	sp, #16
 8003cb0:	4770      	bx	lr
	...

08003cb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b096      	sub	sp, #88	@ 0x58
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 84ed 	bne.w	80046a2 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d903      	bls.n	8003cdc <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cda:	e002      	b.n	8003ce2 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	7b1b      	ldrb	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d12e      	bne.n	8003d48 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6959      	ldr	r1, [r3, #20]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	88da      	ldrh	r2, [r3, #6]
 8003cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 f867 	bl	8004dca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	041a      	lsls	r2, r3, #16
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f000 bc90 	b.w	8004668 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	78db      	ldrb	r3, [r3, #3]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	f040 8332 	bne.w	80043b6 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	f240 82e4 	bls.w	8004328 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4ba4      	ldr	r3, [pc, #656]	@ (8004000 <USB_EPStartXfer+0x34c>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d86:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8e:	1ad2      	subs	r2, r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8161 	beq.w	800406c <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d16a      	bne.n	8003e88 <USB_EPStartXfer+0x1d4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dd0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d112      	bne.n	8003e02 <USB_EPStartXfer+0x14e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dfa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e06a      	b.n	8003ed8 <USB_EPStartXfer+0x224>
 8003e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e04:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e06:	d81e      	bhi.n	8003e46 <USB_EPStartXfer+0x192>
 8003e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <USB_EPStartXfer+0x16a>
 8003e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e30:	069a      	lsls	r2, r3, #26
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	e048      	b.n	8003ed8 <USB_EPStartXfer+0x224>
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <USB_EPStartXfer+0x1a8>
 8003e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e6e:	069b      	lsls	r3, r3, #26
 8003e70:	431a      	orrs	r2, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e027      	b.n	8003ed8 <USB_EPStartXfer+0x224>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d123      	bne.n	8003ed8 <USB_EPStartXfer+0x224>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ebc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ec0:	6859      	ldr	r1, [r3, #4]
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	895b      	ldrh	r3, [r3, #10]
 8003edc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6959      	ldr	r1, [r3, #20]
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8b7a      	ldrh	r2, [r7, #26]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 ff6e 	bl	8004dca <USB_WritePMA>
            ep->xfer_buff += len;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef4:	441a      	add	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6a1a      	ldr	r2, [r3, #32]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d906      	bls.n	8003f14 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	1ad2      	subs	r2, r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	621a      	str	r2, [r3, #32]
 8003f12:	e005      	b.n	8003f20 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d16d      	bne.n	8004004 <USB_EPStartXfer+0x350>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f46:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d112      	bne.n	8003f78 <USB_EPStartXfer+0x2c4>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e06d      	b.n	8004054 <USB_EPStartXfer+0x3a0>
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f7c:	d81e      	bhi.n	8003fbc <USB_EPStartXfer+0x308>
 8003f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <USB_EPStartXfer+0x2e0>
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f90:	3301      	adds	r3, #1
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa6:	069a      	lsls	r2, r3, #26
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e04b      	b.n	8004054 <USB_EPStartXfer+0x3a0>
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <USB_EPStartXfer+0x31e>
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe4:	069b      	lsls	r3, r3, #26
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ff6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e02a      	b.n	8004054 <USB_EPStartXfer+0x3a0>
 8003ffe:	bf00      	nop
 8004000:	07ff8f8f 	.word	0x07ff8f8f
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d123      	bne.n	8004054 <USB_EPStartXfer+0x3a0>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004016:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800402a:	b292      	uxth	r2, r2
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004038:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	041a      	lsls	r2, r3, #16
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800404c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	891b      	ldrh	r3, [r3, #8]
 8004058:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6959      	ldr	r1, [r3, #20]
 800405e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004060:	b29b      	uxth	r3, r3
 8004062:	8b7a      	ldrh	r2, [r7, #26]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 feb0 	bl	8004dca <USB_WritePMA>
 800406a:	e2fd      	b.n	8004668 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d16a      	bne.n	800414a <USB_EPStartXfer+0x496>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800407e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800408e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004092:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409a:	2b00      	cmp	r3, #0
 800409c:	d112      	bne.n	80040c4 <USB_EPStartXfer+0x410>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e06a      	b.n	800419a <USB_EPStartXfer+0x4e6>
 80040c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c8:	d81e      	bhi.n	8004108 <USB_EPStartXfer+0x454>
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <USB_EPStartXfer+0x42c>
 80040da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040dc:	3301      	adds	r3, #1
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f2:	069a      	lsls	r2, r3, #26
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e048      	b.n	800419a <USB_EPStartXfer+0x4e6>
 8004108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800410e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <USB_EPStartXfer+0x46a>
 8004118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411a:	3b01      	subs	r3, #1
 800411c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004128:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004130:	069b      	lsls	r3, r3, #26
 8004132:	431a      	orrs	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004142:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e027      	b.n	800419a <USB_EPStartXfer+0x4e6>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d123      	bne.n	800419a <USB_EPStartXfer+0x4e6>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800415c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800416c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004170:	b292      	uxth	r2, r2
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800417e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004186:	041a      	lsls	r2, r3, #16
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	891b      	ldrh	r3, [r3, #8]
 800419e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6959      	ldr	r1, [r3, #20]
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8b7a      	ldrh	r2, [r7, #26]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fe0d 	bl	8004dca <USB_WritePMA>
            ep->xfer_buff += len;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695a      	ldr	r2, [r3, #20]
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	441a      	add	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d906      	bls.n	80041d6 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	621a      	str	r2, [r3, #32]
 80041d4:	e005      	b.n	80041e2 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d16a      	bne.n	80042c0 <USB_EPStartXfer+0x60c>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004208:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	2b00      	cmp	r3, #0
 8004212:	d112      	bne.n	800423a <USB_EPStartXfer+0x586>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800421e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800422e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004232:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	e06a      	b.n	8004310 <USB_EPStartXfer+0x65c>
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	2b3e      	cmp	r3, #62	@ 0x3e
 800423e:	d81e      	bhi.n	800427e <USB_EPStartXfer+0x5ca>
 8004240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <USB_EPStartXfer+0x5a2>
 8004250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004252:	3301      	adds	r3, #1
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004268:	069a      	lsls	r2, r3, #26
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004274:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	e048      	b.n	8004310 <USB_EPStartXfer+0x65c>
 800427e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	647b      	str	r3, [r7, #68]	@ 0x44
 8004284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <USB_EPStartXfer+0x5e0>
 800428e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004290:	3b01      	subs	r3, #1
 8004292:	647b      	str	r3, [r7, #68]	@ 0x44
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800429e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a6:	069b      	lsls	r3, r3, #26
 80042a8:	431a      	orrs	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	e027      	b.n	8004310 <USB_EPStartXfer+0x65c>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d123      	bne.n	8004310 <USB_EPStartXfer+0x65c>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042e6:	b292      	uxth	r2, r2
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80042f8:	6859      	ldr	r1, [r3, #4]
 80042fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fc:	041a      	lsls	r2, r3, #16
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004308:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	895b      	ldrh	r3, [r3, #10]
 8004314:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6959      	ldr	r1, [r3, #20]
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	b29b      	uxth	r3, r3
 800431e:	8b7a      	ldrh	r2, [r7, #26]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fd52 	bl	8004dca <USB_WritePMA>
 8004326:	e19f      	b.n	8004668 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4ba0      	ldr	r3, [pc, #640]	@ (80045bc <USB_EPStartXfer+0x908>)
 800433c:	4013      	ands	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004354:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004370:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004374:	b292      	uxth	r2, r2
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004382:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438a:	041a      	lsls	r2, r3, #16
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004396:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	891b      	ldrh	r3, [r3, #8]
 80043a2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6959      	ldr	r1, [r3, #20]
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8b7a      	ldrh	r2, [r7, #26]
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fd0b 	bl	8004dca <USB_WritePMA>
 80043b4:	e158      	b.n	8004668 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	1ad2      	subs	r2, r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80a3 	beq.w	800451e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d16a      	bne.n	80044b6 <USB_EPStartXfer+0x802>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043fe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	2b00      	cmp	r3, #0
 8004408:	d112      	bne.n	8004430 <USB_EPStartXfer+0x77c>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004424:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004428:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e06a      	b.n	8004506 <USB_EPStartXfer+0x852>
 8004430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004432:	2b3e      	cmp	r3, #62	@ 0x3e
 8004434:	d81e      	bhi.n	8004474 <USB_EPStartXfer+0x7c0>
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	643b      	str	r3, [r7, #64]	@ 0x40
 800443c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <USB_EPStartXfer+0x798>
 8004446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004448:	3301      	adds	r3, #1
 800444a:	643b      	str	r3, [r7, #64]	@ 0x40
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445e:	069a      	lsls	r2, r3, #26
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e048      	b.n	8004506 <USB_EPStartXfer+0x852>
 8004474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	643b      	str	r3, [r7, #64]	@ 0x40
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <USB_EPStartXfer+0x7d6>
 8004484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004486:	3b01      	subs	r3, #1
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800449c:	069b      	lsls	r3, r3, #26
 800449e:	431a      	orrs	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e027      	b.n	8004506 <USB_EPStartXfer+0x852>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d123      	bne.n	8004506 <USB_EPStartXfer+0x852>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044dc:	b292      	uxth	r2, r2
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	041a      	lsls	r2, r3, #16
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	895b      	ldrh	r3, [r3, #10]
 800450a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6959      	ldr	r1, [r3, #20]
 8004510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004512:	b29b      	uxth	r3, r3
 8004514:	8b7a      	ldrh	r2, [r7, #26]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fc57 	bl	8004dca <USB_WritePMA>
 800451c:	e0a4      	b.n	8004668 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d16d      	bne.n	8004602 <USB_EPStartXfer+0x94e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004540:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004544:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454c:	2b00      	cmp	r3, #0
 800454e:	d112      	bne.n	8004576 <USB_EPStartXfer+0x8c2>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800455a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800456a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800456e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e06d      	b.n	8004652 <USB_EPStartXfer+0x99e>
 8004576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004578:	2b3e      	cmp	r3, #62	@ 0x3e
 800457a:	d821      	bhi.n	80045c0 <USB_EPStartXfer+0x90c>
 800457c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <USB_EPStartXfer+0x8de>
 800458c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458e:	3301      	adds	r3, #1
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800459c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a4:	069a      	lsls	r2, r3, #26
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045b4:	430a      	orrs	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e04b      	b.n	8004652 <USB_EPStartXfer+0x99e>
 80045ba:	bf00      	nop
 80045bc:	07ff8e8f 	.word	0x07ff8e8f
 80045c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	f003 031f 	and.w	r3, r3, #31
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <USB_EPStartXfer+0x922>
 80045d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d2:	3b01      	subs	r3, #1
 80045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e8:	069b      	lsls	r3, r3, #26
 80045ea:	431a      	orrs	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e027      	b.n	8004652 <USB_EPStartXfer+0x99e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d123      	bne.n	8004652 <USB_EPStartXfer+0x99e>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004614:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004624:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004628:	b292      	uxth	r2, r2
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800463e:	041a      	lsls	r2, r3, #16
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800464a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	891b      	ldrh	r3, [r3, #8]
 8004656:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6959      	ldr	r1, [r3, #20]
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	b29b      	uxth	r3, r3
 8004660:	8b7a      	ldrh	r2, [r7, #26]
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fbb1 	bl	8004dca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b8b      	ldr	r3, [pc, #556]	@ (80048a4 <USB_EPStartXfer+0xbf0>)
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f083 0310 	eor.w	r3, r3, #16
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f083 0320 	eor.w	r3, r3, #32
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800469a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e36b      	b.n	8004d7a <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	7b1b      	ldrb	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 8081 	bne.w	80047ae <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d909      	bls.n	80046cc <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c4:	1ad2      	subs	r2, r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	619a      	str	r2, [r3, #24]
 80046ca:	e005      	b.n	80046d8 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046f6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d112      	bne.n	8004728 <USB_EPStartXfer+0xa74>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800470c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800471c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004720:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e30c      	b.n	8004d42 <USB_EPStartXfer+0x108e>
 8004728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472a:	2b3e      	cmp	r3, #62	@ 0x3e
 800472c:	d81e      	bhi.n	800476c <USB_EPStartXfer+0xab8>
 800472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <USB_EPStartXfer+0xa90>
 800473e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004740:	3301      	adds	r3, #1
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800474e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	069a      	lsls	r2, r3, #26
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004762:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	e2ea      	b.n	8004d42 <USB_EPStartXfer+0x108e>
 800476c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <USB_EPStartXfer+0xace>
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	3b01      	subs	r3, #1
 8004780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800478c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	069b      	lsls	r3, r3, #26
 8004796:	431a      	orrs	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e2c9      	b.n	8004d42 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	78db      	ldrb	r3, [r3, #3]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	f040 8176 	bne.w	8004aa4 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d173      	bne.n	80048a8 <USB_EPStartXfer+0xbf4>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d112      	bne.n	8004812 <USB_EPStartXfer+0xb5e>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800480a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e073      	b.n	80048fa <USB_EPStartXfer+0xc46>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b3e      	cmp	r3, #62	@ 0x3e
 8004818:	d820      	bhi.n	800485c <USB_EPStartXfer+0xba8>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <USB_EPStartXfer+0xb80>
 800482e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004830:	3301      	adds	r3, #1
 8004832:	637b      	str	r3, [r7, #52]	@ 0x34
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800483e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	069a      	lsls	r2, r3, #26
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004852:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e04e      	b.n	80048fa <USB_EPStartXfer+0xc46>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <USB_EPStartXfer+0xbc2>
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	3b01      	subs	r3, #1
 8004874:	637b      	str	r3, [r7, #52]	@ 0x34
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	069b      	lsls	r3, r3, #26
 800488a:	431a      	orrs	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004896:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800489a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e02b      	b.n	80048fa <USB_EPStartXfer+0xc46>
 80048a2:	bf00      	nop
 80048a4:	07ff8fbf 	.word	0x07ff8fbf
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d124      	bne.n	80048fa <USB_EPStartXfer+0xc46>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048ce:	b292      	uxth	r2, r2
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	041a      	lsls	r2, r3, #16
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048f6:	430a      	orrs	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d170      	bne.n	80049e4 <USB_EPStartXfer+0xd30>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800490c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800491c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004920:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d112      	bne.n	8004954 <USB_EPStartXfer+0xca0>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004938:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004948:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800494c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e070      	b.n	8004a36 <USB_EPStartXfer+0xd82>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b3e      	cmp	r3, #62	@ 0x3e
 800495a:	d820      	bhi.n	800499e <USB_EPStartXfer+0xcea>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	633b      	str	r3, [r7, #48]	@ 0x30
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <USB_EPStartXfer+0xcc2>
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	3301      	adds	r3, #1
 8004974:	633b      	str	r3, [r7, #48]	@ 0x30
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004980:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004984:	6859      	ldr	r1, [r3, #4]
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	069a      	lsls	r2, r3, #26
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004994:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	e04b      	b.n	8004a36 <USB_EPStartXfer+0xd82>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <USB_EPStartXfer+0xd04>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	3b01      	subs	r3, #1
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	069b      	lsls	r3, r3, #26
 80049cc:	431a      	orrs	r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	e028      	b.n	8004a36 <USB_EPStartXfer+0xd82>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d124      	bne.n	8004a36 <USB_EPStartXfer+0xd82>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8181 	beq.w	8004d42 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004a4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <USB_EPStartXfer+0xdae>
 8004a58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004a62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 816a 	bne.w	8004d42 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004a6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 8164 	bne.w	8004d42 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b98      	ldr	r3, [pc, #608]	@ (8004ce8 <USB_EPStartXfer+0x1034>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e14e      	b.n	8004d42 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	78db      	ldrb	r3, [r3, #3]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 8148 	bne.w	8004d3e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d909      	bls.n	8004ace <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	619a      	str	r2, [r3, #24]
 8004acc:	e005      	b.n	8004ada <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d16a      	bne.n	8004bb8 <USB_EPStartXfer+0xf04>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004afc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b00:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d112      	bne.n	8004b32 <USB_EPStartXfer+0xe7e>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e06a      	b.n	8004c08 <USB_EPStartXfer+0xf54>
 8004b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b36:	d81e      	bhi.n	8004b76 <USB_EPStartXfer+0xec2>
 8004b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <USB_EPStartXfer+0xe9a>
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b60:	069a      	lsls	r2, r3, #26
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e048      	b.n	8004c08 <USB_EPStartXfer+0xf54>
 8004b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7e:	f003 031f 	and.w	r3, r3, #31
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <USB_EPStartXfer+0xed8>
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bb0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e027      	b.n	8004c08 <USB_EPStartXfer+0xf54>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d123      	bne.n	8004c08 <USB_EPStartXfer+0xf54>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bde:	b292      	uxth	r2, r2
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d16d      	bne.n	8004cec <USB_EPStartXfer+0x1038>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c2e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d112      	bne.n	8004c60 <USB_EPStartXfer+0xfac>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c58:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	e070      	b.n	8004d42 <USB_EPStartXfer+0x108e>
 8004c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c62:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c64:	d81e      	bhi.n	8004ca4 <USB_EPStartXfer+0xff0>
 8004c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c68:	085b      	lsrs	r3, r3, #1
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <USB_EPStartXfer+0xfc8>
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	3301      	adds	r3, #1
 8004c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	069a      	lsls	r2, r3, #26
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	e04e      	b.n	8004d42 <USB_EPStartXfer+0x108e>
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <USB_EPStartXfer+0x1006>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	069b      	lsls	r3, r3, #26
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004cde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	e02d      	b.n	8004d42 <USB_EPStartXfer+0x108e>
 8004ce6:	bf00      	nop
 8004ce8:	07ff8f8f 	.word	0x07ff8f8f
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d126      	bne.n	8004d42 <USB_EPStartXfer+0x108e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d12:	b292      	uxth	r2, r2
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d28:	041a      	lsls	r2, r3, #16
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e001      	b.n	8004d42 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e01c      	b.n	8004d7c <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d84 <USB_EPStartXfer+0x10d0>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3758      	adds	r7, #88	@ 0x58
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	07ffbf8f 	.word	0x07ffbf8f

08004d88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2280      	movs	r2, #128	@ 0x80
 8004d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b08b      	sub	sp, #44	@ 0x2c
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	460b      	mov	r3, r1
 8004dda:	80fb      	strh	r3, [r7, #6]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8004de0:	88bb      	ldrh	r3, [r7, #4]
 8004de2:	3303      	adds	r3, #3
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8004de8:	88bb      	ldrh	r3, [r7, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8004df4:	8afb      	ldrh	r3, [r7, #22]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <USB_WritePMA+0x36>
  {
    NbWords--;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e0a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	e015      	b.n	8004e3e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	3301      	adds	r3, #1
 8004e24:	613b      	str	r3, [r7, #16]
    pBuf++;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
    pBuf++;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	613b      	str	r3, [r7, #16]
    pBuf++;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3301      	adds	r3, #1
 8004e36:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e6      	bne.n	8004e12 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d01a      	beq.n	8004e80 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	3301      	adds	r3, #1
 8004e66:	623b      	str	r3, [r7, #32]
      pBuf++;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8004e6e:	8afb      	ldrh	r3, [r7, #22]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8004e74:	8afb      	ldrh	r3, [r7, #22]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e9      	bne.n	8004e4e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7e:	601a      	str	r2, [r3, #0]
  }
}
 8004e80:	bf00      	nop
 8004e82:	372c      	adds	r7, #44	@ 0x2c
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b08b      	sub	sp, #44	@ 0x2c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	80fb      	strh	r3, [r7, #6]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8004ea2:	88bb      	ldrh	r3, [r7, #4]
 8004ea4:	3303      	adds	r3, #3
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8004eaa:	88bb      	ldrh	r3, [r7, #4]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ebc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ec0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8004ec2:	8b7b      	ldrh	r3, [r7, #26]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <USB_ReadPMA+0x42>
  {
    NbWords--;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	e015      	b.n	8004f00 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	623b      	str	r3, [r7, #32]
    pBuf++;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
    pBuf++;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3301      	adds	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
    pBuf++;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
    pBuf++;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	3b01      	subs	r3, #1
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8004f06:	8b7b      	ldrh	r3, [r7, #26]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	701a      	strb	r2, [r3, #0]
      count++;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	3301      	adds	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8004f30:	8b7b      	ldrh	r3, [r7, #26]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8004f36:	8b7b      	ldrh	r3, [r7, #26]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ea      	bne.n	8004f12 <USB_ReadPMA+0x86>
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	372c      	adds	r7, #44	@ 0x2c
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_PCD_SetupStageCallback>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 f90c 	bl	800517c <USBD_LL_SetupStage>
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	4619      	mov	r1, r3
 8004f96:	f000 f946 	bl	8005226 <USBD_LL_DataOutStage>
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3328      	adds	r3, #40	@ 0x28
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f000 f9df 	bl	800538c <USBD_LL_DataInStage>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fae5 	bl	80055b4 <USBD_LL_SOF>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	79db      	ldrb	r3, [r3, #7]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d001      	beq.n	800500a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005006:	f7fb fa0b 	bl	8000420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fabd 	bl	8005594 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fa65 	bl	80054f0 <USBD_LL_Reset>
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <USBD_LL_OpenEP>:
  * @param  ep_mps: Endpoint Max Packet Size
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
                                  uint8_t ep_type, uint16_t ep_mps)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	4608      	mov	r0, r1
 8005038:	4611      	mov	r1, r2
 800503a:	461a      	mov	r2, r3
 800503c:	4603      	mov	r3, r0
 800503e:	70fb      	strb	r3, [r7, #3]
 8005040:	460b      	mov	r3, r1
 8005042:	70bb      	strb	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	803b      	strh	r3, [r7, #0]
  UNUSED(pdev);
  UNUSED(ep_addr);
  UNUSED(ep_type);
  UNUSED(ep_mps);

  return USBD_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(ep_addr);

  return USBD_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USBD_LL_ClearStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
                                        uint8_t ep_addr)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(ep_addr);

  return USBD_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(ep_addr);

  return 0U;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USBD_LL_SetUSBAddress>:
  * @param  dev_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
                                         uint8_t dev_addr)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(dev_addr);

  return USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USBD_LL_Transmit>:
  * @param  size: Data size
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
                                    uint8_t *pbuf, uint32_t size)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	460b      	mov	r3, r1
 80050cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(pdev);
  UNUSED(ep_addr);
  UNUSED(pbuf);
  UNUSED(size);

  return USBD_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USBD_LL_PrepareReceive>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
                                          uint8_t ep_addr, uint8_t *pbuf,
                                          uint32_t size)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	460b      	mov	r3, r1
 80050ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(pdev);
  UNUSED(ep_addr);
  UNUSED(pbuf);
  UNUSED(size);

  return USBD_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005102:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4611      	mov	r1, r2
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	4611      	mov	r1, r2
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800516e:	2303      	movs	r3, #3
 8005170:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f85d 	bl	800624e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d01a      	beq.n	80051ee <USBD_LL_SetupStage+0x72>
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d822      	bhi.n	8005202 <USBD_LL_SetupStage+0x86>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <USBD_LL_SetupStage+0x4a>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d00a      	beq.n	80051da <USBD_LL_SetupStage+0x5e>
 80051c4:	e01d      	b.n	8005202 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa48 	bl	8005664 <USBD_StdDevReq>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e020      	b.n	800521c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fab0 	bl	8005748 <USBD_StdItfReq>
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e016      	b.n	800521c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fb12 	bl	8005820 <USBD_StdEPReq>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e00c      	b.n	800521c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005208:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800520c:	b2db      	uxtb	r3, r3
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff20 	bl	8005056 <USBD_LL_StallEP>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]
      break;
 800521a:	bf00      	nop
  }

  return ret;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	460b      	mov	r3, r1
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d16e      	bne.n	800531c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005244:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800524c:	2b03      	cmp	r3, #3
 800524e:	f040 8098 	bne.w	8005382 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d913      	bls.n	8005286 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	4293      	cmp	r3, r2
 8005276:	bf28      	it	cs
 8005278:	4613      	movcs	r3, r2
 800527a:	461a      	mov	r2, r3
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 f85c 	bl	800633c <USBD_CtlContinueRx>
 8005284:	e07d      	b.n	8005382 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	2b02      	cmp	r3, #2
 8005292:	d014      	beq.n	80052be <USBD_LL_DataOutStage+0x98>
 8005294:	2b02      	cmp	r3, #2
 8005296:	d81d      	bhi.n	80052d4 <USBD_LL_DataOutStage+0xae>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <USBD_LL_DataOutStage+0x7c>
 800529c:	2b01      	cmp	r3, #1
 800529e:	d003      	beq.n	80052a8 <USBD_LL_DataOutStage+0x82>
 80052a0:	e018      	b.n	80052d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	75bb      	strb	r3, [r7, #22]
            break;
 80052a6:	e018      	b.n	80052da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f99e 	bl	80055f4 <USBD_CoreFindIF>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75bb      	strb	r3, [r7, #22]
            break;
 80052bc:	e00d      	b.n	80052da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f9a0 	bl	800560e <USBD_CoreFindEP>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75bb      	strb	r3, [r7, #22]
            break;
 80052d2:	e002      	b.n	80052da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	75bb      	strb	r3, [r7, #22]
            break;
 80052d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80052da:	7dbb      	ldrb	r3, [r7, #22]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d119      	bne.n	8005314 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d113      	bne.n	8005314 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80052ec:	7dba      	ldrb	r2, [r7, #22]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	32ae      	adds	r2, #174	@ 0xae
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00b      	beq.n	8005314 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80052fc:	7dba      	ldrb	r2, [r7, #22]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005304:	7dba      	ldrb	r2, [r7, #22]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	32ae      	adds	r2, #174	@ 0xae
 800530a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f001 f822 	bl	800635e <USBD_CtlSendStatus>
 800531a:	e032      	b.n	8005382 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800531c:	7afb      	ldrb	r3, [r7, #11]
 800531e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f971 	bl	800560e <USBD_CoreFindEP>
 800532c:	4603      	mov	r3, r0
 800532e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005330:	7dbb      	ldrb	r3, [r7, #22]
 8005332:	2bff      	cmp	r3, #255	@ 0xff
 8005334:	d025      	beq.n	8005382 <USBD_LL_DataOutStage+0x15c>
 8005336:	7dbb      	ldrb	r3, [r7, #22]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d122      	bne.n	8005382 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b03      	cmp	r3, #3
 8005346:	d117      	bne.n	8005378 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005348:	7dba      	ldrb	r2, [r7, #22]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	32ae      	adds	r2, #174	@ 0xae
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00f      	beq.n	8005378 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005358:	7dba      	ldrb	r2, [r7, #22]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005360:	7dba      	ldrb	r2, [r7, #22]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	32ae      	adds	r2, #174	@ 0xae
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	7afa      	ldrb	r2, [r7, #11]
 800536e:	4611      	mov	r1, r2
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	4798      	blx	r3
 8005374:	4603      	mov	r3, r0
 8005376:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	e000      	b.n	8005384 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	460b      	mov	r3, r1
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d16f      	bne.n	8005480 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3314      	adds	r3, #20
 80053a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d15a      	bne.n	8005466 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d914      	bls.n	80053e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	1ad2      	subs	r2, r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 ffa1 	bl	800631a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053d8:	2300      	movs	r3, #0
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff fe7c 	bl	80050dc <USBD_LL_PrepareReceive>
 80053e4:	e03f      	b.n	8005466 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d11c      	bne.n	800542c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d316      	bcc.n	800542c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005408:	429a      	cmp	r2, r3
 800540a:	d20f      	bcs.n	800542c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800540c:	2200      	movs	r2, #0
 800540e:	2100      	movs	r1, #0
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 ff82 	bl	800631a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800541e:	2300      	movs	r3, #0
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff fe59 	bl	80050dc <USBD_LL_PrepareReceive>
 800542a:	e01c      	b.n	8005466 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d10f      	bne.n	8005458 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005458:	2180      	movs	r1, #128	@ 0x80
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fdfb 	bl	8005056 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 ff8f 	bl	8006384 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03a      	beq.n	80054e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff fe42 	bl	80050fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800547e:	e032      	b.n	80054e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4619      	mov	r1, r3
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f8bf 	bl	800560e <USBD_CoreFindEP>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2bff      	cmp	r3, #255	@ 0xff
 8005498:	d025      	beq.n	80054e6 <USBD_LL_DataInStage+0x15a>
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d122      	bne.n	80054e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d11c      	bne.n	80054e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80054ac:	7dfa      	ldrb	r2, [r7, #23]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	32ae      	adds	r2, #174	@ 0xae
 80054b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d014      	beq.n	80054e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80054bc:	7dfa      	ldrb	r2, [r7, #23]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80054c4:	7dfa      	ldrb	r2, [r7, #23]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	32ae      	adds	r2, #174	@ 0xae
 80054ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	7afa      	ldrb	r2, [r7, #11]
 80054d2:	4611      	mov	r1, r2
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	4798      	blx	r3
 80054d8:	4603      	mov	r3, r0
 80054da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80054dc:	7dbb      	ldrb	r3, [r7, #22]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80054e2:	7dbb      	ldrb	r3, [r7, #22]
 80054e4:	e000      	b.n	80054e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d014      	beq.n	8005556 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00e      	beq.n	8005556 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	4611      	mov	r1, r2
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005552:	2303      	movs	r3, #3
 8005554:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005556:	2340      	movs	r3, #64	@ 0x40
 8005558:	2200      	movs	r2, #0
 800555a:	2100      	movs	r1, #0
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fd66 	bl	800502e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2240      	movs	r2, #64	@ 0x40
 800556e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005572:	2340      	movs	r3, #64	@ 0x40
 8005574:	2200      	movs	r2, #0
 8005576:	2180      	movs	r1, #128	@ 0x80
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fd58 	bl	800502e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2240      	movs	r2, #64	@ 0x40
 8005588:	621a      	str	r2, [r3, #32]

  return ret;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d110      	bne.n	80055ea <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005600:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800561a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	3301      	adds	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005646:	8a3b      	ldrh	r3, [r7, #16]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	b21a      	sxth	r2, r3
 800564c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005650:	4313      	orrs	r3, r2
 8005652:	b21b      	sxth	r3, r3
 8005654:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005656:	89fb      	ldrh	r3, [r7, #14]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800567a:	2b40      	cmp	r3, #64	@ 0x40
 800567c:	d005      	beq.n	800568a <USBD_StdDevReq+0x26>
 800567e:	2b40      	cmp	r3, #64	@ 0x40
 8005680:	d857      	bhi.n	8005732 <USBD_StdDevReq+0xce>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00f      	beq.n	80056a6 <USBD_StdDevReq+0x42>
 8005686:	2b20      	cmp	r3, #32
 8005688:	d153      	bne.n	8005732 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	32ae      	adds	r2, #174	@ 0xae
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	4798      	blx	r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e04a      	b.n	800573c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b09      	cmp	r3, #9
 80056ac:	d83b      	bhi.n	8005726 <USBD_StdDevReq+0xc2>
 80056ae:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <USBD_StdDevReq+0x50>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	08005709 	.word	0x08005709
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	08005727 	.word	0x08005727
 80056c0:	08005713 	.word	0x08005713
 80056c4:	08005727 	.word	0x08005727
 80056c8:	080056e7 	.word	0x080056e7
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	08005727 	.word	0x08005727
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	080056f1 	.word	0x080056f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa3c 	bl	8005b5c <USBD_GetDescriptor>
          break;
 80056e4:	e024      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc0d 	bl	8005f08 <USBD_SetAddress>
          break;
 80056ee:	e01f      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fc4c 	bl	8005f90 <USBD_SetConfig>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
          break;
 80056fc:	e018      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fcef 	bl	80060e4 <USBD_GetConfig>
          break;
 8005706:	e013      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fd20 	bl	8006150 <USBD_GetStatus>
          break;
 8005710:	e00e      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fd4f 	bl	80061b8 <USBD_SetFeature>
          break;
 800571a:	e009      	b.n	8005730 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fd73 	bl	800620a <USBD_ClrFeature>
          break;
 8005724:	e004      	b.n	8005730 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fdca 	bl	80062c2 <USBD_CtlError>
          break;
 800572e:	bf00      	nop
      }
      break;
 8005730:	e004      	b.n	800573c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fdc4 	bl	80062c2 <USBD_CtlError>
      break;
 800573a:	bf00      	nop
  }

  return ret;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d005      	beq.n	800576e <USBD_StdItfReq+0x26>
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d852      	bhi.n	800580c <USBD_StdItfReq+0xc4>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <USBD_StdItfReq+0x26>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d14e      	bne.n	800580c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	2b02      	cmp	r3, #2
 800577a:	d840      	bhi.n	80057fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	889b      	ldrh	r3, [r3, #4]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b01      	cmp	r3, #1
 8005784:	d836      	bhi.n	80057f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	889b      	ldrh	r3, [r3, #4]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff30 	bl	80055f4 <USBD_CoreFindIF>
 8005794:	4603      	mov	r3, r0
 8005796:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	2bff      	cmp	r3, #255	@ 0xff
 800579c:	d01d      	beq.n	80057da <USBD_StdItfReq+0x92>
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11a      	bne.n	80057da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80057a4:	7bba      	ldrb	r2, [r7, #14]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32ae      	adds	r2, #174	@ 0xae
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80057b4:	7bba      	ldrb	r2, [r7, #14]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057bc:	7bba      	ldrb	r2, [r7, #14]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	32ae      	adds	r2, #174	@ 0xae
 80057c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80057d2:	e004      	b.n	80057de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80057d4:	2303      	movs	r3, #3
 80057d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80057d8:	e001      	b.n	80057de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80057da:	2303      	movs	r3, #3
 80057dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d110      	bne.n	8005808 <USBD_StdItfReq+0xc0>
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10d      	bne.n	8005808 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fdb6 	bl	800635e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80057f2:	e009      	b.n	8005808 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fd63 	bl	80062c2 <USBD_CtlError>
          break;
 80057fc:	e004      	b.n	8005808 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd5e 	bl	80062c2 <USBD_CtlError>
          break;
 8005806:	e000      	b.n	800580a <USBD_StdItfReq+0xc2>
          break;
 8005808:	bf00      	nop
      }
      break;
 800580a:	e004      	b.n	8005816 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fd57 	bl	80062c2 <USBD_CtlError>
      break;
 8005814:	bf00      	nop
  }

  return ret;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	889b      	ldrh	r3, [r3, #4]
 8005832:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800583c:	2b40      	cmp	r3, #64	@ 0x40
 800583e:	d007      	beq.n	8005850 <USBD_StdEPReq+0x30>
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	f200 817f 	bhi.w	8005b44 <USBD_StdEPReq+0x324>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d02a      	beq.n	80058a0 <USBD_StdEPReq+0x80>
 800584a:	2b20      	cmp	r3, #32
 800584c:	f040 817a 	bne.w	8005b44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff feda 	bl	800560e <USBD_CoreFindEP>
 800585a:	4603      	mov	r3, r0
 800585c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800585e:	7b7b      	ldrb	r3, [r7, #13]
 8005860:	2bff      	cmp	r3, #255	@ 0xff
 8005862:	f000 8174 	beq.w	8005b4e <USBD_StdEPReq+0x32e>
 8005866:	7b7b      	ldrb	r3, [r7, #13]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f040 8170 	bne.w	8005b4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800586e:	7b7a      	ldrb	r2, [r7, #13]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005876:	7b7a      	ldrb	r2, [r7, #13]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	32ae      	adds	r2, #174	@ 0xae
 800587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8163 	beq.w	8005b4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005888:	7b7a      	ldrb	r2, [r7, #13]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	@ 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800589e:	e156      	b.n	8005b4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d008      	beq.n	80058ba <USBD_StdEPReq+0x9a>
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	f300 8145 	bgt.w	8005b38 <USBD_StdEPReq+0x318>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 809b 	beq.w	80059ea <USBD_StdEPReq+0x1ca>
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d03c      	beq.n	8005932 <USBD_StdEPReq+0x112>
 80058b8:	e13e      	b.n	8005b38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d002      	beq.n	80058cc <USBD_StdEPReq+0xac>
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d016      	beq.n	80058f8 <USBD_StdEPReq+0xd8>
 80058ca:	e02c      	b.n	8005926 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <USBD_StdEPReq+0xce>
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d00a      	beq.n	80058ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff fbba 	bl	8005056 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fbb6 	bl	8005056 <USBD_LL_StallEP>
 80058ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058ec:	e020      	b.n	8005930 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fce6 	bl	80062c2 <USBD_CtlError>
              break;
 80058f6:	e01b      	b.n	8005930 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10e      	bne.n	800591e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <USBD_StdEPReq+0xfe>
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	2b80      	cmp	r3, #128	@ 0x80
 800590a:	d008      	beq.n	800591e <USBD_StdEPReq+0xfe>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	88db      	ldrh	r3, [r3, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fb9c 	bl	8005056 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fd1d 	bl	800635e <USBD_CtlSendStatus>

              break;
 8005924:	e004      	b.n	8005930 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fcca 	bl	80062c2 <USBD_CtlError>
              break;
 800592e:	bf00      	nop
          }
          break;
 8005930:	e107      	b.n	8005b42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d002      	beq.n	8005944 <USBD_StdEPReq+0x124>
 800593e:	2b03      	cmp	r3, #3
 8005940:	d016      	beq.n	8005970 <USBD_StdEPReq+0x150>
 8005942:	e04b      	b.n	80059dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00d      	beq.n	8005966 <USBD_StdEPReq+0x146>
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	2b80      	cmp	r3, #128	@ 0x80
 800594e:	d00a      	beq.n	8005966 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff fb7e 	bl	8005056 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800595a:	2180      	movs	r1, #128	@ 0x80
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fb7a 	bl	8005056 <USBD_LL_StallEP>
 8005962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005964:	e040      	b.n	80059e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fcaa 	bl	80062c2 <USBD_CtlError>
              break;
 800596e:	e03b      	b.n	80059e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	885b      	ldrh	r3, [r3, #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d136      	bne.n	80059e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005978:	7bbb      	ldrb	r3, [r7, #14]
 800597a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fb72 	bl	8005070 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fce6 	bl	800635e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fe39 	bl	800560e <USBD_CoreFindEP>
 800599c:	4603      	mov	r3, r0
 800599e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059a0:	7b7b      	ldrb	r3, [r7, #13]
 80059a2:	2bff      	cmp	r3, #255	@ 0xff
 80059a4:	d01f      	beq.n	80059e6 <USBD_StdEPReq+0x1c6>
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11c      	bne.n	80059e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80059ac:	7b7a      	ldrb	r2, [r7, #13]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80059b4:	7b7a      	ldrb	r2, [r7, #13]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	32ae      	adds	r2, #174	@ 0xae
 80059ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80059c4:	7b7a      	ldrb	r2, [r7, #13]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	32ae      	adds	r2, #174	@ 0xae
 80059ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80059da:	e004      	b.n	80059e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fc6f 	bl	80062c2 <USBD_CtlError>
              break;
 80059e4:	e000      	b.n	80059e8 <USBD_StdEPReq+0x1c8>
              break;
 80059e6:	bf00      	nop
          }
          break;
 80059e8:	e0ab      	b.n	8005b42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d002      	beq.n	80059fc <USBD_StdEPReq+0x1dc>
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d032      	beq.n	8005a60 <USBD_StdEPReq+0x240>
 80059fa:	e097      	b.n	8005b2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <USBD_StdEPReq+0x1f2>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b80      	cmp	r3, #128	@ 0x80
 8005a06:	d004      	beq.n	8005a12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc59 	bl	80062c2 <USBD_CtlError>
                break;
 8005a10:	e091      	b.n	8005b36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da0b      	bge.n	8005a32 <USBD_StdEPReq+0x212>
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	3310      	adds	r3, #16
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	e00b      	b.n	8005a4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a32:	7bbb      	ldrb	r3, [r7, #14]
 8005a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	3304      	adds	r3, #4
 8005a4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2202      	movs	r2, #2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fc43 	bl	80062e4 <USBD_CtlSendData>
              break;
 8005a5e:	e06a      	b.n	8005b36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da11      	bge.n	8005a8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	f003 020f 	and.w	r2, r3, #15
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3324      	adds	r3, #36	@ 0x24
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d117      	bne.n	8005ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fc1c 	bl	80062c2 <USBD_CtlError>
                  break;
 8005a8a:	e054      	b.n	8005b36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fc09 	bl	80062c2 <USBD_CtlError>
                  break;
 8005ab0:	e041      	b.n	8005b36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da0b      	bge.n	8005ad2 <USBD_StdEPReq+0x2b2>
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	3310      	adds	r3, #16
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	3304      	adds	r3, #4
 8005ad0:	e00b      	b.n	8005aea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	3304      	adds	r3, #4
 8005aea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <USBD_StdEPReq+0x2d8>
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	2b80      	cmp	r3, #128	@ 0x80
 8005af6:	d103      	bne.n	8005b00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e00e      	b.n	8005b1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fac0 	bl	800508a <USBD_LL_IsStallEP>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e002      	b.n	8005b1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2202      	movs	r2, #2
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fbdd 	bl	80062e4 <USBD_CtlSendData>
              break;
 8005b2a:	e004      	b.n	8005b36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fbc7 	bl	80062c2 <USBD_CtlError>
              break;
 8005b34:	bf00      	nop
          }
          break;
 8005b36:	e004      	b.n	8005b42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005b38:	6839      	ldr	r1, [r7, #0]
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fbc1 	bl	80062c2 <USBD_CtlError>
          break;
 8005b40:	bf00      	nop
      }
      break;
 8005b42:	e005      	b.n	8005b50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fbbb 	bl	80062c2 <USBD_CtlError>
      break;
 8005b4c:	e000      	b.n	8005b50 <USBD_StdEPReq+0x330>
      break;
 8005b4e:	bf00      	nop
  }

  return ret;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	885b      	ldrh	r3, [r3, #2]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	2b0e      	cmp	r3, #14
 8005b7e:	f200 8194 	bhi.w	8005eaa <USBD_GetDescriptor+0x34e>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <USBD_GetDescriptor+0x2c>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	08005c11 	.word	0x08005c11
 8005b90:	08005c51 	.word	0x08005c51
 8005b94:	08005eab 	.word	0x08005eab
 8005b98:	08005eab 	.word	0x08005eab
 8005b9c:	08005e4b 	.word	0x08005e4b
 8005ba0:	08005e77 	.word	0x08005e77
 8005ba4:	08005eab 	.word	0x08005eab
 8005ba8:	08005eab 	.word	0x08005eab
 8005bac:	08005eab 	.word	0x08005eab
 8005bb0:	08005eab 	.word	0x08005eab
 8005bb4:	08005eab 	.word	0x08005eab
 8005bb8:	08005eab 	.word	0x08005eab
 8005bbc:	08005eab 	.word	0x08005eab
 8005bc0:	08005bc5 	.word	0x08005bc5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7c12      	ldrb	r2, [r2, #16]
 8005bdc:	f107 010a 	add.w	r1, r7, #10
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005be6:	e168      	b.n	8005eba <USBD_GetDescriptor+0x35e>
        USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fb69 	bl	80062c2 <USBD_CtlError>
        err++;
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8005bf6:	e160      	b.n	8005eba <USBD_GetDescriptor+0x35e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	7c12      	ldrb	r2, [r2, #16]
 8005c04:	f107 010a 	add.w	r1, r7, #10
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	6178      	str	r0, [r7, #20]
      break;
 8005c0e:	e154      	b.n	8005eba <USBD_GetDescriptor+0x35e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	7c1b      	ldrb	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10d      	bne.n	8005c34 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f107 020a 	add.w	r2, r7, #10
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
 8005c28:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	2202      	movs	r2, #2
 8005c30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c32:	e142      	b.n	8005eba <USBD_GetDescriptor+0x35e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	f107 020a 	add.w	r2, r7, #10
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
 8005c44:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	701a      	strb	r2, [r3, #0]
      break;
 8005c4e:	e134      	b.n	8005eba <USBD_GetDescriptor+0x35e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	885b      	ldrh	r3, [r3, #2]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	f200 80ac 	bhi.w	8005db4 <USBD_GetDescriptor+0x258>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <USBD_GetDescriptor+0x108>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005cb1 	.word	0x08005cb1
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005d19 	.word	0x08005d19
 8005c74:	08005d4d 	.word	0x08005d4d
 8005c78:	08005d81 	.word	0x08005d81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	7c12      	ldrb	r2, [r2, #16]
 8005c94:	f107 010a 	add.w	r1, r7, #10
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
 8005c9c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9e:	e0d3      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fb0d 	bl	80062c2 <USBD_CtlError>
            err++;
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	3301      	adds	r3, #1
 8005cac:	74fb      	strb	r3, [r7, #19]
          break;
 8005cae:	e0cb      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7c12      	ldrb	r2, [r2, #16]
 8005cc8:	f107 010a 	add.w	r1, r7, #10
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cd2:	e0b9      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 faf3 	bl	80062c2 <USBD_CtlError>
            err++;
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	74fb      	strb	r3, [r7, #19]
          break;
 8005ce2:	e0b1      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	7c12      	ldrb	r2, [r2, #16]
 8005cfc:	f107 010a 	add.w	r1, r7, #10
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
 8005d04:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d06:	e09f      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fad9 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	3301      	adds	r3, #1
 8005d14:	74fb      	strb	r3, [r7, #19]
          break;
 8005d16:	e097      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7c12      	ldrb	r2, [r2, #16]
 8005d30:	f107 010a 	add.w	r1, r7, #10
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d3a:	e085      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fabf 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d44:	7cfb      	ldrb	r3, [r7, #19]
 8005d46:	3301      	adds	r3, #1
 8005d48:	74fb      	strb	r3, [r7, #19]
          break;
 8005d4a:	e07d      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 010a 	add.w	r1, r7, #10
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6e:	e06b      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 faa5 	bl	80062c2 <USBD_CtlError>
            err++;
 8005d78:	7cfb      	ldrb	r3, [r7, #19]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	74fb      	strb	r3, [r7, #19]
          break;
 8005d7e:	e063      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	7c12      	ldrb	r2, [r2, #16]
 8005d98:	f107 010a 	add.w	r1, r7, #10
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005da2:	e051      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa8b 	bl	80062c2 <USBD_CtlError>
            err++;
 8005dac:	7cfb      	ldrb	r3, [r7, #19]
 8005dae:	3301      	adds	r3, #1
 8005db0:	74fb      	strb	r3, [r7, #19]
          break;
 8005db2:	e049      	b.n	8005e48 <USBD_GetDescriptor+0x2ec>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]


          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e020      	b.n	8005e00 <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	32ae      	adds	r2, #174	@ 0xae
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d015      	beq.n	8005dfa <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	32ae      	adds	r2, #174	@ 0xae
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	8852      	ldrh	r2, [r2, #2]
 8005de6:	b2d1      	uxtb	r1, r2
 8005de8:	f107 020a 	add.w	r2, r7, #10
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
 8005df0:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <USBD_GetDescriptor+0x2b2>
              {
                continue;
 8005df8:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3d8      	bcc.n	8005dbe <USBD_GetDescriptor+0x262>
 8005e0c:	e000      	b.n	8005e10 <USBD_GetDescriptor+0x2b4>
              }
              else
              {
                break;
 8005e0e:	bf00      	nop
          }

#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if (USBD_CLASS_USER_STRING_DESC == 1U)
          if (pdev->pDesc->GetUserStrDescriptor != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00d      	beq.n	8005e38 <USBD_GetDescriptor+0x2dc>
          {
            pbuf = pdev->pDesc->GetUserStrDescriptor(pdev->dev_speed, (req->wValue), &len);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	7c10      	ldrb	r0, [r2, #16]
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	8852      	ldrh	r2, [r2, #2]
 8005e2c:	b2d1      	uxtb	r1, r2
 8005e2e:	f107 020a 	add.w	r2, r7, #10
 8005e32:	4798      	blx	r3
 8005e34:	6178      	str	r0, [r7, #20]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e36:	e006      	b.n	8005e46 <USBD_GetDescriptor+0x2ea>
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa41 	bl	80062c2 <USBD_CtlError>
            err++;
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	3301      	adds	r3, #1
 8005e44:	74fb      	strb	r3, [r7, #19]
          break;
 8005e46:	bf00      	nop
      }
      break;
 8005e48:	e037      	b.n	8005eba <USBD_GetDescriptor+0x35e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c1b      	ldrb	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e5a:	f107 020a 	add.w	r2, r7, #10
 8005e5e:	4610      	mov	r0, r2
 8005e60:	4798      	blx	r3
 8005e62:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e64:	e029      	b.n	8005eba <USBD_GetDescriptor+0x35e>
        USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa2a 	bl	80062c2 <USBD_CtlError>
        err++;
 8005e6e:	7cfb      	ldrb	r3, [r7, #19]
 8005e70:	3301      	adds	r3, #1
 8005e72:	74fb      	strb	r3, [r7, #19]
      break;
 8005e74:	e021      	b.n	8005eba <USBD_GetDescriptor+0x35e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7c1b      	ldrb	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_GetDescriptor+0x33e>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e86:	f107 020a 	add.w	r2, r7, #10
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4798      	blx	r3
 8005e8e:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3301      	adds	r3, #1
 8005e94:	2207      	movs	r2, #7
 8005e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e98:	e00f      	b.n	8005eba <USBD_GetDescriptor+0x35e>
        USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa10 	bl	80062c2 <USBD_CtlError>
        err++;
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	74fb      	strb	r3, [r7, #19]
      break;
 8005ea8:	e007      	b.n	8005eba <USBD_GetDescriptor+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa08 	bl	80062c2 <USBD_CtlError>
      err++;
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	74fb      	strb	r3, [r7, #19]
      break;
 8005eb8:	bf00      	nop
  }

  if (err != 0U)
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <USBD_GetDescriptor+0x3a2>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d016      	beq.n	8005ef6 <USBD_GetDescriptor+0x39a>
  {
    if (len != 0U)
 8005ec8:	897b      	ldrh	r3, [r7, #10]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_GetDescriptor+0x390>
    {
      len = MIN(len, req->wLength);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	bf28      	it	cs
 8005ed8:	4613      	movcs	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9fd 	bl	80062e4 <USBD_CtlSendData>
 8005eea:	e009      	b.n	8005f00 <USBD_GetDescriptor+0x3a4>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9e7 	bl	80062c2 <USBD_CtlError>
 8005ef4:	e004      	b.n	8005f00 <USBD_GetDescriptor+0x3a4>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa31 	bl	800635e <USBD_CtlSendStatus>
 8005efc:	e000      	b.n	8005f00 <USBD_GetDescriptor+0x3a4>
    return;
 8005efe:	bf00      	nop
  }
}
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop

08005f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	889b      	ldrh	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d131      	bne.n	8005f7e <USBD_SetAddress+0x76>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12d      	bne.n	8005f7e <USBD_SetAddress+0x76>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	885b      	ldrh	r3, [r3, #2]
 8005f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f28:	d829      	bhi.n	8005f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d104      	bne.n	8005f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9bc 	bl	80062c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	e01d      	b.n	8005f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7bfa      	ldrb	r2, [r7, #15]
 8005f50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff f8a3 	bl	80050a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9fd 	bl	800635e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f72:	e009      	b.n	8005f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	e004      	b.n	8005f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f99e 	bl	80062c2 <USBD_CtlError>
  }
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	885b      	ldrh	r3, [r3, #2]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d905      	bls.n	8005fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f985 	bl	80062c2 <USBD_CtlError>
    return USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e08c      	b.n	80060d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d002      	beq.n	8005fce <USBD_SetConfig+0x3e>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d029      	beq.n	8006020 <USBD_SetConfig+0x90>
 8005fcc:	e075      	b.n	80060ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fce:	4b44      	ldr	r3, [pc, #272]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fd6:	4b42      	ldr	r3, [pc, #264]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80060e0 <USBD_SetConfig+0x150>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff f892 	bl	8005110 <USBD_SetClassConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f962 	bl	80062c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006006:	e065      	b.n	80060d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9a8 	bl	800635e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2203      	movs	r2, #3
 8006012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006016:	e05d      	b.n	80060d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f9a0 	bl	800635e <USBD_CtlSendStatus>
      break;
 800601e:	e059      	b.n	80060d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006020:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d112      	bne.n	800604e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006030:	4b2b      	ldr	r3, [pc, #172]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800603a:	4b29      	ldr	r3, [pc, #164]	@ (80060e0 <USBD_SetConfig+0x150>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff f881 	bl	8005148 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f989 	bl	800635e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800604c:	e042      	b.n	80060d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800604e:	4b24      	ldr	r3, [pc, #144]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d02a      	beq.n	80060b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff f86f 	bl	8005148 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800606a:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <USBD_SetConfig+0x150>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006074:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <USBD_SetConfig+0x150>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff f848 	bl	8005110 <USBD_SetClassConfig>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f918 	bl	80062c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff f854 	bl	8005148 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80060a8:	e014      	b.n	80060d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f957 	bl	800635e <USBD_CtlSendStatus>
      break;
 80060b0:	e010      	b.n	80060d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f953 	bl	800635e <USBD_CtlSendStatus>
      break;
 80060b8:	e00c      	b.n	80060d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f900 	bl	80062c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060c2:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <USBD_SetConfig+0x150>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f83d 	bl	8005148 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060ce:	2303      	movs	r3, #3
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	bf00      	nop
  }

  return ret;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	2000030c 	.word	0x2000030c

080060e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d004      	beq.n	8006100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8e2 	bl	80062c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060fe:	e023      	b.n	8006148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	dc02      	bgt.n	8006112 <USBD_GetConfig+0x2e>
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc03      	bgt.n	8006118 <USBD_GetConfig+0x34>
 8006110:	e015      	b.n	800613e <USBD_GetConfig+0x5a>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d00b      	beq.n	800612e <USBD_GetConfig+0x4a>
 8006116:	e012      	b.n	800613e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3308      	adds	r3, #8
 8006122:	2201      	movs	r2, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8dc 	bl	80062e4 <USBD_CtlSendData>
        break;
 800612c:	e00c      	b.n	8006148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	2201      	movs	r2, #1
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f8d4 	bl	80062e4 <USBD_CtlSendData>
        break;
 800613c:	e004      	b.n	8006148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8be 	bl	80062c2 <USBD_CtlError>
        break;
 8006146:	bf00      	nop
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	2b02      	cmp	r3, #2
 8006166:	d81e      	bhi.n	80061a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d004      	beq.n	800617a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8a5 	bl	80062c2 <USBD_CtlError>
        break;
 8006178:	e01a      	b.n	80061b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f043 0202 	orr.w	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	330c      	adds	r3, #12
 800619a:	2202      	movs	r2, #2
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8a0 	bl	80062e4 <USBD_CtlSendData>
      break;
 80061a4:	e004      	b.n	80061b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f88a 	bl	80062c2 <USBD_CtlError>
      break;
 80061ae:	bf00      	nop
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f8c3 	bl	800635e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061d8:	e013      	b.n	8006202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	885b      	ldrh	r3, [r3, #2]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d10b      	bne.n	80061fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	889b      	ldrh	r3, [r3, #4]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8b3 	bl	800635e <USBD_CtlSendStatus>
}
 80061f8:	e003      	b.n	8006202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f860 	bl	80062c2 <USBD_CtlError>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	2b02      	cmp	r3, #2
 8006220:	d80b      	bhi.n	800623a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	885b      	ldrh	r3, [r3, #2]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10c      	bne.n	8006244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f893 	bl	800635e <USBD_CtlSendStatus>
      }
      break;
 8006238:	e004      	b.n	8006244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f840 	bl	80062c2 <USBD_CtlError>
      break;
 8006242:	e000      	b.n	8006246 <USBD_ClrFeature+0x3c>
      break;
 8006244:	bf00      	nop
  }
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff f9d5 	bl	8005628 <SWAPBYTE>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff f9c8 	bl	8005628 <SWAPBYTE>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff f9bb 	bl	8005628 <SWAPBYTE>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	80da      	strh	r2, [r3, #6]
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062cc:	2180      	movs	r1, #128	@ 0x80
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fe fec1 	bl	8005056 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062d4:	2100      	movs	r1, #0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fe febd 	bl	8005056 <USBD_LL_StallEP>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	2100      	movs	r1, #0
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7fe fed7 	bl	80050be <USBD_LL_Transmit>

  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	2100      	movs	r1, #0
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fe fec6 	bl	80050be <USBD_LL_Transmit>

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	2100      	movs	r1, #0
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7fe fec4 	bl	80050dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2204      	movs	r2, #4
 800636a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800636e:	2300      	movs	r3, #0
 8006370:	2200      	movs	r2, #0
 8006372:	2100      	movs	r1, #0
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fe fea2 	bl	80050be <USBD_LL_Transmit>

  return USBD_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2205      	movs	r2, #5
 8006390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006394:	2300      	movs	r3, #0
 8006396:	2200      	movs	r2, #0
 8006398:	2100      	movs	r1, #0
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe fe9e 	bl	80050dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <memset>:
 80063aa:	4402      	add	r2, r0
 80063ac:	4603      	mov	r3, r0
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d100      	bne.n	80063b4 <memset+0xa>
 80063b2:	4770      	bx	lr
 80063b4:	f803 1b01 	strb.w	r1, [r3], #1
 80063b8:	e7f9      	b.n	80063ae <memset+0x4>
	...

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4d0d      	ldr	r5, [pc, #52]	@ (80063f4 <__libc_init_array+0x38>)
 80063c0:	2600      	movs	r6, #0
 80063c2:	4c0d      	ldr	r4, [pc, #52]	@ (80063f8 <__libc_init_array+0x3c>)
 80063c4:	1b64      	subs	r4, r4, r5
 80063c6:	10a4      	asrs	r4, r4, #2
 80063c8:	42a6      	cmp	r6, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	4d0b      	ldr	r5, [pc, #44]	@ (80063fc <__libc_init_array+0x40>)
 80063ce:	2600      	movs	r6, #0
 80063d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006400 <__libc_init_array+0x44>)
 80063d2:	f000 f817 	bl	8006404 <_init>
 80063d6:	1b64      	subs	r4, r4, r5
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	42a6      	cmp	r6, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e4:	3601      	adds	r6, #1
 80063e6:	4798      	blx	r3
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ee:	3601      	adds	r6, #1
 80063f0:	4798      	blx	r3
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	0800642c 	.word	0x0800642c
 80063f8:	0800642c 	.word	0x0800642c
 80063fc:	0800642c 	.word	0x0800642c
 8006400:	08006430 	.word	0x08006430

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
