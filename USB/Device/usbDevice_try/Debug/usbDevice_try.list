
usbDevice_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a668  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800a8c0  0800a8c0  0000b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa18  0800aa18  0000c19c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa18  0800aa18  0000c19c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa18  0800aa18  0000c19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0000ba18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0000ba1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  0800aa20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  2000019c  0800abbc  0000c19c  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  20000be4  0800abbc  0000cbe4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c19c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c86  00000000  00000000  0000c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003208  00000000  00000000  0001ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00022060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00022e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dfe  00000000  00000000  00023895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001367c  00000000  00000000  00045693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c376d  00000000  00000000  00058d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c47c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  0011c4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00120420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000019c 	.word	0x2000019c
 8000274:	00000000 	.word	0x00000000
 8000278:	0800a8a8 	.word	0x0800a8a8

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001a0 	.word	0x200001a0
 8000294:	0800a8a8 	.word	0x0800a8a8

08000298 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	hid_report_buffer[0] = 0;
 800029c:	4b26      	ldr	r3, [pc, #152]	@ (8000338 <main+0xa0>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	hid_report_buffer[1] = 100;
 80002a2:	4b25      	ldr	r3, [pc, #148]	@ (8000338 <main+0xa0>)
 80002a4:	2264      	movs	r2, #100	@ 0x64
 80002a6:	705a      	strb	r2, [r3, #1]
	hid_report_buffer[2] = 0;
 80002a8:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <main+0xa0>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	709a      	strb	r2, [r3, #2]
	hid_report_buffer[3] = 0;
 80002ae:	4b22      	ldr	r3, [pc, #136]	@ (8000338 <main+0xa0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	70da      	strb	r2, [r3, #3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002b4:	f000 faf6 	bl	80008a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002b8:	f000 f84e 	bl	8000358 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002bc:	f000 f8ea 	bl	8000494 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize the USB Device Library */
	if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002c0:	2200      	movs	r2, #0
 80002c2:	491e      	ldr	r1, [pc, #120]	@ (800033c <main+0xa4>)
 80002c4:	481e      	ldr	r0, [pc, #120]	@ (8000340 <main+0xa8>)
 80002c6:	f007 fe89 	bl	8007fdc <USBD_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x3c>
		Error_Handler();
 80002d0:	f000 f91e 	bl	8000510 <Error_Handler>
//	/* Register the HID Class */
//	if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_HID_CLASS, CLASS_TYPE_HID, &HID_EpAdd_Inst) != USBD_OK)
//		Error_Handler();

	/* Store the HID Class */
	CDC_InstID = hUsbDeviceFS.classId;
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <main+0xa8>)
 80002d6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <main+0xac>)
 80002de:	701a      	strb	r2, [r3, #0]

	/* Register CDC Class First Instance */
	if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 80002e0:	4b19      	ldr	r3, [pc, #100]	@ (8000348 <main+0xb0>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	4919      	ldr	r1, [pc, #100]	@ (800034c <main+0xb4>)
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <main+0xa8>)
 80002e8:	f007 fed6 	bl	8008098 <USBD_RegisterClassComposite>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x5e>
		Error_Handler();
 80002f2:	f000 f90d 	bl	8000510 <Error_Handler>

	/* Add CDC Interface Class */
	if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	4811      	ldr	r0, [pc, #68]	@ (8000340 <main+0xa8>)
 80002fc:	f007 fc20 	bl	8007b40 <USBD_CMPSIT_SetClassID>
 8000300:	4603      	mov	r3, r0
 8000302:	2bff      	cmp	r3, #255	@ 0xff
 8000304:	d003      	beq.n	800030e <main+0x76>
	{
		USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 8000306:	4912      	ldr	r1, [pc, #72]	@ (8000350 <main+0xb8>)
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <main+0xa8>)
 800030a:	f006 fc8f 	bl	8006c2c <USBD_CDC_RegisterInterface>
	}

	USBD_Start(&hUsbDeviceFS);
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <main+0xa8>)
 8000310:	f007 ff2a 	bl	8008168 <USBD_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000314:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000318:	480e      	ldr	r0, [pc, #56]	@ (8000354 <main+0xbc>)
 800031a:	f000 fe87 	bl	800102c <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	2b01      	cmp	r3, #1
 8000322:	d1f7      	bne.n	8000314 <main+0x7c>
		{
			//USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, 4, HID_InstID);
			USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <main+0xac>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <main+0xa8>)
 800032c:	f006 fcd8 	bl	8006ce0 <USBD_CDC_TransmitPacket>
			HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	@ 0x64
 8000332:	f000 fb75 	bl	8000a20 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000336:	e7ed      	b.n	8000314 <main+0x7c>
 8000338:	200007d8 	.word	0x200007d8
 800033c:	200000f0 	.word	0x200000f0
 8000340:	20000498 	.word	0x20000498
 8000344:	200007dc 	.word	0x200007dc
 8000348:	20000000 	.word	0x20000000
 800034c:	20000010 	.word	0x20000010
 8000350:	2000004c 	.word	0x2000004c
 8000354:	42020800 	.word	0x42020800

08000358 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b09c      	sub	sp, #112	@ 0x70
 800035c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0320 	add.w	r3, r7, #32
 8000362:	2250      	movs	r2, #80	@ 0x50
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f009 fc3f 	bl	8009bea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
 800037c:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800037e:	4b2b      	ldr	r3, [pc, #172]	@ (800042c <SystemClock_Config+0xd4>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	4a2a      	ldr	r2, [pc, #168]	@ (800042c <SystemClock_Config+0xd4>)
 8000384:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000388:	6113      	str	r3, [r2, #16]
 800038a:	4b28      	ldr	r3, [pc, #160]	@ (800042c <SystemClock_Config+0xd4>)
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000396:	bf00      	nop
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <SystemClock_Config+0xd4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0308 	and.w	r3, r3, #8
 80003a0:	2b08      	cmp	r3, #8
 80003a2:	d1f9      	bne.n	8000398 <SystemClock_Config+0x40>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003a4:	2330      	movs	r3, #48	@ 0x30
 80003a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003b4:	2320      	movs	r3, #32
 80003b6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b8:	2302      	movs	r3, #2
 80003ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80003bc:	2302      	movs	r3, #2
 80003be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 125;
 80003c4:	237d      	movs	r3, #125	@ 0x7d
 80003c6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80003cc:	2302      	movs	r3, #2
 80003ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80003d0:	2302      	movs	r3, #2
 80003d2:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80003d4:	2308      	movs	r3, #8
 80003d6:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80003d8:	2300      	movs	r3, #0
 80003da:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0320 	add.w	r3, r7, #32
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 fafb 	bl	80029e0 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80003f0:	f000 f88e 	bl	8000510 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	231f      	movs	r3, #31
 80003f6:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2303      	movs	r3, #3
 80003fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	2105      	movs	r1, #5
 8000412:	4618      	mov	r0, r3
 8000414:	f002 ff1c 	bl	8003250 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800041e:	f000 f877 	bl	8000510 <Error_Handler>
	}
}
 8000422:	bf00      	nop
 8000424:	3770      	adds	r7, #112	@ 0x70
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	44020800 	.word	0x44020800

08000430 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
void MX_USB_PCD_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000436:	4a16      	ldr	r2, [pc, #88]	@ (8000490 <MX_USB_PCD_Init+0x60>)
 8000438:	601a      	str	r2, [r3, #0]
	hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800043a:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 800043c:	2208      	movs	r2, #8
 800043e:	711a      	strb	r2, [r3, #4]
	hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000442:	2202      	movs	r2, #2
 8000444:	71da      	strb	r2, [r3, #7]
	hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000446:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000448:	2202      	movs	r2, #2
 800044a:	725a      	strb	r2, [r3, #9]
	hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 800044e:	2200      	movs	r2, #0
 8000450:	729a      	strb	r2, [r3, #10]
	hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000454:	2200      	movs	r2, #0
 8000456:	72da      	strb	r2, [r3, #11]
	hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 800045a:	2200      	movs	r2, #0
 800045c:	731a      	strb	r2, [r3, #12]
	hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000460:	2200      	movs	r2, #0
 8000462:	735a      	strb	r2, [r3, #13]
	hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000466:	2200      	movs	r2, #0
 8000468:	739a      	strb	r2, [r3, #14]
	hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 800046c:	2200      	movs	r2, #0
 800046e:	73da      	strb	r2, [r3, #15]
	hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000472:	2200      	movs	r2, #0
 8000474:	741a      	strb	r2, [r3, #16]
	if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_USB_PCD_Init+0x5c>)
 8000478:	f000 fe53 	bl	8001122 <HAL_PCD_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USB_PCD_Init+0x56>
	{
		Error_Handler();
 8000482:	f000 f845 	bl	8000510 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200001b8 	.word	0x200001b8
 8000490:	40016000 	.word	0x40016000

08000494 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b0:	4a15      	ldr	r2, [pc, #84]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_GPIO_Init+0x74>)
 80004da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	4804      	ldr	r0, [pc, #16]	@ (800050c <MX_GPIO_Init+0x78>)
 80004fc:	f000 fc44 	bl	8000d88 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	44020c00 	.word	0x44020c00
 800050c:	42020800 	.word	0x42020800

08000510 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <Error_Handler+0x8>

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0a6      	sub	sp, #152	@ 0x98
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2288      	movs	r2, #136	@ 0x88
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f009 fb54 	bl	8009bea <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <HAL_PCD_MspInit+0x7c>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d129      	bne.n	80005a0 <HAL_PCD_MspInit+0x74>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800054c:	f04f 0200 	mov.w	r2, #0
 8000550:	f04f 0310 	mov.w	r3, #16
 8000554:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000558:	2330      	movs	r3, #48	@ 0x30
 800055a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f974 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 800056e:	f7ff ffcf 	bl	8000510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <HAL_PCD_MspInit+0x80>)
 8000574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000578:	4a0c      	ldr	r2, [pc, #48]	@ (80005ac <HAL_PCD_MspInit+0x80>)
 800057a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800057e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <HAL_PCD_MspInit+0x80>)
 8000584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000588:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2100      	movs	r1, #0
 8000594:	204a      	movs	r0, #74	@ 0x4a
 8000596:	f000 fb1f 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800059a:	204a      	movs	r0, #74	@ 0x4a
 800059c:	f000 fb36 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3798      	adds	r7, #152	@ 0x98
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40016000 	.word	0x40016000
 80005ac:	44020c00 	.word	0x44020c00

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000606:	f000 f9eb 	bl	80009e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <USB_DRD_FS_IRQHandler+0x10>)
 8000616:	f000 fe77 	bl	8001308 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200001b8 	.word	0x200001b8

08000624 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e00a      	b.n	800064c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000636:	f3af 8000 	nop.w
 800063a:	4601      	mov	r1, r0
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	60ba      	str	r2, [r7, #8]
 8000642:	b2ca      	uxtb	r2, r1
 8000644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dbf0      	blt.n	8000636 <_read+0x12>
  }

  return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e009      	b.n	8000684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf1      	blt.n	8000670 <_write+0x12>
  }
  return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_close>:

int _close(int file)
{
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006be:	605a      	str	r2, [r3, #4]
  return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <_isatty>:

int _isatty(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	@ (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f009 faaa 	bl	8009c88 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <_sbrk+0x64>)
 8000750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20008000 	.word	0x20008000
 8000760:	00000800 	.word	0x00000800
 8000764:	200007e0 	.word	0x200007e0
 8000768:	20000be8 	.word	0x20000be8

0800076c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000772:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <SystemInit+0xc8>)
 8000774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000778:	4a2e      	ldr	r2, [pc, #184]	@ (8000834 <SystemInit+0xc8>)
 800077a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800077e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <SystemInit+0xcc>)
 8000784:	2201      	movs	r2, #1
 8000786:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000788:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <SystemInit+0xcc>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800078e:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <SystemInit+0xcc>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <SystemInit+0xcc>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4927      	ldr	r1, [pc, #156]	@ (8000838 <SystemInit+0xcc>)
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <SystemInit+0xd0>)
 800079c:	4013      	ands	r3, r2
 800079e:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemInit+0xcc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <SystemInit+0xcc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <SystemInit+0xcc>)
 80007ae:	4a24      	ldr	r2, [pc, #144]	@ (8000840 <SystemInit+0xd4>)
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <SystemInit+0xcc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemInit+0xcc>)
 80007ba:	4a21      	ldr	r2, [pc, #132]	@ (8000840 <SystemInit+0xd4>)
 80007bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <SystemInit+0xcc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <SystemInit+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <SystemInit+0xcc>)
 80007ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <SystemInit+0xcc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <SystemInit+0xc8>)
 80007d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007dc:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <SystemInit+0xd8>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80007e6:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80007ee:	d003      	beq.n	80007f8 <SystemInit+0x8c>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80007f6:	d117      	bne.n	8000828 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <SystemInit+0xd8>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d005      	beq.n	8000810 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <SystemInit+0xd8>)
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <SystemInit+0xdc>)
 8000808:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <SystemInit+0xd8>)
 800080c:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <SystemInit+0xe0>)
 800080e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <SystemInit+0xd8>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <SystemInit+0xd8>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <SystemInit+0xd8>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <SystemInit+0xd8>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	61d3      	str	r3, [r2, #28]
  }
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	44020c00 	.word	0x44020c00
 800083c:	fae2eae3 	.word	0xfae2eae3
 8000840:	01010280 	.word	0x01010280
 8000844:	40022000 	.word	0x40022000
 8000848:	08192a3b 	.word	0x08192a3b
 800084c:	4c5d6e7f 	.word	0x4c5d6e7f

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000854:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000856:	e003      	b.n	8000860 <LoopCopyDataInit>

08000858 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800085a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800085c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800085e:	3104      	adds	r1, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000864:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000866:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000868:	d3f6      	bcc.n	8000858 <CopyDataInit>
	ldr	r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <LoopForever+0x12>)
	b	LoopFillZerobss
 800086c:	e002      	b.n	8000874 <LoopFillZerobss>

0800086e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800086e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000870:	f842 3b04 	str.w	r3, [r2], #4

08000874 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <LoopForever+0x16>)
	cmp	r2, r3
 8000876:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000878:	d3f9      	bcc.n	800086e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087a:	f7ff ff77 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f009 fa09 	bl	8009c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fd09 	bl	8000298 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000888:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800088c:	0800aa20 	.word	0x0800aa20
	ldr	r0, =_sdata
 8000890:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000894:	2000019c 	.word	0x2000019c
	ldr	r2, =_sbss
 8000898:	2000019c 	.word	0x2000019c
	ldr	r3, = _ebss
 800089c:	20000be4 	.word	0x20000be4

080008a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f98a 	bl	8000bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008ae:	f002 fe87 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_Init+0x44>)
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	f003 030f 	and.w	r3, r3, #15
 80008bc:	490b      	ldr	r1, [pc, #44]	@ (80008ec <HAL_Init+0x48>)
 80008be:	5ccb      	ldrb	r3, [r1, r3]
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <HAL_Init+0x4c>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f000 f9cf 	bl	8000c6c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f810 	bl	80008f4 <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e002      	b.n	80008e4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008de:	f7ff fe1d 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	44020c00 	.word	0x44020c00
 80008ec:	0800a9d4 	.word	0x0800a9d4
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <HAL_InitTick+0xdc>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e05c      	b.n	80009c6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800090c:	4b31      	ldr	r3, [pc, #196]	@ (80009d4 <HAL_InitTick+0xe0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	2b04      	cmp	r3, #4
 8000916:	d10c      	bne.n	8000932 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000918:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <HAL_InitTick+0xe4>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <HAL_InitTick+0xdc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e037      	b.n	80009a2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000932:	f000 f9f3 	bl	8000d1c <HAL_SYSTICK_GetCLKSourceConfig>
 8000936:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d023      	beq.n	8000986 <HAL_InitTick+0x92>
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d82d      	bhi.n	80009a0 <HAL_InitTick+0xac>
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <HAL_InitTick+0x5e>
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00d      	beq.n	800096c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000950:	e026      	b.n	80009a0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <HAL_InitTick+0xe4>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <HAL_InitTick+0xdc>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000960:	fbb3 f3f1 	udiv	r3, r3, r1
 8000964:	fbb2 f3f3 	udiv	r3, r2, r3
 8000968:	60fb      	str	r3, [r7, #12]
        break;
 800096a:	e01a      	b.n	80009a2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <HAL_InitTick+0xdc>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	fbb3 f3f2 	udiv	r3, r3, r2
 800097a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	60fb      	str	r3, [r7, #12]
        break;
 8000984:	e00d      	b.n	80009a2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_InitTick+0xdc>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000990:	fbb3 f3f2 	udiv	r3, r3, r2
 8000994:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	60fb      	str	r3, [r7, #12]
        break;
 800099e:	e000      	b.n	80009a2 <HAL_InitTick+0xae>
        break;
 80009a0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f940 	bl	8000c28 <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e009      	b.n	80009c6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ba:	f000 f90d 	bl	8000bd8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80009be:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <HAL_InitTick+0xe8>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000000c 	.word	0x2000000c
 80009d4:	e000e010 	.word	0xe000e010
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000008 	.word	0x20000008

080009e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_IncTick+0x20>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <HAL_IncTick+0x24>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <HAL_IncTick+0x24>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000000c 	.word	0x2000000c
 8000a04:	200007e4 	.word	0x200007e4

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_GetTick+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200007e4 	.word	0x200007e4

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff ffee 	bl	8000a08 <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_Delay+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffde 	bl	8000a08 <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000000c 	.word	0x2000000c

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	@ (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	@ (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	@ (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	@ 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	@ 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff4c 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be6:	f7ff ff63 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f7ff ffb3 	bl	8000b5c <NVIC_EncodePriority>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff82 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff56 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00d      	b.n	8000c5a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <HAL_SYSTICK_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <HAL_SYSTICK_Config+0x40>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_SYSTICK_Config+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <HAL_SYSTICK_Config+0x40>)
 8000c52:	f043 0303 	orr.w	r3, r3, #3
 8000c56:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d844      	bhi.n	8000d04 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000ca3 	.word	0x08000ca3
 8000c84:	08000cc1 	.word	0x08000cc1
 8000c88:	08000ce3 	.word	0x08000ce3
 8000c8c:	08000d05 	.word	0x08000d05
 8000c90:	08000c95 	.word	0x08000c95
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6013      	str	r3, [r2, #0]
      break;
 8000ca0:	e031      	b.n	8000d06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cb4:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cb6:	f023 030c 	bic.w	r3, r3, #12
 8000cba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000cbe:	e022      	b.n	8000d06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a13      	ldr	r2, [pc, #76]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cc6:	f023 0304 	bic.w	r3, r3, #4
 8000cca:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000ccc:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cd2:	f023 030c 	bic.w	r3, r3, #12
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ce0:	e011      	b.n	8000d06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ce8:	f023 0304 	bic.w	r3, r3, #4
 8000cec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000cf4:	f023 030c 	bic.w	r3, r3, #12
 8000cf8:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d02:	e000      	b.n	8000d06 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000d04:	bf00      	nop
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010
 8000d18:	44020c00 	.word	0x44020c00

08000d1c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	e01e      	b.n	8000d72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000d36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d00f      	beq.n	8000d66 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d80f      	bhi.n	8000d6c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d003      	beq.n	8000d60 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000d58:	e008      	b.n	8000d6c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
        break;
 8000d5e:	e008      	b.n	8000d72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
        break;
 8000d64:	e005      	b.n	8000d72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000d66:	2302      	movs	r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
        break;
 8000d6a:	e002      	b.n	8000d72 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
        break;
 8000d70:	bf00      	nop
    }
  }
  return systick_source;
 8000d72:	687b      	ldr	r3, [r7, #4]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e010 	.word	0xe000e010
 8000d84:	44020c00 	.word	0x44020c00

08000d88 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d96:	e136      	b.n	8001006 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8128 	beq.w	8001000 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x38>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b12      	cmp	r3, #18
 8000dbe:	d125      	bne.n	8000e0c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	f003 020f 	and.w	r2, r3, #15
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	6979      	ldr	r1, [r7, #20]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d00b      	beq.n	8000e60 <HAL_GPIO_Init+0xd8>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d130      	bne.n	8000ec2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e96:	2201      	movs	r2, #1
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 0201 	and.w	r2, r3, #1
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d017      	beq.n	8000efa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d07c      	beq.n	8001000 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f06:	4a47      	ldr	r2, [pc, #284]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3318      	adds	r3, #24
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	4013      	ands	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0a9a      	lsrs	r2, r3, #10
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001028 <HAL_GPIO_Init+0x2a0>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f42:	4938      	ldr	r1, [pc, #224]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3318      	adds	r3, #24
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f50:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4013      	ands	r3, r2
 8000f88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000faa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_GPIO_Init+0x29c>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	3301      	adds	r3, #1
 8001004:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f aec1 	bne.w	8000d98 <HAL_GPIO_Init+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	44022000 	.word	0x44022000
 8001028:	002f7f7f 	.word	0x002f7f7f

0800102c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001068:	230a      	movs	r3, #10
 800106a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800106c:	e002      	b.n	8001074 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3b01      	subs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001082:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	0c1b      	lsrs	r3, r3, #16
 800108a:	b29b      	uxth	r3, r3
 800108c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001090:	b29b      	uxth	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800109e:	b480      	push	{r7}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80010aa:	230a      	movs	r3, #10
 80010ac:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80010ae:	e002      	b.n	80010b6 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f9      	bne.n	80010b0 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010d2:	b29b      	uxth	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80010ec:	230a      	movs	r3, #10
 80010ee:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80010f0:	e002      	b.n	80010f8 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f9      	bne.n	80010f2 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001106:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	0c1b      	lsrs	r3, r3, #16
 800110e:	b29b      	uxth	r3, r3
 8001110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001114:	b29b      	uxth	r3, r3
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af02      	add	r7, sp, #8
 8001128:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0c3      	b.n	80012bc <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff f9ef 	bl	800052c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fa48 	bl	80045f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	e03f      	b.n	80011e6 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	440b      	add	r3, r1
 8001188:	3314      	adds	r3, #20
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3317      	adds	r3, #23
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	3324      	adds	r3, #36	@ 0x24
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	3328      	adds	r3, #40	@ 0x28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	3304      	adds	r3, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3ba      	bcc.n	8001166 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e044      	b.n	8001280 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	440b      	add	r3, r1
 8001204:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	440b      	add	r3, r1
 8001230:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3b5      	bcc.n	80011f6 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7c1a      	ldrb	r2, [r3, #16]
 8001292:	f88d 2000 	strb.w	r2, [sp]
 8001296:	3304      	adds	r3, #4
 8001298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129a:	f003 f9e1 	bl	8004660 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7b1b      	ldrb	r3, [r3, #12]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 fb64 	bl	8002982 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_Start+0x16>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e012      	b.n	8001300 <HAL_PCD_Start+0x3c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 f96e 	bl	80045c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 f81a 	bl	800632a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f005 f819 	bl	800634c <USB_ReadInterrupts>
 800131a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 faf0 	bl	800190c <PCD_EP_ISR_Handler>

    return;
 800132c:	e0de      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8001346:	400b      	ands	r3, r1
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f006 fc8d 	bl	8007c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001350:	2100      	movs	r1, #0
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f8e1 	bl	800151a <HAL_PCD_SetAddress>

    return;
 8001358:	e0c8      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8001372:	400b      	ands	r3, r1
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001376:	e0b9      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8001390:	400b      	ands	r3, r1
 8001392:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001394:	e0aa      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d029      	beq.n	80013f4 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0204 	bic.w	r2, r2, #4
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0208 	bic.w	r2, r2, #8
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80013d2:	2100      	movs	r1, #0
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f001 faf6 	bl	80029c6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f893 	bl	8001506 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80013ee:	400b      	ands	r3, r1
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80013f2:	e07b      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01c      	beq.n	8001438 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0208 	orr.w	r2, r2, #8
 800140c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 800141c:	400b      	ands	r3, r1
 800141e:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0204 	orr.w	r2, r2, #4
 800142e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f85e 	bl	80014f2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001436:	e059      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	2b00      	cmp	r3, #0
 8001440:	d033      	beq.n	80014aa <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001450:	400b      	ands	r3, r1
 8001452:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800145a:	2b00      	cmp	r3, #0
 800145c:	d121      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0204 	orr.w	r2, r2, #4
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0208 	orr.w	r2, r2, #8
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001498:	2101      	movs	r1, #1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 fa93 	bl	80029c6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80014a0:	e024      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f825 	bl	80014f2 <HAL_PCD_SuspendCallback>
    return;
 80014a8:	e020      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00c      	beq.n	80014ce <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80014c2:	400b      	ands	r3, r1
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f006 fbc1 	bl	8007c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014cc:	e00e      	b.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80014e6:	400b      	ands	r3, r1
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80014ea:	bf00      	nop
  }
}
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_PCD_SetAddress+0x1a>
 8001530:	2302      	movs	r3, #2
 8001532:	e012      	b.n	800155a <HAL_PCD_SetAddress+0x40>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f004 feda 	bl	8006304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4603      	mov	r3, r0
 8001572:	70fb      	strb	r3, [r7, #3]
 8001574:	460b      	mov	r3, r1
 8001576:	803b      	strh	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da0f      	bge.n	80015a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 0207 	and.w	r2, r3, #7
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	3310      	adds	r3, #16
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	3304      	adds	r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2201      	movs	r2, #1
 80015a4:	705a      	strb	r2, [r3, #1]
 80015a6:	e00f      	b.n	80015c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015d4:	883a      	ldrh	r2, [r7, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	78ba      	ldrb	r2, [r7, #2]
 80015de:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d102      	bne.n	80015ec <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_EP_Open+0x98>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e00e      	b.n	8001618 <HAL_PCD_EP_Open+0xb6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 f84d 	bl	80046a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8001616:	7afb      	ldrb	r3, [r7, #11]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800162c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da0f      	bge.n	8001654 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	f003 0207 	and.w	r2, r3, #7
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	3310      	adds	r3, #16
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	705a      	strb	r2, [r3, #1]
 8001652:	e00f      	b.n	8001674 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 0207 	and.w	r2, r3, #7
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	3304      	adds	r3, #4
 800166c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_EP_Close+0x6e>
 800168a:	2302      	movs	r3, #2
 800168c:	e00e      	b.n	80016ac <HAL_PCD_EP_Close+0x8c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fb63 	bl	8004d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	460b      	mov	r3, r1
 80016c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	f003 0207 	and.w	r2, r3, #7
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2200      	movs	r2, #0
 80016f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6979      	ldr	r1, [r7, #20]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fcb7 	bl	800507c <USB_EPStartXfer>

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0207 	and.w	r2, r3, #7
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	460b      	mov	r3, r1
 8001756:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	f003 0207 	and.w	r2, r3, #7
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	3310      	adds	r3, #16
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2201      	movs	r2, #1
 8001794:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	b2da      	uxtb	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fc67 	bl	800507c <USB_EPStartXfer>

  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	7912      	ldrb	r2, [r2, #4]
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e040      	b.n	8001858 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da0f      	bge.n	80017fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	f003 0207 	and.w	r2, r3, #7
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	3310      	adds	r3, #16
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	3304      	adds	r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	705a      	strb	r2, [r3, #1]
 80017fc:	e00d      	b.n	800181a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4413      	add	r3, r2
 8001810:	3304      	adds	r3, #4
 8001812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_PCD_EP_SetStall+0x82>
 8001836:	2302      	movs	r3, #2
 8001838:	e00e      	b.n	8001858 <HAL_PCD_EP_SetStall+0xa0>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68f9      	ldr	r1, [r7, #12]
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fc81 	bl	8006150 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	7912      	ldrb	r2, [r2, #4]
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e042      	b.n	8001904 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800187e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001882:	2b00      	cmp	r3, #0
 8001884:	da0f      	bge.n	80018a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	f003 0207 	and.w	r2, r3, #7
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	3310      	adds	r3, #16
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	3304      	adds	r3, #4
 800189c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	705a      	strb	r2, [r3, #1]
 80018a4:	e00f      	b.n	80018c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 0207 	and.w	r2, r3, #7
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_PCD_EP_ClrStall+0x86>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e00e      	b.n	8001904 <HAL_PCD_EP_ClrStall+0xa4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fc71 	bl	80061dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	@ 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001914:	e326      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800191e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 800192a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8124 	bne.w	8001b7c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d13e      	bne.n	80019bc <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b89      	ldr	r3, [pc, #548]	@ (8001b6c <PCD_EP_ISR_Handler+0x260>)
 8001946:	4013      	ands	r3, r2
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001954:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3314      	adds	r3, #20
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800195c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001974:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	441a      	add	r2, r3
 8001980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001982:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001984:	2100      	movs	r1, #0
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f006 f947 	bl	8007c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7c5b      	ldrb	r3, [r3, #17]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 82e6 	beq.w	8001f64 <PCD_EP_ISR_Handler+0x658>
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 82e1 	bne.w	8001f64 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7c5b      	ldrb	r3, [r3, #17]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	745a      	strb	r2, [r3, #17]
 80019ba:	e2d3      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019cc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80019ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d027      	beq.n	8001a26 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f7ff fb3b 	bl	800105c <PCD_GET_EP_RX_CNT>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80019f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f004 fd12 	bl	800642a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <PCD_EP_ISR_Handler+0x264>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a1c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 f8ce 	bl	8007bc0 <HAL_PCD_SetupStageCallback>
 8001a24:	e29e      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8001a26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f280 829a 	bge.w	8001f64 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <PCD_EP_ISR_Handler+0x264>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a46:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f7ff fb02 	bl	800105c <PCD_GET_EP_RX_CNT>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d019      	beq.n	8001a9c <PCD_EP_ISR_Handler+0x190>
 8001a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a76:	6959      	ldr	r1, [r3, #20]
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f004 fcd2 	bl	800642a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	441a      	add	r2, r3
 8001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f006 f8a4 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001aa4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 825a 	bne.w	8001f64 <PCD_EP_ISR_Handler+0x658>
 8001ab0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001ab2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001aba:	f000 8253 	beq.w	8001f64 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001abe:	4b2d      	ldr	r3, [pc, #180]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001ac4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8001ac8:	6053      	str	r3, [r2, #4]
 8001aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <PCD_EP_ISR_Handler+0x1d4>
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a27      	ldr	r2, [pc, #156]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001adc:	6053      	str	r3, [r2, #4]
 8001ade:	e02e      	b.n	8001b3e <PCD_EP_ISR_Handler+0x232>
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ae6:	d814      	bhi.n	8001b12 <PCD_EP_ISR_Handler+0x206>
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <PCD_EP_ISR_Handler+0x1f6>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	069b      	lsls	r3, r3, #26
 8001b0a:	491a      	ldr	r1, [pc, #104]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e015      	b.n	8001b3e <PCD_EP_ISR_Handler+0x232>
 8001b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <PCD_EP_ISR_Handler+0x220>
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	4313      	orrs	r3, r2
 8001b36:	4a0f      	ldr	r2, [pc, #60]	@ (8001b74 <PCD_EP_ISR_Handler+0x268>)
 8001b38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b3c:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <PCD_EP_ISR_Handler+0x26c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e1fb      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
 8001b6c:	07ff8f0f 	.word	0x07ff8f0f
 8001b70:	07ff0f8f 	.word	0x07ff0f8f
 8001b74:	40016400 	.word	0x40016400
 8001b78:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8001b8e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f280 80bd 	bge.w	8001d12 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b9e      	ldr	r3, [pc, #632]	@ (8001e24 <PCD_EP_ISR_Handler+0x518>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001bc2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bc4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d116      	bne.n	8001c12 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff fa34 	bl	800105c <PCD_GET_EP_RX_CNT>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8001bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d067      	beq.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c04:	6959      	ldr	r1, [r3, #20]
 8001c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c08:	88da      	ldrh	r2, [r3, #6]
 8001c0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c0c:	f004 fc0d 	bl	800642a <USB_ReadPMA>
 8001c10:	e05d      	b.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d108      	bne.n	8001c2c <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f9ad 	bl	8001f80 <HAL_PCD_EP_DB_Receive>
 8001c26:	4603      	mov	r3, r0
 8001c28:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c2a:	e050      	b.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e28 <PCD_EP_ISR_Handler+0x51c>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	441a      	add	r2, r3
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c5a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d016      	beq.n	8001ca2 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7ff fa0d 	bl	800109e <PCD_GET_EP_DBUF0_CNT>
 8001c84:	4603      	mov	r3, r0
 8001c86:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8001c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01f      	beq.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c94:	6959      	ldr	r1, [r3, #20]
 8001c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c98:	891a      	ldrh	r2, [r3, #8]
 8001c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c9c:	f004 fbc5 	bl	800642a <USB_ReadPMA>
 8001ca0:	e015      	b.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f7ff fa17 	bl	80010e0 <PCD_GET_EP_DBUF1_CNT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8001cb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc2:	6959      	ldr	r1, [r3, #20]
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	895a      	ldrh	r2, [r3, #10]
 8001cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cca:	f004 fbae 	bl	800642a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cd4:	441a      	add	r2, r3
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce0:	441a      	add	r2, r3
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <PCD_EP_ISR_Handler+0x3ec>
 8001cee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d206      	bcs.n	8001d06 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 ff70 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
 8001d04:	e005      	b.n	8001d12 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 f9b5 	bl	800507c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8001d12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8123 	beq.w	8001f64 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d1e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <PCD_EP_ISR_Handler+0x520>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d5e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	f040 80b8 	bne.w	8001eda <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a9 	beq.w	8001ecc <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d055      	beq.n	8001e30 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d124      	bne.n	8001dd6 <PCD_EP_ISR_Handler+0x4ca>
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001da6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001daa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001dce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e07a      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5c0>
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d176      	bne.n	8001ecc <PCD_EP_ISR_Handler+0x5c0>
 8001dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001de8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001df8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8001e0a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e054      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5c0>
 8001e22:	bf00      	nop
 8001e24:	07ff0f8f 	.word	0x07ff0f8f
 8001e28:	07ff8f8f 	.word	0x07ff8f8f
 8001e2c:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d124      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x576>
 8001e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e56:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e024      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5c0>
 8001e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d120      	bne.n	8001ecc <PCD_EP_ISR_Handler+0x5c0>
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8001eb6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8001eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ec8:	6852      	ldr	r2, [r2, #4]
 8001eca:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f005 fea1 	bl	8007c1a <HAL_PCD_DataInStageCallback>
 8001ed8:	e044      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001eda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d139      	bne.n	8001f58 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001eee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efc:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8001efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d906      	bls.n	8001f16 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8001f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	e002      	b.n	8001f1c <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f005 fe75 	bl	8007c1a <HAL_PCD_DataInStageCallback>
 8001f30:	e018      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f38:	441a      	add	r2, r3
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f44:	441a      	add	r2, r3
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 f893 	bl	800507c <USB_EPStartXfer>
 8001f56:	e005      	b.n	8001f64 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f58:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8e8 	bl	8002134 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f acd1 	bne.w	8001916 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3738      	adds	r7, #56	@ 0x38
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop

08001f80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d062      	beq.n	800205e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f7ff f87b 	bl	800109e <PCD_GET_EP_DBUF0_CNT>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	8bfb      	ldrh	r3, [r7, #30]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d306      	bcc.n	8001fc4 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	8bfb      	ldrh	r3, [r7, #30]
 8001fbc:	1ad2      	subs	r2, r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	619a      	str	r2, [r3, #24]
 8001fc2:	e002      	b.n	8001fca <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11b      	bne.n	800200a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b52      	ldr	r3, [pc, #328]	@ (800212c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002008:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b42      	ldr	r3, [pc, #264]	@ (8002130 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002026:	4013      	ands	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800203e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002042:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8002044:	8bfb      	ldrh	r3, [r7, #30]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06b      	beq.n	8002122 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6959      	ldr	r1, [r3, #20]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	891a      	ldrh	r2, [r3, #8]
 8002056:	8bfb      	ldrh	r3, [r7, #30]
 8002058:	f004 f9e7 	bl	800642a <USB_ReadPMA>
 800205c:	e061      	b.n	8002122 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7ff f839 	bl	80010e0 <PCD_GET_EP_DBUF1_CNT>
 800206e:	4603      	mov	r3, r0
 8002070:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	8bfb      	ldrh	r3, [r7, #30]
 8002078:	429a      	cmp	r2, r3
 800207a:	d306      	bcc.n	800208a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	8bfb      	ldrh	r3, [r7, #30]
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	e002      	b.n	8002090 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11b      	bne.n	80020d0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_PCD_EP_DB_Receive+0x1ac>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	441a      	add	r2, r3
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020ce:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d117      	bne.n	800210a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002104:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002108:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800210a:	8bfb      	ldrh	r3, [r7, #30]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	895a      	ldrh	r2, [r3, #10]
 800211c:	8bfb      	ldrh	r3, [r7, #30]
 800211e:	f004 f984 	bl	800642a <USB_ReadPMA>
    }
  }

  return count;
 8002122:	8bfb      	ldrh	r3, [r7, #30]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	@ 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	07ffbf8f 	.word	0x07ffbf8f
 8002130:	07ff8f8f 	.word	0x07ff8f8f

08002134 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	@ 0x38
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 81d5 	beq.w	80024f8 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f7fe ffa0 	bl	800109e <PCD_GET_EP_DBUF0_CNT>
 800215e:	4603      	mov	r3, r0
 8002160:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	429a      	cmp	r2, r3
 800216a:	d906      	bls.n	800217a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	8bfb      	ldrh	r3, [r7, #30]
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	619a      	str	r2, [r3, #24]
 8002178:	e002      	b.n	8002180 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 80c1 	bne.w	800230c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d124      	bne.n	80021dc <HAL_PCD_EP_DB_Transmit+0xa8>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800219c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021b0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e024      	b.n	8002226 <HAL_PCD_EP_DB_Transmit+0xf2>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	785b      	ldrb	r3, [r3, #1]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d120      	bne.n	8002226 <HAL_PCD_EP_DB_Transmit+0xf2>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002202:	b292      	uxth	r2, r2
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002210:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800221e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d124      	bne.n	8002278 <HAL_PCD_EP_DB_Transmit+0x144>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002238:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002248:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800224c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800225c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800226c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002270:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	e024      	b.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x18e>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d120      	bne.n	80022c2 <HAL_PCD_EP_DB_Transmit+0x18e>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800228a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800229a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800229e:	b292      	uxth	r2, r2
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80022ac:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f005 fca6 	bl	8007c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 82e5 	beq.w	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002524 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e2cb      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d017      	beq.n	8002346 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b7f      	ldr	r3, [pc, #508]	@ (8002524 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8002328:	4013      	ands	r3, r2
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002344:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 82a9 	bne.w	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	8bfb      	ldrh	r3, [r7, #30]
 8002358:	441a      	add	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	8bfb      	ldrh	r3, [r7, #30]
 8002364:	441a      	add	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6a1a      	ldr	r2, [r3, #32]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	429a      	cmp	r2, r3
 8002374:	d309      	bcc.n	800238a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	1ad2      	subs	r2, r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	e014      	b.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8002392:	8bfb      	ldrh	r3, [r7, #30]
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800239e:	e009      	b.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d16a      	bne.n	8002492 <HAL_PCD_EP_DB_Transmit+0x35e>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023da:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d112      	bne.n	800240c <HAL_PCD_EP_DB_Transmit+0x2d8>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002404:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e06a      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002410:	d81e      	bhi.n	8002450 <HAL_PCD_EP_DB_Transmit+0x31c>
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	085b      	lsrs	r3, r3, #1
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	3301      	adds	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002432:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002436:	6819      	ldr	r1, [r3, #0]
 8002438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243a:	069a      	lsls	r2, r3, #26
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e048      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <HAL_PCD_EP_DB_Transmit+0x332>
 8002460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002462:	3b01      	subs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002470:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002478:	069b      	lsls	r3, r3, #26
 800247a:	431a      	orrs	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002486:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800248a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e027      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d123      	bne.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80024b8:	b292      	uxth	r2, r2
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	041a      	lsls	r2, r3, #16
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6959      	ldr	r1, [r3, #20]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	891a      	ldrh	r2, [r3, #8]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f003 ff39 	bl	8006368 <USB_WritePMA>
 80024f6:	e1d5      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f7fe fdec 	bl	80010e0 <PCD_GET_EP_DBUF1_CNT>
 8002508:	4603      	mov	r3, r0
 800250a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	8bfb      	ldrh	r3, [r7, #30]
 8002512:	429a      	cmp	r2, r3
 8002514:	d308      	bcc.n	8002528 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	8bfb      	ldrh	r3, [r7, #30]
 800251c:	1ad2      	subs	r2, r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	619a      	str	r2, [r3, #24]
 8002522:	e004      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x3fa>
 8002524:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80c1 	bne.w	80026ba <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d124      	bne.n	800258a <HAL_PCD_EP_DB_Transmit+0x456>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800254a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800255a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800255e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800256e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800257e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002582:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e024      	b.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d120      	bne.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800259c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025b0:	b292      	uxth	r2, r2
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80025be:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d124      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80025fa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800260a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800261a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800261e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	e024      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x53c>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d120      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x53c>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002638:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002648:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800264c:	b292      	uxth	r2, r2
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800265a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f005 facf 	bl	8007c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 810e 	bne.w	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b95      	ldr	r3, [pc, #596]	@ (80028f0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800269a:	4013      	ands	r3, r2
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	441a      	add	r2, r3
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e0f4      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d117      	bne.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b86      	ldr	r3, [pc, #536]	@ (80028f0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f2:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80d2 	bne.w	80028a4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	8bfb      	ldrh	r3, [r7, #30]
 8002706:	441a      	add	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	8bfb      	ldrh	r3, [r7, #30]
 8002712:	441a      	add	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d309      	bcc.n	8002738 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	1ad2      	subs	r2, r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	e014      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8002740:	8bfb      	ldrh	r3, [r7, #30]
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800274c:	e009      	b.n	8002762 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d16a      	bne.n	8002840 <HAL_PCD_EP_DB_Transmit+0x70c>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002788:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d112      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x686>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800279e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	e06a      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x75c>
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80027be:	d81e      	bhi.n	80027fe <HAL_PCD_EP_DB_Transmit+0x6ca>
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	069a      	lsls	r2, r3, #26
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	e048      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x75c>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3b01      	subs	r3, #1
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800281e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	431a      	orrs	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002838:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	e027      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x75c>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d123      	bne.n	8002890 <HAL_PCD_EP_DB_Transmit+0x75c>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002852:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002862:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002866:	b292      	uxth	r2, r2
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6959      	ldr	r1, [r3, #20]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	895a      	ldrh	r2, [r3, #10]
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f003 fd62 	bl	8006368 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028bc:	f083 0310 	eor.w	r3, r3, #16
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	f083 0320 	eor.w	r3, r3, #32
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	441a      	add	r2, r3
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3738      	adds	r7, #56	@ 0x38
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	07ff8f8f 	.word	0x07ff8f8f
 80028f4:	07ff8fbf 	.word	0x07ff8fbf

080028f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	4613      	mov	r3, r2
 8002908:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	f003 0207 	and.w	r2, r3, #7
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	3310      	adds	r3, #16
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e00a      	b.n	8002946 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	3304      	adds	r3, #4
 8002944:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002946:	893b      	ldrh	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	b29a      	uxth	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	80da      	strh	r2, [r3, #6]
 800295a:	e00b      	b.n	8002974 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2201      	movs	r2, #1
 8002960:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	b29a      	uxth	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f000 bc28 	b.w	8003244 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f4:	4b94      	ldr	r3, [pc, #592]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 0318 	and.w	r3, r3, #24
 80029fc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80029fe:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05b      	beq.n	8002acc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x46>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	2b18      	cmp	r3, #24
 8002a1e:	d114      	bne.n	8002a4a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d111      	bne.n	8002a4a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f000 bc08 	b.w	8003244 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002a34:	4b84      	ldr	r3, [pc, #528]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	4981      	ldr	r1, [pc, #516]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002a48:	e040      	b.n	8002acc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d023      	beq.n	8002a9a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a52:	4b7d      	ldr	r3, [pc, #500]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7c      	ldr	r2, [pc, #496]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fd ffd3 	bl	8000a08 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002a66:	f7fd ffcf 	bl	8000a08 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e3e5      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a78:	4b73      	ldr	r3, [pc, #460]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002a84:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	496d      	ldr	r1, [pc, #436]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	618b      	str	r3, [r1, #24]
 8002a98:	e018      	b.n	8002acc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fd ffaf 	bl	8000a08 <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002aae:	f7fd ffab 	bl	8000a08 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e3c1      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80a0 	beq.w	8002c1a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_OscConfig+0x10c>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b18      	cmp	r3, #24
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8092 	bne.w	8002c1a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e3a4      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x132>
 8002b04:	4b50      	ldr	r3, [pc, #320]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e058      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1e4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x160>
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b48      	ldr	r3, [pc, #288]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a47      	ldr	r2, [pc, #284]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a44      	ldr	r2, [pc, #272]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e041      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1e4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x190>
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b39      	ldr	r3, [pc, #228]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a38      	ldr	r2, [pc, #224]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e029      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1e4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b78:	d112      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1c0>
 8002b7a:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a32      	ldr	r2, [pc, #200]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e011      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1e4>
 8002ba0:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b26      	ldr	r3, [pc, #152]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a25      	ldr	r2, [pc, #148]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b23      	ldr	r3, [pc, #140]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002bbe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fd ff1c 	bl	8000a08 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002bd4:	f7fd ff18 	bl	8000a08 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e32e      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1f4>
 8002bf2:	e012      	b.n	8002c1a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fd ff08 	bl	8000a08 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002bfc:	f7fd ff04 	bl	8000a08 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e31a      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_RCC_OscConfig+0x268>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 809a 	beq.w	8002d5c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x25a>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b18      	cmp	r3, #24
 8002c32:	d149      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d146      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e2fe      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
 8002c46:	bf00      	nop
 8002c48:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002c52:	4b9a      	ldr	r3, [pc, #616]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0218 	and.w	r2, r3, #24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d014      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002c62:	4b96      	ldr	r3, [pc, #600]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 0218 	bic.w	r2, r3, #24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4993      	ldr	r1, [pc, #588]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002c74:	f000 fdd0 	bl	8003818 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c78:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <HAL_RCC_OscConfig+0x4e0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fe39 	bl	80008f4 <HAL_InitTick>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e2db      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fd febc 	bl	8000a08 <HAL_GetTick>
 8002c90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c94:	f7fd feb8 	bl	8000a08 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e2ce      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca6:	4b85      	ldr	r3, [pc, #532]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002cb2:	4b82      	ldr	r3, [pc, #520]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	497e      	ldr	r1, [pc, #504]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002cc6:	e049      	b.n	8002d5c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d02c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002cd0:	4b7a      	ldr	r3, [pc, #488]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0218 	bic.w	r2, r3, #24
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4977      	ldr	r1, [pc, #476]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002ce2:	4b76      	ldr	r3, [pc, #472]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a75      	ldr	r2, [pc, #468]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fd fe8b 	bl	8000a08 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002cf6:	f7fd fe87 	bl	8000a08 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e29d      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d08:	4b6c      	ldr	r3, [pc, #432]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002d14:	4b69      	ldr	r3, [pc, #420]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	4966      	ldr	r1, [pc, #408]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	610b      	str	r3, [r1, #16]
 8002d28:	e018      	b.n	8002d5c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2a:	4b64      	ldr	r3, [pc, #400]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a63      	ldr	r2, [pc, #396]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fd fe67 	bl	8000a08 <HAL_GetTick>
 8002d3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d3e:	f7fd fe63 	bl	8000a08 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e279      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d50:	4b5a      	ldr	r3, [pc, #360]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01c      	beq.n	8002daa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d70:	4b52      	ldr	r3, [pc, #328]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d76:	4a51      	ldr	r2, [pc, #324]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fd fe42 	bl	8000a08 <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d88:	f7fd fe3e 	bl	8000a08 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e254      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d9a:	4b48      	ldr	r3, [pc, #288]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCC_OscConfig+0x3a8>
 8002da8:	e01b      	b.n	8002de2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b44      	ldr	r3, [pc, #272]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db0:	4a42      	ldr	r2, [pc, #264]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002db2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fd fe25 	bl	8000a08 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002dc2:	f7fd fe21 	bl	8000a08 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e237      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80d2 	beq.w	8002f94 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002df0:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <HAL_RCC_OscConfig+0x4e4>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002dfc:	4b31      	ldr	r3, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x4e4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	4a30      	ldr	r2, [pc, #192]	@ (8002ec4 <HAL_RCC_OscConfig+0x4e4>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e08:	f7fd fdfe 	bl	8000a08 <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7fd fdfa 	bl	8000a08 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e210      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002e22:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_RCC_OscConfig+0x4e4>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_RCC_OscConfig+0x468>
 8002e36:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e46:	e074      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d118      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4a2>
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e56:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e76:	4a11      	ldr	r2, [pc, #68]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e80:	e057      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d11e      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4e8>
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e90:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ea0:	4a06      	ldr	r2, [pc, #24]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eb0:	4a02      	ldr	r2, [pc, #8]	@ (8002ebc <HAL_RCC_OscConfig+0x4dc>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002eba:	e03a      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
 8002ebc:	44020c00 	.word	0x44020c00
 8002ec0:	20000008 	.word	0x20000008
 8002ec4:	44020800 	.word	0x44020800
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b85      	cmp	r3, #133	@ 0x85
 8002ece:	d118      	bne.n	8002f02 <HAL_RCC_OscConfig+0x522>
 8002ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ed6:	4aa1      	ldr	r2, [pc, #644]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ee6:	4a9d      	ldr	r2, [pc, #628]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ef0:	4b9a      	ldr	r3, [pc, #616]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ef6:	4a99      	ldr	r2, [pc, #612]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f00:	e017      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
 8002f02:	4b96      	ldr	r3, [pc, #600]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f08:	4a94      	ldr	r2, [pc, #592]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f12:	4b92      	ldr	r3, [pc, #584]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f18:	4a90      	ldr	r2, [pc, #576]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f22:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f28:	4a8c      	ldr	r2, [pc, #560]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fd65 	bl	8000a08 <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fd61 	bl	8000a08 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e175      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f58:	4b80      	ldr	r3, [pc, #512]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ed      	beq.n	8002f42 <HAL_RCC_OscConfig+0x562>
 8002f66:	e015      	b.n	8002f94 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fd fd4e 	bl	8000a08 <HAL_GetTick>
 8002f6c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fd fd4a 	bl	8000a08 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e15e      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f86:	4b75      	ldr	r3, [pc, #468]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ed      	bne.n	8002f70 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d036      	beq.n	800300e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6b      	ldr	r2, [pc, #428]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002fae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd fd28 	bl	8000a08 <HAL_GetTick>
 8002fb8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002fbc:	f7fd fd24 	bl	8000a08 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e13a      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002fce:	4b63      	ldr	r3, [pc, #396]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x5dc>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8002fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fd fd0e 	bl	8000a08 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002ff0:	f7fd fd0a 	bl	8000a08 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e120      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003002:	4b56      	ldr	r3, [pc, #344]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8115 	beq.w	8003242 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b18      	cmp	r3, #24
 800301c:	f000 80af 	beq.w	800317e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 8086 	bne.w	8003136 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800302a:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4b      	ldr	r2, [pc, #300]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003030:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fd fce7 	bl	8000a08 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800303e:	f7fd fce3 	bl	8000a08 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0f9      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003050:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800305c:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003070:	0212      	lsls	r2, r2, #8
 8003072:	430a      	orrs	r2, r1
 8003074:	4939      	ldr	r1, [pc, #228]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	628b      	str	r3, [r1, #40]	@ 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307e:	3b01      	subs	r3, #1
 8003080:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	3b01      	subs	r3, #1
 800308a:	025b      	lsls	r3, r3, #9
 800308c:	b29b      	uxth	r3, r3
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	3b01      	subs	r3, #1
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030aa:	492c      	ldr	r1, [pc, #176]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80030b0:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030b6:	f023 0310 	bic.w	r3, r3, #16
 80030ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c0:	4a26      	ldr	r2, [pc, #152]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80030c6:	4b25      	ldr	r3, [pc, #148]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	4a24      	ldr	r2, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80030d2:	4b22      	ldr	r3, [pc, #136]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f023 020c 	bic.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	491f      	ldr	r1, [pc, #124]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	f023 0220 	bic.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f0:	491a      	ldr	r1, [pc, #104]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030f6:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003100:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a15      	ldr	r2, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800310c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fd fc7b 	bl	8000a08 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003116:	f7fd fc77 	bl	8000a08 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e08d      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x736>
 8003134:	e085      	b.n	8003242 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003136:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a08      	ldr	r2, [pc, #32]	@ (800315c <HAL_RCC_OscConfig+0x77c>)
 800313c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003142:	f7fd fc61 	bl	8000a08 <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800314a:	f7fd fc5d 	bl	8000a08 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d903      	bls.n	8003160 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e073      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
 800315c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003160:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ee      	bne.n	800314a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800316c:	4b37      	ldr	r3, [pc, #220]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	4a36      	ldr	r2, [pc, #216]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003172:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	6293      	str	r3, [r2, #40]	@ 0x28
 800317c:	e061      	b.n	8003242 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800317e:	4b33      	ldr	r3, [pc, #204]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003184:	4b31      	ldr	r3, [pc, #196]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003188:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	2b01      	cmp	r3, #1
 8003190:	d031      	beq.n	80031f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0203 	and.w	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d12a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d122      	bne.n	80031f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d11a      	bne.n	80031f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d111      	bne.n	80031f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e024      	b.n	8003244 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003208:	429a      	cmp	r2, r3
 800320a:	d01a      	beq.n	8003242 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800320c:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fbf6 	bl	8000a08 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800321e:	bf00      	nop
 8003220:	f7fd fbf2 	bl	8000a08 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4293      	cmp	r3, r2
 800322a:	d0f9      	beq.n	8003220 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003230:	4a06      	ldr	r2, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003236:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	4a04      	ldr	r2, [pc, #16]	@ (800324c <HAL_RCC_OscConfig+0x86c>)
 800323c:	f043 0310 	orr.w	r3, r3, #16
 8003240:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	44020c00 	.word	0x44020c00

08003250 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e19e      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b83      	ldr	r3, [pc, #524]	@ (8003474 <HAL_RCC_ClockConfig+0x224>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d910      	bls.n	8003294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b80      	ldr	r3, [pc, #512]	@ (8003474 <HAL_RCC_ClockConfig+0x224>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 020f 	bic.w	r2, r3, #15
 800327a:	497e      	ldr	r1, [pc, #504]	@ (8003474 <HAL_RCC_ClockConfig+0x224>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b7c      	ldr	r3, [pc, #496]	@ (8003474 <HAL_RCC_ClockConfig+0x224>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e186      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d012      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	4b74      	ldr	r3, [pc, #464]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d909      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80032b2:	4b71      	ldr	r3, [pc, #452]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	496d      	ldr	r1, [pc, #436]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d012      	beq.n	80032f8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	4b68      	ldr	r3, [pc, #416]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d909      	bls.n	80032f8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	4961      	ldr	r1, [pc, #388]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4b5b      	ldr	r3, [pc, #364]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003310:	429a      	cmp	r2, r3
 8003312:	d908      	bls.n	8003326 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003314:	4b58      	ldr	r3, [pc, #352]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4955      	ldr	r1, [pc, #340]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003322:	4313      	orrs	r3, r2
 8003324:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	4b50      	ldr	r3, [pc, #320]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	429a      	cmp	r2, r3
 8003340:	d908      	bls.n	8003354 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003342:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	494a      	ldr	r1, [pc, #296]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003350:	4313      	orrs	r3, r2
 8003352:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8093 	beq.w	8003488 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800336a:	4b43      	ldr	r3, [pc, #268]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d121      	bne.n	80033ba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e113      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e107      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800339a:	4b37      	ldr	r3, [pc, #220]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0fb      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033aa:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0f3      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	492c      	ldr	r1, [pc, #176]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033cc:	f7fd fb1c 	bl	8000a08 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d112      	bne.n	8003400 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fd fb14 	bl	8000a08 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0d7      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f2:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f003 0318 	and.w	r3, r3, #24
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	d1ee      	bne.n	80033dc <HAL_RCC_ClockConfig+0x18c>
 80033fe:	e043      	b.n	8003488 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d112      	bne.n	800342e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	f7fd fafd 	bl	8000a08 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0c0      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 0318 	and.w	r3, r3, #24
 8003428:	2b10      	cmp	r3, #16
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_ClockConfig+0x1ba>
 800342c:	e02c      	b.n	8003488 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d122      	bne.n	800347c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fae6 	bl	8000a08 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0a9      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x228>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0318 	and.w	r3, r3, #24
 8003456:	2b08      	cmp	r3, #8
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_ClockConfig+0x1e8>
 800345a:	e015      	b.n	8003488 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fd fad4 	bl	8000a08 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d906      	bls.n	800347c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e097      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
 8003472:	bf00      	nop
 8003474:	40022000 	.word	0x40022000
 8003478:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800347c:	4b4b      	ldr	r3, [pc, #300]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 0318 	and.w	r3, r3, #24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e9      	bne.n	800345c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	4b44      	ldr	r3, [pc, #272]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d208      	bcs.n	80034b6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80034a4:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 020f 	bic.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	493e      	ldr	r1, [pc, #248]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b6:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <HAL_RCC_ClockConfig+0x360>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d210      	bcs.n	80034e6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c4:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <HAL_RCC_ClockConfig+0x360>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 020f 	bic.w	r2, r3, #15
 80034cc:	4938      	ldr	r1, [pc, #224]	@ (80035b0 <HAL_RCC_ClockConfig+0x360>)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_RCC_ClockConfig+0x360>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e05d      	b.n	80035a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d208      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003502:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4927      	ldr	r1, [pc, #156]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800352e:	429a      	cmp	r2, r3
 8003530:	d209      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003532:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	491a      	ldr	r1, [pc, #104]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003560:	429a      	cmp	r2, r3
 8003562:	d209      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	490e      	ldr	r1, [pc, #56]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003574:	4313      	orrs	r3, r2
 8003576:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003578:	f000 f822 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_ClockConfig+0x35c>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490b      	ldr	r1, [pc, #44]	@ (80035b4 <HAL_RCC_ClockConfig+0x364>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <HAL_RCC_ClockConfig+0x368>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <HAL_RCC_ClockConfig+0x36c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd f9ac 	bl	80008f4 <HAL_InitTick>
 800359c:	4603      	mov	r3, r0
 800359e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80035a0:	7afb      	ldrb	r3, [r7, #11]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	44020c00 	.word	0x44020c00
 80035b0:	40022000 	.word	0x40022000
 80035b4:	0800a9d4 	.word	0x0800a9d4
 80035b8:	20000004 	.word	0x20000004
 80035bc:	20000008 	.word	0x20000008

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	@ 0x24
 80035c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80035c6:	4b8c      	ldr	r3, [pc, #560]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0318 	and.w	r3, r3, #24
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d102      	bne.n	80035d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035d2:	4b8a      	ldr	r3, [pc, #552]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x23c>)
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e107      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d8:	4b87      	ldr	r3, [pc, #540]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 0318 	and.w	r3, r3, #24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d112      	bne.n	800360a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80035e4:	4b84      	ldr	r3, [pc, #528]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035f0:	4b81      	ldr	r3, [pc, #516]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	4a81      	ldr	r2, [pc, #516]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x240>)
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e0f1      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003604:	4b7e      	ldr	r3, [pc, #504]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x240>)
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	e0ee      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800360a:	4b7b      	ldr	r3, [pc, #492]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 0318 	and.w	r3, r3, #24
 8003612:	2b10      	cmp	r3, #16
 8003614:	d102      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003616:	4b7b      	ldr	r3, [pc, #492]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x244>)
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e0e5      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b76      	ldr	r3, [pc, #472]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 0318 	and.w	r3, r3, #24
 8003624:	2b18      	cmp	r3, #24
 8003626:	f040 80dd 	bne.w	80037e4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800362a:	4b73      	ldr	r3, [pc, #460]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003634:	4b70      	ldr	r3, [pc, #448]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800363e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003640:	4b6d      	ldr	r3, [pc, #436]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800364c:	4b6a      	ldr	r3, [pc, #424]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003664:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80b7 	beq.w	80037de <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0xbe>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d056      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x16a>
 800367c:	e077      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800367e:	4b5e      	ldr	r3, [pc, #376]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02d      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800368a:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	08db      	lsrs	r3, r3, #3
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	4a5a      	ldr	r2, [pc, #360]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x240>)
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	4b50      	ldr	r3, [pc, #320]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80036c8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003808 <HAL_RCC_GetSysClockFreq+0x248>
 80036cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80036e4:	e065      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800380c <HAL_RCC_GetSysClockFreq+0x24c>
 80036f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f8:	4b3f      	ldr	r3, [pc, #252]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003708:	ed97 6a02 	vldr	s12, [r7, #8]
 800370c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003808 <HAL_RCC_GetSysClockFreq+0x248>
 8003710:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003714:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800371c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003724:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003728:	e043      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003734:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003810 <HAL_RCC_GetSysClockFreq+0x250>
 8003738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373c:	4b2e      	ldr	r3, [pc, #184]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800373e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003750:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003808 <HAL_RCC_GetSysClockFreq+0x248>
 8003754:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003758:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800375c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003760:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800376c:	e021      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003778:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003814 <HAL_RCC_GetSysClockFreq+0x254>
 800377c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003780:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8003782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003790:	ed97 6a02 	vldr	s12, [r7, #8]
 8003794:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003808 <HAL_RCC_GetSysClockFreq+0x248>
 8003798:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800379c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80037b0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	0a5b      	lsrs	r3, r3, #9
 80037b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037bc:	3301      	adds	r3, #1
 80037be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80037ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d6:	ee17 3a90 	vmov	r3, s15
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e004      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e001      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x240>)
 80037e6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80037e8:	69fb      	ldr	r3, [r7, #28]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3724      	adds	r7, #36	@ 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	44020c00 	.word	0x44020c00
 80037fc:	003d0900 	.word	0x003d0900
 8003800:	03d09000 	.word	0x03d09000
 8003804:	017d7840 	.word	0x017d7840
 8003808:	46000000 	.word	0x46000000
 800380c:	4c742400 	.word	0x4c742400
 8003810:	4bbebc20 	.word	0x4bbebc20
 8003814:	4a742400 	.word	0x4a742400

08003818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800381c:	f7ff fed0 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003826:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800382a:	4907      	ldr	r1, [pc, #28]	@ (8003848 <HAL_RCC_GetHCLKFreq+0x30>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800382e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a05      	ldr	r2, [pc, #20]	@ (800384c <HAL_RCC_GetHCLKFreq+0x34>)
 8003838:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <HAL_RCC_GetHCLKFreq+0x34>)
 800383c:	681b      	ldr	r3, [r3, #0]
}
 800383e:	4618      	mov	r0, r3
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	44020c00 	.word	0x44020c00
 8003848:	0800a9d4 	.word	0x0800a9d4
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b0aa      	sub	sp, #168	@ 0xa8
 8003856:	af00      	add	r7, sp, #0
 8003858:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800385c:	2300      	movs	r3, #0
 800385e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003862:	2300      	movs	r3, #0
 8003864:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003874:	2500      	movs	r5, #0
 8003876:	ea54 0305 	orrs.w	r3, r4, r5
 800387a:	d00b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800387c:	4bb8      	ldr	r3, [pc, #736]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800387e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003882:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	4ab4      	ldr	r2, [pc, #720]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800388e:	430b      	orrs	r3, r1
 8003890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003894:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f002 0801 	and.w	r8, r2, #1
 80038a0:	f04f 0900 	mov.w	r9, #0
 80038a4:	ea58 0309 	orrs.w	r3, r8, r9
 80038a8:	d038      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80038aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d819      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80038b4:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	080038d5 	.word	0x080038d5
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f1 	.word	0x080038f1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80038d8:	3308      	adds	r3, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fddc 	bl	8004498 <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80038fa:	4b99      	ldr	r3, [pc, #612]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003900:	f023 0107 	bic.w	r1, r3, #7
 8003904:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	4a95      	ldr	r2, [pc, #596]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800390c:	430b      	orrs	r3, r1
 800390e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003912:	e003      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003918:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800391c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f002 0a02 	and.w	sl, r2, #2
 8003928:	f04f 0b00 	mov.w	fp, #0
 800392c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003930:	d03c      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003932:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	2b28      	cmp	r3, #40	@ 0x28
 800393a:	d01b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800393c:	2b28      	cmp	r3, #40	@ 0x28
 800393e:	d815      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003940:	2b20      	cmp	r3, #32
 8003942:	d019      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d811      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003948:	2b18      	cmp	r3, #24
 800394a:	d017      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800394c:	2b18      	cmp	r3, #24
 800394e:	d80d      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003958:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800395c:	3308      	adds	r3, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fd9a 	bl	8004498 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800396a:	e00a      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003972:	e006      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003974:	bf00      	nop
 8003976:	e004      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003978:	bf00      	nop
 800397a:	e002      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003982:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800398a:	4b75      	ldr	r3, [pc, #468]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800398c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003990:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003994:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399a:	4a71      	ldr	r2, [pc, #452]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800399c:	430b      	orrs	r3, r1
 800399e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039a2:	e003      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80039a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f002 0304 	and.w	r3, r2, #4
 80039b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80039cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039d6:	d01e      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80039d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039dc:	d817      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d01a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e8:	d811      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80039ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80039ec:	d017      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80039ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80039f0:	d80d      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d015      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80039f6:	2b40      	cmp	r3, #64	@ 0x40
 80039f8:	d109      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039fe:	3308      	adds	r3, #8
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd49 	bl	8004498 <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a14:	e006      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003a16:	bf00      	nop
 8003a18:	e004      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a32:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	4a48      	ldr	r2, [pc, #288]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a44:	e003      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a4a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	d043      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003a6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a78:	d021      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a7a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a7e:	d81a      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003a80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a84:	d01d      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a8a:	d814      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003a8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a90:	d019      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003a92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a96:	d80e      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d016      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fcf5 	bl	8004498 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ab4:	e00a      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003acc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ad4:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ada:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003af2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b04:	2300      	movs	r3, #0
 8003b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d03e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b1c:	d01b      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003b1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b22:	d814      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b28:	d017      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003b2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b2e:	d80e      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d017      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d109      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b3e:	3308      	adds	r3, #8
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fca9 	bl	8004498 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b54:	e007      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003b56:	bf00      	nop
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003b5e:	bf00      	nop
 8003b60:	44020c00 	.word	0x44020c00
        break;
 8003b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b6e:	4ba5      	ldr	r3, [pc, #660]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b74:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	4aa1      	ldr	r2, [pc, #644]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ba2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	d03b      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003bb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bbc:	d814      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003bbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bc2:	d017      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003bc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bc8:	d80e      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003bce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd8:	3308      	adds	r3, #8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fc5c 	bl	8004498 <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003bee:	e004      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003c02:	4b80      	ldr	r3, [pc, #512]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c08:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c12:	4a7c      	ldr	r2, [pc, #496]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c20:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c32:	2300      	movs	r3, #0
 8003c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	d033      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003c4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c50:	d80e      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c60:	3308      	adds	r3, #8
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fc18 	bl	8004498 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003c6e:	e006      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003c86:	4b5f      	ldr	r3, [pc, #380]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c8c:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003c90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ca4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003ca8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	6639      	str	r1, [r7, #96]	@ 0x60
 8003cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d033      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cce:	d015      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cd4:	d80e      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cde:	d109      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbd6 	bl	8004498 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003cf2:	e006      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d10:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d28:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	2100      	movs	r1, #0
 8003d36:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003d48:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d52:	61d3      	str	r3, [r2, #28]
 8003d54:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d60:	4a28      	ldr	r2, [pc, #160]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d62:	430b      	orrs	r3, r1
 8003d64:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d74:	2300      	movs	r3, #0
 8003d76:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d78:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d046      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d8c:	d021      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d92:	d81a      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d98:	d01d      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d814      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da4:	d019      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003daa:	d80e      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db4:	d109      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dba:	3308      	adds	r3, #8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb6b 	bl	8004498 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10f      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003dea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003dee:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	4a02      	ldr	r2, [pc, #8]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003e02:	bf00      	nop
 8003e04:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e0c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e1e:	2300      	movs	r3, #0
 8003e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d043      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003e2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e36:	d021      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003e38:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e3c:	d81a      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e42:	d01d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e48:	d814      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003e4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e4e:	d019      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e54:	d80e      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e64:	3308      	adds	r3, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fb16 	bl	8004498 <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e72:	e00a      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003e92:	4bb6      	ldr	r3, [pc, #728]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003e94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea2:	4ab2      	ldr	r2, [pc, #712]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003eaa:	e003      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eb0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	d030      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d80f      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d211      	bcs.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d911      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d109      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eea:	3308      	adds	r3, #8
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fad3 	bl	8004498 <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003f10:	4b96      	ldr	r3, [pc, #600]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f16:	f023 0107 	bic.w	r1, r3, #7
 8003f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f20:	4a92      	ldr	r2, [pc, #584]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f28:	e003      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f2e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003f64:	bf00      	nop
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8003f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003f72:	4b7e      	ldr	r3, [pc, #504]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f78:	f023 0108 	bic.w	r1, r3, #8
 8003f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f82:	4a7a      	ldr	r2, [pc, #488]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003f84:	430b      	orrs	r3, r1
 8003f86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f8a:	e003      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f000 80b0 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fbe:	f7fc fd23 	bl	8000a08 <HAL_GetTick>
 8003fc2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fc fd1e 	bl	8000a08 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d903      	bls.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003fe0:	4b63      	ldr	r3, [pc, #396]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ed      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8003fec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f040 808a 	bne.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004004:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x802>
 800400c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004012:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004016:	429a      	cmp	r2, r3
 8004018:	d01b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800401a:	4b54      	ldr	r3, [pc, #336]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800401c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004024:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004028:	4b50      	ldr	r3, [pc, #320]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800402a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800402e:	4a4f      	ldr	r2, [pc, #316]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004038:	4b4c      	ldr	r3, [pc, #304]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800403a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800403e:	4a4b      	ldr	r2, [pc, #300]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004048:	4a48      	ldr	r2, [pc, #288]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800404a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800404e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d019      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fc fcd3 	bl	8000a08 <HAL_GetTick>
 8004062:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004066:	e00d      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fc fcce 	bl	8000a08 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d903      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004084:	4b39      	ldr	r3, [pc, #228]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ea      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8004092:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d132      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800409a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800409e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040a8:	d10f      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80040aa:	4b30      	ldr	r3, [pc, #192]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80040b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80040c2:	4a2a      	ldr	r2, [pc, #168]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040c4:	430b      	orrs	r3, r1
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	e005      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80040ca:	4b28      	ldr	r3, [pc, #160]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4a27      	ldr	r2, [pc, #156]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040d4:	61d3      	str	r3, [r2, #28]
 80040d6:	4b25      	ldr	r3, [pc, #148]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040dc:	4a23      	ldr	r2, [pc, #140]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040e6:	4b21      	ldr	r3, [pc, #132]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040e8:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80040ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f6:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040fe:	e008      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004100:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004104:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8004108:	e003      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800410e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004112:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004124:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004128:	460b      	mov	r3, r1
 800412a:	4313      	orrs	r3, r2
 800412c:	d038      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800412e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d014      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004138:	2b30      	cmp	r3, #48	@ 0x30
 800413a:	d80e      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d012      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d80a      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d106      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	4a06      	ldr	r2, [pc, #24]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004156:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004158:	e00d      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004160:	e009      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004162:	bf00      	nop
 8004164:	e007      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004166:	bf00      	nop
 8004168:	e005      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800416a:	bf00      	nop
 800416c:	44020c00 	.word	0x44020c00
 8004170:	44020800 	.word	0x44020800
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800417e:	4bb5      	ldr	r3, [pc, #724]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004184:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004188:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	49b1      	ldr	r1, [pc, #708]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800419c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80041a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d03c      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80041bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d81d      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	080041ef 	.word	0x080041ef
 80041d4:	08004203 	.word	0x08004203
 80041d8:	0800420b 	.word	0x0800420b
 80041dc:	0800420b 	.word	0x0800420b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	4a9b      	ldr	r2, [pc, #620]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80041ec:	e00e      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041f2:	3308      	adds	r3, #8
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f94f 	bl	8004498 <RCCEx_PLL2_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10c      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004214:	4b8f      	ldr	r3, [pc, #572]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004224:	498b      	ldr	r1, [pc, #556]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004232:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004236:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800424c:	460b      	mov	r3, r1
 800424e:	4313      	orrs	r3, r2
 8004250:	d03c      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004252:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	2b20      	cmp	r3, #32
 800425a:	d01f      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d819      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004260:	2b18      	cmp	r3, #24
 8004262:	d01d      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004264:	2b18      	cmp	r3, #24
 8004266:	d815      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800426c:	2b08      	cmp	r3, #8
 800426e:	d007      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004270:	e010      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004272:	4b78      	ldr	r3, [pc, #480]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	4a77      	ldr	r2, [pc, #476]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800427e:	e010      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004280:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004284:	3308      	adds	r3, #8
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f906 	bl	8004498 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004292:	e006      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800429a:	e002      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80042a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80042b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	4966      	ldr	r1, [pc, #408]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80042c2:	e003      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80042cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d03e      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80042e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f2:	d020      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f8:	d819      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xade>
 80042fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80042fc:	d01d      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80042fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004300:	d815      	bhi.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d007      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800430a:	e010      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4b51      	ldr	r3, [pc, #324]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	4a50      	ldr	r2, [pc, #320]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004318:	e010      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800431a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800431e:	3308      	adds	r3, #8
 8004320:	4618      	mov	r0, r3
 8004322:	f000 f8b9 	bl	8004498 <RCCEx_PLL2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004334:	e002      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800433a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10c      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004344:	4b43      	ldr	r3, [pc, #268]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800434a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800434e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004354:	493f      	ldr	r1, [pc, #252]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004362:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004366:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	2100      	movs	r1, #0
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d038      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d00e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800438e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004392:	d815      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d017      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8004398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439c:	d110      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439e:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043aa:	e00e      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043b0:	3308      	adds	r3, #8
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f870 	bl	8004498 <RCCEx_PLL2_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80043be:	e004      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80043c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80043d2:	4b20      	ldr	r3, [pc, #128]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	491c      	ldr	r1, [pc, #112]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80043f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	2100      	movs	r1, #0
 80043fe:	6039      	str	r1, [r7, #0]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	e9d7 1200 	ldrd	r1, r2, [r7]
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d039      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004410:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004416:	2b30      	cmp	r3, #48	@ 0x30
 8004418:	d01e      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800441a:	2b30      	cmp	r3, #48	@ 0x30
 800441c:	d815      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800441e:	2b10      	cmp	r3, #16
 8004420:	d002      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8004422:	2b20      	cmp	r3, #32
 8004424:	d007      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8004426:	e010      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004428:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800442e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004432:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004434:	e011      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004436:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800443a:	3308      	adds	r3, #8
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f82b 	bl	8004498 <RCCEx_PLL2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004448:	e007      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8004452:	bf00      	nop
 8004454:	44020c00 	.word	0x44020c00
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004464:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004468:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800446c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004472:	4908      	ldr	r1, [pc, #32]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800447a:	e003      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004480:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8004484:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004488:	4618      	mov	r0, r3
 800448a:	37a8      	adds	r7, #168	@ 0xa8
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	44020c00 	.word	0x44020c00

08004498 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80044a0:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a47      	ldr	r2, [pc, #284]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044ac:	f7fc faac 	bl	8000a08 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044b2:	e008      	b.n	80044c6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044b4:	f7fc faa8 	bl	8000a08 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e07a      	b.n	80045bc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044c6:	4b3f      	ldr	r3, [pc, #252]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6852      	ldr	r2, [r2, #4]
 80044e6:	0212      	lsls	r2, r2, #8
 80044e8:	430a      	orrs	r2, r1
 80044ea:	4936      	ldr	r1, [pc, #216]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	025b      	lsls	r3, r3, #9
 8004502:	b29b      	uxth	r3, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	3b01      	subs	r3, #1
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	3b01      	subs	r3, #1
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004520:	4928      	ldr	r1, [pc, #160]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004526:	4b27      	ldr	r3, [pc, #156]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	f023 020c 	bic.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	4924      	ldr	r1, [pc, #144]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004538:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f023 0220 	bic.w	r2, r3, #32
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	491f      	ldr	r1, [pc, #124]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004546:	4313      	orrs	r3, r2
 8004548:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800454a:	4b1e      	ldr	r3, [pc, #120]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800454c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	491c      	ldr	r1, [pc, #112]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004558:	4b1a      	ldr	r3, [pc, #104]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	4a19      	ldr	r2, [pc, #100]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800455e:	f023 0310 	bic.w	r3, r3, #16
 8004562:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004564:	4b17      	ldr	r3, [pc, #92]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6a12      	ldr	r2, [r2, #32]
 8004574:	00d2      	lsls	r2, r2, #3
 8004576:	4913      	ldr	r1, [pc, #76]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 8004582:	f043 0310 	orr.w	r3, r3, #16
 8004586:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004588:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 800458e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004592:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004594:	f7fc fa38 	bl	8000a08 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800459a:	e008      	b.n	80045ae <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800459c:	f7fc fa34 	bl	8000a08 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e006      	b.n	80045bc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045ae:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <RCCEx_PLL2_Config+0x12c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0

}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	44020c00 	.word	0x44020c00

080045c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045d6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80045da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80045fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40
 8004638:	e00b      	b.n	8004652 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d106      	bne.n	800464e <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40
 800464c:	e001      	b.n	8004652 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8004660:	b084      	sub	sp, #16
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	f107 001c 	add.w	r0, r7, #28
 800466e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f023 0201 	bic.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8004684:	2100      	movs	r1, #0
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffc7 	bl	800461a <USB_SetCurrentMode>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a2:	b004      	add	sp, #16
 80046a4:	4770      	bx	lr
	...

080046a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b09f      	sub	sp, #124	@ 0x7c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4ba0      	ldr	r3, [pc, #640]	@ (8004948 <USB_ActivateEndpoint+0x2a0>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d819      	bhi.n	8004706 <USB_ActivateEndpoint+0x5e>
 80046d2:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <USB_ActivateEndpoint+0x30>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046fd 	.word	0x080046fd
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	080046f3 	.word	0x080046f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ee:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80046f0:	e00e      	b.n	8004710 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046f4:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80046f8:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80046fa:	e009      	b.n	8004710 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004702:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8004704:	e004      	b.n	8004710 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800470c:	e000      	b.n	8004710 <USB_ActivateEndpoint+0x68>
      break;
 800470e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	441a      	add	r2, r3
 800471a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800471c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004724:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b86      	ldr	r3, [pc, #536]	@ (800494c <USB_ActivateEndpoint+0x2a4>)
 8004734:	4013      	ands	r3, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800474a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004752:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	7b1b      	ldrb	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 8177 	bne.w	8004a4c <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d079      	beq.n	800485a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004784:	0c12      	lsrs	r2, r2, #16
 8004786:	0412      	lsls	r2, r2, #16
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	88db      	ldrh	r3, [r3, #6]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	009a      	lsls	r2, r3, #2
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <USB_ActivateEndpoint+0x14e>
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b5c      	ldr	r3, [pc, #368]	@ (800494c <USB_ActivateEndpoint+0x2a4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047f4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d018      	beq.n	8004830 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b51      	ldr	r3, [pc, #324]	@ (8004950 <USB_ActivateEndpoint+0x2a8>)
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f083 0320 	eor.w	r3, r3, #32
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e28c      	b.n	8004d4a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b44      	ldr	r3, [pc, #272]	@ (8004950 <USB_ActivateEndpoint+0x2a8>)
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	e277      	b.n	8004d4a <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004878:	0c12      	lsrs	r2, r2, #16
 800487a:	0412      	lsls	r2, r2, #16
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	88db      	ldrh	r3, [r3, #6]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	b29b      	uxth	r3, r3
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048c8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d112      	bne.n	80048fc <USB_ActivateEndpoint+0x254>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	e04d      	b.n	8004998 <USB_ActivateEndpoint+0x2f0>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b3e      	cmp	r3, #62	@ 0x3e
 8004902:	d827      	bhi.n	8004954 <USB_ActivateEndpoint+0x2ac>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <USB_ActivateEndpoint+0x276>
 8004918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800491a:	3301      	adds	r3, #1
 800491c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004930:	069a      	lsls	r2, r3, #26
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800493c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	e028      	b.n	8004998 <USB_ActivateEndpoint+0x2f0>
 8004946:	bf00      	nop
 8004948:	07ff898f 	.word	0x07ff898f
 800494c:	07ff8f8f 	.word	0x07ff8f8f
 8004950:	07ff8fbf 	.word	0x07ff8fbf
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <USB_ActivateEndpoint+0x2c6>
 8004968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496a:	3b01      	subs	r3, #1
 800496c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004980:	069b      	lsls	r3, r3, #26
 8004982:	431a      	orrs	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800498e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004996:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d013      	beq.n	80049d8 <USB_ActivateEndpoint+0x330>
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004c30 <USB_ActivateEndpoint+0x588>)
 80049be:	4013      	ands	r3, r2
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11c      	bne.n	8004a1a <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b91      	ldr	r3, [pc, #580]	@ (8004c34 <USB_ActivateEndpoint+0x58c>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e197      	b.n	8004d4a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b83      	ldr	r3, [pc, #524]	@ (8004c34 <USB_ActivateEndpoint+0x58c>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	441a      	add	r2, r3
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e17e      	b.n	8004d4a <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d114      	bne.n	8004a7e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b73      	ldr	r3, [pc, #460]	@ (8004c30 <USB_ActivateEndpoint+0x588>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e013      	b.n	8004aa6 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c38 <USB_ActivateEndpoint+0x590>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa4:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ac4:	0c12      	lsrs	r2, r2, #16
 8004ac6:	0412      	lsls	r2, r2, #16
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	891b      	ldrh	r3, [r3, #8]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004af2:	430a      	orrs	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b14:	0c12      	lsrs	r2, r2, #16
 8004b16:	0412      	lsls	r2, r2, #16
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	895b      	ldrh	r3, [r3, #10]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	009a      	lsls	r2, r3, #2
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d178      	bne.n	8004c40 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d013      	beq.n	8004b8e <USB_ActivateEndpoint+0x4e6>
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b2f      	ldr	r3, [pc, #188]	@ (8004c30 <USB_ActivateEndpoint+0x588>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8c:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <USB_ActivateEndpoint+0x526>
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <USB_ActivateEndpoint+0x588>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bcc:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <USB_ActivateEndpoint+0x58c>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c04:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <USB_ActivateEndpoint+0x594>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e08c      	b.n	8004d4a <USB_ActivateEndpoint+0x6a2>
 8004c30:	07ff8f8f 	.word	0x07ff8f8f
 8004c34:	07ffbf8f 	.word	0x07ffbf8f
 8004c38:	07ff8e8f 	.word	0x07ff8e8f
 8004c3c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <USB_ActivateEndpoint+0x5d8>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b3d      	ldr	r3, [pc, #244]	@ (8004d5c <USB_ActivateEndpoint+0x6b4>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c7e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <USB_ActivateEndpoint+0x618>
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d5c <USB_ActivateEndpoint+0x6b4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d018      	beq.n	8004cfa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <USB_ActivateEndpoint+0x6b8>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cdc:	f083 0320 	eor.w	r3, r3, #32
 8004ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e013      	b.n	8004d22 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <USB_ActivateEndpoint+0x6b8>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d20:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <USB_ActivateEndpoint+0x6bc>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	377c      	adds	r7, #124	@ 0x7c
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	07ff8f8f 	.word	0x07ff8f8f
 8004d60:	07ff8fbf 	.word	0x07ff8fbf
 8004d64:	07ffbf8f 	.word	0x07ffbf8f

08004d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b097      	sub	sp, #92	@ 0x5c
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	7b1b      	ldrb	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d16d      	bne.n	8004e56 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d034      	beq.n	8004dec <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d013      	beq.n	8004dc2 <USB_DeactivateEndpoint+0x5a>
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <USB_DeactivateEndpoint+0x1f4>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b64      	ldr	r3, [pc, #400]	@ (8004f60 <USB_DeactivateEndpoint+0x1f8>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e139      	b.n	8005060 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <USB_DeactivateEndpoint+0xc4>
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b52      	ldr	r3, [pc, #328]	@ (8004f5c <USB_DeactivateEndpoint+0x1f4>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b4a      	ldr	r3, [pc, #296]	@ (8004f64 <USB_DeactivateEndpoint+0x1fc>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e104      	b.n	8005060 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8084 	bne.w	8004f68 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d013      	beq.n	8004ea0 <USB_DeactivateEndpoint+0x138>
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b35      	ldr	r3, [pc, #212]	@ (8004f5c <USB_DeactivateEndpoint+0x1f4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d013      	beq.n	8004ee0 <USB_DeactivateEndpoint+0x178>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <USB_DeactivateEndpoint+0x1f4>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ede:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <USB_DeactivateEndpoint+0x1f4>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	441a      	add	r2, r3
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f06:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <USB_DeactivateEndpoint+0x1fc>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b08      	ldr	r3, [pc, #32]	@ (8004f60 <USB_DeactivateEndpoint+0x1f8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e082      	b.n	8005060 <USB_DeactivateEndpoint+0x2f8>
 8004f5a:	bf00      	nop
 8004f5c:	07ff8f8f 	.word	0x07ff8f8f
 8004f60:	07ff8fbf 	.word	0x07ff8fbf
 8004f64:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <USB_DeactivateEndpoint+0x240>
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b38      	ldr	r3, [pc, #224]	@ (8005070 <USB_DeactivateEndpoint+0x308>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa6:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <USB_DeactivateEndpoint+0x280>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <USB_DeactivateEndpoint+0x308>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fe6:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8005070 <USB_DeactivateEndpoint+0x308>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <USB_DeactivateEndpoint+0x30c>)
 800501e:	4013      	ands	r3, r2
 8005020:	643b      	str	r3, [r7, #64]	@ 0x40
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <USB_DeactivateEndpoint+0x310>)
 8005046:	4013      	ands	r3, r2
 8005048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800505a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505e:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	375c      	adds	r7, #92	@ 0x5c
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	07ff8f8f 	.word	0x07ff8f8f
 8005074:	07ff8fbf 	.word	0x07ff8fbf
 8005078:	07ffbf8f 	.word	0x07ffbf8f

0800507c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b096      	sub	sp, #88	@ 0x58
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b01      	cmp	r3, #1
 800508c:	f040 84ed 	bne.w	8005a6a <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	d903      	bls.n	80050a4 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80050a2:	e002      	b.n	80050aa <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7b1b      	ldrb	r3, [r3, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12e      	bne.n	8005110 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88da      	ldrh	r2, [r3, #6]
 80050ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050bc:	b29b      	uxth	r3, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 f952 	bl	8006368 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050e2:	b292      	uxth	r2, r2
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f8:	041a      	lsls	r2, r3, #16
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005104:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005108:	430a      	orrs	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f000 bc90 	b.w	8005a30 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	2b02      	cmp	r3, #2
 8005116:	f040 8332 	bne.w	800577e <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	f240 82e4 	bls.w	80056f0 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4ba4      	ldr	r3, [pc, #656]	@ (80053c8 <USB_EPStartXfer+0x34c>)
 8005136:	4013      	ands	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005156:	1ad2      	subs	r2, r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8161 	beq.w	8005434 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d16a      	bne.n	8005250 <USB_EPStartXfer+0x1d4>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005184:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005198:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d112      	bne.n	80051ca <USB_EPStartXfer+0x14e>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80051c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e06a      	b.n	80052a0 <USB_EPStartXfer+0x224>
 80051ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051ce:	d81e      	bhi.n	800520e <USB_EPStartXfer+0x192>
 80051d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <USB_EPStartXfer+0x16a>
 80051e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e2:	3301      	adds	r3, #1
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80051f4:	6859      	ldr	r1, [r3, #4]
 80051f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f8:	069a      	lsls	r2, r3, #26
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	e048      	b.n	80052a0 <USB_EPStartXfer+0x224>
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	653b      	str	r3, [r7, #80]	@ 0x50
 8005214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <USB_EPStartXfer+0x1a8>
 800521e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005220:	3b01      	subs	r3, #1
 8005222:	653b      	str	r3, [r7, #80]	@ 0x50
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800522e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005236:	069b      	lsls	r3, r3, #26
 8005238:	431a      	orrs	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005248:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	e027      	b.n	80052a0 <USB_EPStartXfer+0x224>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d123      	bne.n	80052a0 <USB_EPStartXfer+0x224>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005262:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005276:	b292      	uxth	r2, r2
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005284:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528c:	041a      	lsls	r2, r3, #16
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	895b      	ldrh	r3, [r3, #10]
 80052a4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6959      	ldr	r1, [r3, #20]
 80052aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8b7a      	ldrh	r2, [r7, #26]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 f859 	bl	8006368 <USB_WritePMA>
            ep->xfer_buff += len;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695a      	ldr	r2, [r3, #20]
 80052ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052bc:	441a      	add	r2, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d906      	bls.n	80052dc <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6a1a      	ldr	r2, [r3, #32]
 80052d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	621a      	str	r2, [r3, #32]
 80052da:	e005      	b.n	80052e8 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2200      	movs	r2, #0
 80052e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d16d      	bne.n	80053cc <USB_EPStartXfer+0x350>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800530a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800530e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005316:	2b00      	cmp	r3, #0
 8005318:	d112      	bne.n	8005340 <USB_EPStartXfer+0x2c4>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005334:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005338:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e06d      	b.n	800541c <USB_EPStartXfer+0x3a0>
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	2b3e      	cmp	r3, #62	@ 0x3e
 8005344:	d81e      	bhi.n	8005384 <USB_EPStartXfer+0x308>
 8005346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800534c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <USB_EPStartXfer+0x2e0>
 8005356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005358:	3301      	adds	r3, #1
 800535a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536e:	069a      	lsls	r2, r3, #26
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800537a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e04b      	b.n	800541c <USB_EPStartXfer+0x3a0>
 8005384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <USB_EPStartXfer+0x31e>
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	3b01      	subs	r3, #1
 8005398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ac:	069b      	lsls	r3, r3, #26
 80053ae:	431a      	orrs	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e02a      	b.n	800541c <USB_EPStartXfer+0x3a0>
 80053c6:	bf00      	nop
 80053c8:	07ff8f8f 	.word	0x07ff8f8f
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d123      	bne.n	800541c <USB_EPStartXfer+0x3a0>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053f2:	b292      	uxth	r2, r2
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005404:	6819      	ldr	r1, [r3, #0]
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	041a      	lsls	r2, r3, #16
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	891b      	ldrh	r3, [r3, #8]
 8005420:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6959      	ldr	r1, [r3, #20]
 8005426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005428:	b29b      	uxth	r3, r3
 800542a:	8b7a      	ldrh	r2, [r7, #26]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ff9b 	bl	8006368 <USB_WritePMA>
 8005432:	e2fd      	b.n	8005a30 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d16a      	bne.n	8005512 <USB_EPStartXfer+0x496>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800545a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005462:	2b00      	cmp	r3, #0
 8005464:	d112      	bne.n	800548c <USB_EPStartXfer+0x410>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005470:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005480:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005484:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e06a      	b.n	8005562 <USB_EPStartXfer+0x4e6>
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005490:	d81e      	bhi.n	80054d0 <USB_EPStartXfer+0x454>
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <USB_EPStartXfer+0x42c>
 80054a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a4:	3301      	adds	r3, #1
 80054a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054b6:	6819      	ldr	r1, [r3, #0]
 80054b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ba:	069a      	lsls	r2, r3, #26
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e048      	b.n	8005562 <USB_EPStartXfer+0x4e6>
 80054d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <USB_EPStartXfer+0x46a>
 80054e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e2:	3b01      	subs	r3, #1
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054f8:	069b      	lsls	r3, r3, #26
 80054fa:	431a      	orrs	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005506:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800550a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e027      	b.n	8005562 <USB_EPStartXfer+0x4e6>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d123      	bne.n	8005562 <USB_EPStartXfer+0x4e6>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005524:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005534:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005538:	b292      	uxth	r2, r2
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005546:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554e:	041a      	lsls	r2, r3, #16
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800555a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	891b      	ldrh	r3, [r3, #8]
 8005566:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6959      	ldr	r1, [r3, #20]
 800556c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800556e:	b29b      	uxth	r3, r3
 8005570:	8b7a      	ldrh	r2, [r7, #26]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fef8 	bl	8006368 <USB_WritePMA>
            ep->xfer_buff += len;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557e:	441a      	add	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	429a      	cmp	r2, r3
 800558e:	d906      	bls.n	800559e <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	621a      	str	r2, [r3, #32]
 800559c:	e005      	b.n	80055aa <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d16a      	bne.n	8005688 <USB_EPStartXfer+0x60c>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d112      	bne.n	8005602 <USB_EPStartXfer+0x586>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80055fe:	605a      	str	r2, [r3, #4]
 8005600:	e06a      	b.n	80056d8 <USB_EPStartXfer+0x65c>
 8005602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005604:	2b3e      	cmp	r3, #62	@ 0x3e
 8005606:	d81e      	bhi.n	8005646 <USB_EPStartXfer+0x5ca>
 8005608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	647b      	str	r3, [r7, #68]	@ 0x44
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <USB_EPStartXfer+0x5a2>
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	3301      	adds	r3, #1
 800561c:	647b      	str	r3, [r7, #68]	@ 0x44
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800562c:	6859      	ldr	r1, [r3, #4]
 800562e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005630:	069a      	lsls	r2, r3, #26
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800563c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	e048      	b.n	80056d8 <USB_EPStartXfer+0x65c>
 8005646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	647b      	str	r3, [r7, #68]	@ 0x44
 800564c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <USB_EPStartXfer+0x5e0>
 8005656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005658:	3b01      	subs	r3, #1
 800565a:	647b      	str	r3, [r7, #68]	@ 0x44
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005666:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800566e:	069b      	lsls	r3, r3, #26
 8005670:	431a      	orrs	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800567c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005680:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	e027      	b.n	80056d8 <USB_EPStartXfer+0x65c>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d123      	bne.n	80056d8 <USB_EPStartXfer+0x65c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800569a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056ae:	b292      	uxth	r2, r2
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c4:	041a      	lsls	r2, r3, #16
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	895b      	ldrh	r3, [r3, #10]
 80056dc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6959      	ldr	r1, [r3, #20]
 80056e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8b7a      	ldrh	r2, [r7, #26]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fe3d 	bl	8006368 <USB_WritePMA>
 80056ee:	e19f      	b.n	8005a30 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4ba0      	ldr	r3, [pc, #640]	@ (8005984 <USB_EPStartXfer+0x908>)
 8005704:	4013      	ands	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800571c:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005728:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005738:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800573c:	b292      	uxth	r2, r2
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800574a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005752:	041a      	lsls	r2, r3, #16
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800575e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	891b      	ldrh	r3, [r3, #8]
 800576a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6959      	ldr	r1, [r3, #20]
 8005770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005772:	b29b      	uxth	r3, r3
 8005774:	8b7a      	ldrh	r2, [r7, #26]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fdf6 	bl	8006368 <USB_WritePMA>
 800577c:	e158      	b.n	8005a30 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80a3 	beq.w	80058e6 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d16a      	bne.n	800587e <USB_EPStartXfer+0x802>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057c6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d112      	bne.n	80057f8 <USB_EPStartXfer+0x77c>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e06a      	b.n	80058ce <USB_EPStartXfer+0x852>
 80057f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80057fc:	d81e      	bhi.n	800583c <USB_EPStartXfer+0x7c0>
 80057fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	643b      	str	r3, [r7, #64]	@ 0x40
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <USB_EPStartXfer+0x798>
 800580e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005810:	3301      	adds	r3, #1
 8005812:	643b      	str	r3, [r7, #64]	@ 0x40
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800581e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005822:	6859      	ldr	r1, [r3, #4]
 8005824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005826:	069a      	lsls	r2, r3, #26
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005832:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	e048      	b.n	80058ce <USB_EPStartXfer+0x852>
 800583c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	643b      	str	r3, [r7, #64]	@ 0x40
 8005842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <USB_EPStartXfer+0x7d6>
 800584c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584e:	3b01      	subs	r3, #1
 8005850:	643b      	str	r3, [r7, #64]	@ 0x40
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800585c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005864:	069b      	lsls	r3, r3, #26
 8005866:	431a      	orrs	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005872:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005876:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	e027      	b.n	80058ce <USB_EPStartXfer+0x852>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d123      	bne.n	80058ce <USB_EPStartXfer+0x852>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058a4:	b292      	uxth	r2, r2
 80058a6:	605a      	str	r2, [r3, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ba:	041a      	lsls	r2, r3, #16
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	895b      	ldrh	r3, [r3, #10]
 80058d2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6959      	ldr	r1, [r3, #20]
 80058d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058da:	b29b      	uxth	r3, r3
 80058dc:	8b7a      	ldrh	r2, [r7, #26]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fd42 	bl	8006368 <USB_WritePMA>
 80058e4:	e0a4      	b.n	8005a30 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d16d      	bne.n	80059ca <USB_EPStartXfer+0x94e>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800590c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005914:	2b00      	cmp	r3, #0
 8005916:	d112      	bne.n	800593e <USB_EPStartXfer+0x8c2>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005922:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005936:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e06d      	b.n	8005a1a <USB_EPStartXfer+0x99e>
 800593e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005940:	2b3e      	cmp	r3, #62	@ 0x3e
 8005942:	d821      	bhi.n	8005988 <USB_EPStartXfer+0x90c>
 8005944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800594a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <USB_EPStartXfer+0x8de>
 8005954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005956:	3301      	adds	r3, #1
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596c:	069a      	lsls	r2, r3, #26
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e04b      	b.n	8005a1a <USB_EPStartXfer+0x99e>
 8005982:	bf00      	nop
 8005984:	07ff8e8f 	.word	0x07ff8e8f
 8005988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800598e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <USB_EPStartXfer+0x922>
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	3b01      	subs	r3, #1
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b0:	069b      	lsls	r3, r3, #26
 80059b2:	431a      	orrs	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e027      	b.n	8005a1a <USB_EPStartXfer+0x99e>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d123      	bne.n	8005a1a <USB_EPStartXfer+0x99e>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059f0:	b292      	uxth	r2, r2
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a06:	041a      	lsls	r2, r3, #16
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	891b      	ldrh	r3, [r3, #8]
 8005a1e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6959      	ldr	r1, [r3, #20]
 8005a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8b7a      	ldrh	r2, [r7, #26]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fc9c 	bl	8006368 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b8b      	ldr	r3, [pc, #556]	@ (8005c6c <USB_EPStartXfer+0xbf0>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f083 0310 	eor.w	r3, r3, #16
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f083 0320 	eor.w	r3, r3, #32
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e36b      	b.n	8006142 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	7b1b      	ldrb	r3, [r3, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 8081 	bne.w	8005b76 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d909      	bls.n	8005a94 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8c:	1ad2      	subs	r2, r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	619a      	str	r2, [r3, #24]
 8005a92:	e005      	b.n	8005aa0 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005aba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005abe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d112      	bne.n	8005af0 <USB_EPStartXfer+0xa74>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ae4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ae8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	e30c      	b.n	800610a <USB_EPStartXfer+0x108e>
 8005af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005af4:	d81e      	bhi.n	8005b34 <USB_EPStartXfer+0xab8>
 8005af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <USB_EPStartXfer+0xa90>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	3301      	adds	r3, #1
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	069a      	lsls	r2, r3, #26
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e2ea      	b.n	800610a <USB_EPStartXfer+0x108e>
 8005b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <USB_EPStartXfer+0xace>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	3b01      	subs	r3, #1
 8005b48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	069b      	lsls	r3, r3, #26
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b6e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	e2c9      	b.n	800610a <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	78db      	ldrb	r3, [r3, #3]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	f040 8176 	bne.w	8005e6c <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d173      	bne.n	8005c70 <USB_EPStartXfer+0xbf4>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ba2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ba6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d112      	bne.n	8005bda <USB_EPStartXfer+0xb5e>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bd2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e073      	b.n	8005cc2 <USB_EPStartXfer+0xc46>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b3e      	cmp	r3, #62	@ 0x3e
 8005be0:	d820      	bhi.n	8005c24 <USB_EPStartXfer+0xba8>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <USB_EPStartXfer+0xb80>
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0e:	069a      	lsls	r2, r3, #26
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e04e      	b.n	8005cc2 <USB_EPStartXfer+0xc46>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 031f 	and.w	r3, r3, #31
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <USB_EPStartXfer+0xbc2>
 8005c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c50:	069b      	lsls	r3, r3, #26
 8005c52:	431a      	orrs	r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c62:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e02b      	b.n	8005cc2 <USB_EPStartXfer+0xc46>
 8005c6a:	bf00      	nop
 8005c6c:	07ff8fbf 	.word	0x07ff8fbf
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d124      	bne.n	8005cc2 <USB_EPStartXfer+0xc46>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c96:	b292      	uxth	r2, r2
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ca4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	041a      	lsls	r2, r3, #16
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d170      	bne.n	8005dac <USB_EPStartXfer+0xd30>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ce4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ce8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d112      	bne.n	8005d1c <USB_EPStartXfer+0xca0>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	e070      	b.n	8005dfe <USB_EPStartXfer+0xd82>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d22:	d820      	bhi.n	8005d66 <USB_EPStartXfer+0xcea>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <USB_EPStartXfer+0xcc2>
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	069a      	lsls	r2, r3, #26
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	e04b      	b.n	8005dfe <USB_EPStartXfer+0xd82>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <USB_EPStartXfer+0xd04>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	069b      	lsls	r3, r3, #26
 8005d94:	431a      	orrs	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005da0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005da4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	e028      	b.n	8005dfe <USB_EPStartXfer+0xd82>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d124      	bne.n	8005dfe <USB_EPStartXfer+0xd82>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005de0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	041a      	lsls	r2, r3, #16
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8181 	beq.w	800610a <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <USB_EPStartXfer+0xdae>
 8005e20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 816a 	bne.w	800610a <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8164 	bne.w	800610a <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	4b98      	ldr	r3, [pc, #608]	@ (80060b0 <USB_EPStartXfer+0x1034>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	623b      	str	r3, [r7, #32]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e14e      	b.n	800610a <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	f040 8148 	bne.w	8006106 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d909      	bls.n	8005e96 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	619a      	str	r2, [r3, #24]
 8005e94:	e005      	b.n	8005ea2 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d16a      	bne.n	8005f80 <USB_EPStartXfer+0xf04>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ec8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d112      	bne.n	8005efa <USB_EPStartXfer+0xe7e>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005eee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ef2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e06a      	b.n	8005fd0 <USB_EPStartXfer+0xf54>
 8005efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005efc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005efe:	d81e      	bhi.n	8005f3e <USB_EPStartXfer+0xec2>
 8005f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <USB_EPStartXfer+0xe9a>
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	3301      	adds	r3, #1
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	069a      	lsls	r2, r3, #26
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e048      	b.n	8005fd0 <USB_EPStartXfer+0xf54>
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <USB_EPStartXfer+0xed8>
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	3b01      	subs	r3, #1
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	069b      	lsls	r3, r3, #26
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f78:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e027      	b.n	8005fd0 <USB_EPStartXfer+0xf54>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d123      	bne.n	8005fd0 <USB_EPStartXfer+0xf54>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fbc:	041a      	lsls	r2, r3, #16
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d16d      	bne.n	80060b4 <USB_EPStartXfer+0x1038>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fe2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ff6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d112      	bne.n	8006028 <USB_EPStartXfer+0xfac>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800600c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800601c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006020:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	e070      	b.n	800610a <USB_EPStartXfer+0x108e>
 8006028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800602a:	2b3e      	cmp	r3, #62	@ 0x3e
 800602c:	d81e      	bhi.n	800606c <USB_EPStartXfer+0xff0>
 800602e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <USB_EPStartXfer+0xfc8>
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	3301      	adds	r3, #1
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800604e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	069a      	lsls	r2, r3, #26
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006062:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e04e      	b.n	800610a <USB_EPStartXfer+0x108e>
 800606c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <USB_EPStartXfer+0x1006>
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	3b01      	subs	r3, #1
 8006080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800608c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	069b      	lsls	r3, r3, #26
 8006096:	431a      	orrs	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80060aa:	605a      	str	r2, [r3, #4]
 80060ac:	e02d      	b.n	800610a <USB_EPStartXfer+0x108e>
 80060ae:	bf00      	nop
 80060b0:	07ff8f8f 	.word	0x07ff8f8f
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d126      	bne.n	800610a <USB_EPStartXfer+0x108e>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060da:	b292      	uxth	r2, r2
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f0:	041a      	lsls	r2, r3, #16
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e001      	b.n	800610a <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e01c      	b.n	8006144 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b0d      	ldr	r3, [pc, #52]	@ (800614c <USB_EPStartXfer+0x10d0>)
 8006118:	4013      	ands	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3758      	adds	r7, #88	@ 0x58
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	07ffbf8f 	.word	0x07ffbf8f

08006150 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d018      	beq.n	8006194 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b19      	ldr	r3, [pc, #100]	@ (80061d4 <USB_EPSetStall+0x84>)
 8006170:	4013      	ands	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f083 0310 	eor.w	r3, r3, #16
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800618c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e017      	b.n	80061c4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <USB_EPSetStall+0x88>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	07ff8fbf 	.word	0x07ff8fbf
 80061d8:	07ffbf8f 	.word	0x07ffbf8f

080061dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b089      	sub	sp, #36	@ 0x24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	7b1b      	ldrb	r3, [r3, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d17c      	bne.n	80062e8 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d03c      	beq.n	8006270 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d013      	beq.n	8006236 <USB_EPClearStall+0x5a>
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b37      	ldr	r3, [pc, #220]	@ (80062f8 <USB_EPClearStall+0x11c>)
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006230:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006234:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	78db      	ldrb	r3, [r3, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d054      	beq.n	80062e8 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b2c      	ldr	r3, [pc, #176]	@ (80062fc <USB_EPClearStall+0x120>)
 800624c:	4013      	ands	r3, r2
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f083 0320 	eor.w	r3, r3, #32
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e03b      	b.n	80062e8 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d013      	beq.n	80062b0 <USB_EPClearStall+0xd4>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b18      	ldr	r3, [pc, #96]	@ (80062f8 <USB_EPClearStall+0x11c>)
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ae:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <USB_EPClearStall+0x124>)
 80062be:	4013      	ands	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e6:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	@ 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	07ff8f8f 	.word	0x07ff8f8f
 80062fc:	07ff8fbf 	.word	0x07ff8fbf
 8006300:	07ffbf8f 	.word	0x07ffbf8f

08006304 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2280      	movs	r2, #128	@ 0x80
 800631a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006358:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006368:	b480      	push	{r7}
 800636a:	b08b      	sub	sp, #44	@ 0x2c
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4611      	mov	r1, r2
 8006374:	461a      	mov	r2, r3
 8006376:	460b      	mov	r3, r1
 8006378:	80fb      	strh	r3, [r7, #6]
 800637a:	4613      	mov	r3, r2
 800637c:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800637e:	88bb      	ldrh	r3, [r7, #4]
 8006380:	3303      	adds	r3, #3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8006392:	8afb      	ldrh	r3, [r7, #22]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <USB_WritePMA+0x36>
  {
    NbWords--;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	3b01      	subs	r3, #1
 800639c:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063a8:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	e015      	b.n	80063dc <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	601a      	str	r2, [r3, #0]
    pdwVal++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3304      	adds	r3, #4
 80063bc:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]
    pBuf++;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3301      	adds	r3, #1
 80063c8:	613b      	str	r3, [r7, #16]
    pBuf++;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3301      	adds	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
    pBuf++;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	3301      	adds	r3, #1
 80063d4:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	3b01      	subs	r3, #1
 80063da:	623b      	str	r3, [r7, #32]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e6      	bne.n	80063b0 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 80063e2:	8afb      	ldrh	r3, [r7, #22]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01a      	beq.n	800641e <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	4313      	orrs	r3, r2
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	3301      	adds	r3, #1
 8006404:	623b      	str	r3, [r7, #32]
      pBuf++;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800640c:	8afb      	ldrh	r3, [r7, #22]
 800640e:	3b01      	subs	r3, #1
 8006410:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8006412:	8afb      	ldrh	r3, [r7, #22]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e9      	bne.n	80063ec <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641c:	601a      	str	r2, [r3, #0]
  }
}
 800641e:	bf00      	nop
 8006420:	372c      	adds	r7, #44	@ 0x2c
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800642a:	b480      	push	{r7}
 800642c:	b08b      	sub	sp, #44	@ 0x2c
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	4611      	mov	r1, r2
 8006436:	461a      	mov	r2, r3
 8006438:	460b      	mov	r3, r1
 800643a:	80fb      	strh	r3, [r7, #6]
 800643c:	4613      	mov	r3, r2
 800643e:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8006440:	88bb      	ldrh	r3, [r7, #4]
 8006442:	3303      	adds	r3, #3
 8006444:	089b      	lsrs	r3, r3, #2
 8006446:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8006448:	88bb      	ldrh	r3, [r7, #4]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800645a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800645e:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8006460:	8b7b      	ldrh	r3, [r7, #26]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <USB_ReadPMA+0x42>
  {
    NbWords--;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3b01      	subs	r3, #1
 800646a:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006470:	e015      	b.n	800649e <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	3304      	adds	r3, #4
 800647e:	623b      	str	r3, [r7, #32]
    pBuf++;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	3301      	adds	r3, #1
 8006484:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	3301      	adds	r3, #1
 800648a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3301      	adds	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
    pBuf++;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	3301      	adds	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	3b01      	subs	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80064a4:	8b7b      	ldrh	r3, [r7, #26]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	701a      	strb	r2, [r3, #0]
      count++;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	3301      	adds	r3, #1
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3301      	adds	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 80064ce:	8b7b      	ldrh	r3, [r7, #26]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 80064d4:	8b7b      	ldrh	r3, [r7, #26]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ea      	bne.n	80064b0 <USB_ReadPMA+0x86>
  }
}
 80064da:	bf00      	nop
 80064dc:	372c      	adds	r7, #44	@ 0x2c
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80064f8:	f001 fd2c 	bl	8007f54 <USBD_static_malloc>
 80064fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	33b0      	adds	r3, #176	@ 0xb0
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	2200      	movs	r2, #0
 8006514:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8006516:	2302      	movs	r3, #2
 8006518:	e0fd      	b.n	8006716 <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800651a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800651e:	2100      	movs	r1, #0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f003 fb62 	bl	8009bea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	33b0      	adds	r3, #176	@ 0xb0
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	33b0      	adds	r3, #176	@ 0xb0
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2202      	movs	r2, #2
 8006558:	2180      	movs	r1, #128	@ 0x80
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f002 f9a6 	bl	80088ac <USBD_CoreGetEPAdd>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	4b6e      	ldr	r3, [pc, #440]	@ (8006720 <USBD_CDC_Init+0x238>)
 8006566:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2202      	movs	r2, #2
 8006572:	2100      	movs	r1, #0
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f002 f999 	bl	80088ac <USBD_CoreGetEPAdd>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4b69      	ldr	r3, [pc, #420]	@ (8006724 <USBD_CDC_Init+0x23c>)
 8006580:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2203      	movs	r2, #3
 800658c:	2180      	movs	r1, #128	@ 0x80
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f002 f98c 	bl	80088ac <USBD_CoreGetEPAdd>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	4b63      	ldr	r3, [pc, #396]	@ (8006728 <USBD_CDC_Init+0x240>)
 800659a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7c1b      	ldrb	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d138      	bne.n	8006616 <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006720 <USBD_CDC_Init+0x238>)
 80065a6:	7819      	ldrb	r1, [r3, #0]
 80065a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065ac:	2202      	movs	r2, #2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fbd7 	bl	8007d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065b4:	4b5a      	ldr	r3, [pc, #360]	@ (8006720 <USBD_CDC_Init+0x238>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3324      	adds	r3, #36	@ 0x24
 80065ca:	2201      	movs	r2, #1
 80065cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065ce:	4b55      	ldr	r3, [pc, #340]	@ (8006724 <USBD_CDC_Init+0x23c>)
 80065d0:	7819      	ldrb	r1, [r3, #0]
 80065d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065d6:	2202      	movs	r2, #2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fbc2 	bl	8007d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065de:	4b51      	ldr	r3, [pc, #324]	@ (8006724 <USBD_CDC_Init+0x23c>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f003 020f 	and.w	r2, r3, #15
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065f6:	2201      	movs	r2, #1
 80065f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006728 <USBD_CDC_Init+0x240>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	3326      	adds	r3, #38	@ 0x26
 8006610:	2210      	movs	r2, #16
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e035      	b.n	8006682 <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006616:	4b42      	ldr	r3, [pc, #264]	@ (8006720 <USBD_CDC_Init+0x238>)
 8006618:	7819      	ldrb	r1, [r3, #0]
 800661a:	2340      	movs	r3, #64	@ 0x40
 800661c:	2202      	movs	r2, #2
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fb9f 	bl	8007d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006624:	4b3e      	ldr	r3, [pc, #248]	@ (8006720 <USBD_CDC_Init+0x238>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f003 020f 	and.w	r2, r3, #15
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	3324      	adds	r3, #36	@ 0x24
 800663a:	2201      	movs	r2, #1
 800663c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800663e:	4b39      	ldr	r3, [pc, #228]	@ (8006724 <USBD_CDC_Init+0x23c>)
 8006640:	7819      	ldrb	r1, [r3, #0]
 8006642:	2340      	movs	r3, #64	@ 0x40
 8006644:	2202      	movs	r2, #2
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fb8b 	bl	8007d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800664c:	4b35      	ldr	r3, [pc, #212]	@ (8006724 <USBD_CDC_Init+0x23c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006664:	2201      	movs	r2, #1
 8006666:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006668:	4b2f      	ldr	r3, [pc, #188]	@ (8006728 <USBD_CDC_Init+0x240>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 020f 	and.w	r2, r3, #15
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	3326      	adds	r3, #38	@ 0x26
 800667e:	2210      	movs	r2, #16
 8006680:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006682:	4b29      	ldr	r3, [pc, #164]	@ (8006728 <USBD_CDC_Init+0x240>)
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	2308      	movs	r3, #8
 8006688:	2203      	movs	r2, #3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fb69 	bl	8007d62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006690:	4b25      	ldr	r3, [pc, #148]	@ (8006728 <USBD_CDC_Init+0x240>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3324      	adds	r3, #36	@ 0x24
 80066a6:	2201      	movs	r2, #1
 80066a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	33b2      	adds	r3, #178	@ 0xb2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 80066e0:	2302      	movs	r3, #2
 80066e2:	e018      	b.n	8006716 <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7c1b      	ldrb	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <USBD_CDC_Init+0x23c>)
 80066ee:	7819      	ldrb	r1, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fbfc 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8006700:	e008      	b.n	8006714 <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006702:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <USBD_CDC_Init+0x23c>)
 8006704:	7819      	ldrb	r1, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800670c:	2340      	movs	r3, #64	@ 0x40
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fbf2 	bl	8007ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000048 	.word	0x20000048
 8006724:	20000049 	.word	0x20000049
 8006728:	2000004a 	.word	0x2000004a

0800672c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2202      	movs	r2, #2
 8006742:	2180      	movs	r1, #128	@ 0x80
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f002 f8b1 	bl	80088ac <USBD_CoreGetEPAdd>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	4b4a      	ldr	r3, [pc, #296]	@ (8006878 <USBD_CDC_DeInit+0x14c>)
 8006750:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2202      	movs	r2, #2
 800675c:	2100      	movs	r1, #0
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f002 f8a4 	bl	80088ac <USBD_CoreGetEPAdd>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	4b44      	ldr	r3, [pc, #272]	@ (800687c <USBD_CDC_DeInit+0x150>)
 800676a:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2203      	movs	r2, #3
 8006776:	2180      	movs	r1, #128	@ 0x80
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 f897 	bl	80088ac <USBD_CoreGetEPAdd>
 800677e:	4603      	mov	r3, r0
 8006780:	461a      	mov	r2, r3
 8006782:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <USBD_CDC_DeInit+0x154>)
 8006784:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006786:	4b3c      	ldr	r3, [pc, #240]	@ (8006878 <USBD_CDC_DeInit+0x14c>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fb08 	bl	8007da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006792:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <USBD_CDC_DeInit+0x14c>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	f003 020f 	and.w	r2, r3, #15
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	3324      	adds	r3, #36	@ 0x24
 80067a8:	2200      	movs	r2, #0
 80067aa:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067ac:	4b33      	ldr	r3, [pc, #204]	@ (800687c <USBD_CDC_DeInit+0x150>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 faf5 	bl	8007da2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067b8:	4b30      	ldr	r3, [pc, #192]	@ (800687c <USBD_CDC_DeInit+0x150>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067d0:	2200      	movs	r2, #0
 80067d2:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006880 <USBD_CDC_DeInit+0x154>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fae1 	bl	8007da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067e0:	4b27      	ldr	r3, [pc, #156]	@ (8006880 <USBD_CDC_DeInit+0x154>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	3324      	adds	r3, #36	@ 0x24
 80067f6:	2200      	movs	r2, #0
 80067f8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067fa:	4b21      	ldr	r3, [pc, #132]	@ (8006880 <USBD_CDC_DeInit+0x154>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 020f 	and.w	r2, r3, #15
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	3326      	adds	r3, #38	@ 0x26
 8006810:	2200      	movs	r2, #0
 8006812:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	33b0      	adds	r3, #176	@ 0xb0
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d021      	beq.n	800686c <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	33b2      	adds	r3, #178	@ 0xb2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	33b0      	adds	r3, #176	@ 0xb0
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fb8f 	bl	8007f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	33b0      	adds	r3, #176	@ 0xb0
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000048 	.word	0x20000048
 800687c:	20000049 	.word	0x20000049
 8006880:	2000004a 	.word	0x2000004a

08006884 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	33b0      	adds	r3, #176	@ 0xb0
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0c0      	b.n	8006a38 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d050      	beq.n	8006964 <USBD_CDC_Setup+0xe0>
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	f040 80b0 	bne.w	8006a28 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	88db      	ldrh	r3, [r3, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03a      	beq.n	8006946 <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b25b      	sxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da1b      	bge.n	8006912 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	33b2      	adds	r3, #178	@ 0xb2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	88d2      	ldrh	r2, [r2, #6]
 80068f6:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	88db      	ldrh	r3, [r3, #6]
 80068fc:	2b07      	cmp	r3, #7
 80068fe:	bf28      	it	cs
 8006900:	2307      	movcs	r3, #7
 8006902:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	89fa      	ldrh	r2, [r7, #14]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f002 ffcd 	bl	80098aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006910:	e091      	b.n	8006a36 <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785a      	ldrb	r2, [r3, #1]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	88db      	ldrh	r3, [r3, #6]
 8006920:	2b3f      	cmp	r3, #63	@ 0x3f
 8006922:	d803      	bhi.n	800692c <USBD_CDC_Setup+0xa8>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	e000      	b.n	800692e <USBD_CDC_Setup+0xaa>
 800692c:	2240      	movs	r2, #64	@ 0x40
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006934:	6939      	ldr	r1, [r7, #16]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800693c:	461a      	mov	r2, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f002 ffdf 	bl	8009902 <USBD_CtlPrepareRx>
      break;
 8006944:	e077      	b.n	8006a36 <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	33b2      	adds	r3, #178	@ 0xb2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	7850      	ldrb	r0, [r2, #1]
 800695c:	2200      	movs	r2, #0
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	4798      	blx	r3
      break;
 8006962:	e068      	b.n	8006a36 <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	2b0b      	cmp	r3, #11
 800696a:	d852      	bhi.n	8006a12 <USBD_CDC_Setup+0x18e>
 800696c:	a201      	add	r2, pc, #4	@ (adr r2, 8006974 <USBD_CDC_Setup+0xf0>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	080069a5 	.word	0x080069a5
 8006978:	08006a21 	.word	0x08006a21
 800697c:	08006a13 	.word	0x08006a13
 8006980:	08006a13 	.word	0x08006a13
 8006984:	08006a13 	.word	0x08006a13
 8006988:	08006a13 	.word	0x08006a13
 800698c:	08006a13 	.word	0x08006a13
 8006990:	08006a13 	.word	0x08006a13
 8006994:	08006a13 	.word	0x08006a13
 8006998:	08006a13 	.word	0x08006a13
 800699c:	080069cf 	.word	0x080069cf
 80069a0:	080069f9 	.word	0x080069f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d107      	bne.n	80069c0 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069b0:	f107 030a 	add.w	r3, r7, #10
 80069b4:	2202      	movs	r2, #2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f002 ff76 	bl	80098aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069be:	e032      	b.n	8006a26 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f002 fdf1 	bl	80095aa <USBD_CtlError>
            ret = USBD_FAIL;
 80069c8:	2303      	movs	r3, #3
 80069ca:	75fb      	strb	r3, [r7, #23]
          break;
 80069cc:	e02b      	b.n	8006a26 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d107      	bne.n	80069ea <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069da:	f107 030d 	add.w	r3, r7, #13
 80069de:	2201      	movs	r2, #1
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f002 ff61 	bl	80098aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e8:	e01d      	b.n	8006a26 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f002 fddc 	bl	80095aa <USBD_CtlError>
            ret = USBD_FAIL;
 80069f2:	2303      	movs	r3, #3
 80069f4:	75fb      	strb	r3, [r7, #23]
          break;
 80069f6:	e016      	b.n	8006a26 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d00f      	beq.n	8006a24 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 fdcf 	bl	80095aa <USBD_CtlError>
            ret = USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a10:	e008      	b.n	8006a24 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f002 fdc8 	bl	80095aa <USBD_CtlError>
          ret = USBD_FAIL;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1e:	e002      	b.n	8006a26 <USBD_CDC_Setup+0x1a2>
          break;
 8006a20:	bf00      	nop
 8006a22:	e008      	b.n	8006a36 <USBD_CDC_Setup+0x1b2>
          break;
 8006a24:	bf00      	nop
      }
      break;
 8006a26:	e006      	b.n	8006a36 <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f002 fdbd 	bl	80095aa <USBD_CtlError>
      ret = USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	75fb      	strb	r3, [r7, #23]
      break;
 8006a34:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	33b0      	adds	r3, #176	@ 0xb0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e066      	b.n	8006b3a <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	33b0      	adds	r3, #176	@ 0xb0
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3318      	adds	r3, #24
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02f      	beq.n	8006af8 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	f003 020f 	and.w	r2, r3, #15
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3318      	adds	r3, #24
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	f003 010f 	and.w	r1, r3, #15
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	4403      	add	r3, r0
 8006ac0:	3324      	adds	r3, #36	@ 0x24
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d112      	bne.n	8006af8 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3318      	adds	r3, #24
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aea:	78f9      	ldrb	r1, [r7, #3]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 f9e6 	bl	8007ec2 <USBD_LL_Transmit>
 8006af6:	e01f      	b.n	8006b38 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	33b2      	adds	r3, #178	@ 0xb2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	33b2      	adds	r3, #178	@ 0xb2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	33b0      	adds	r3, #176	@ 0xb0
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	33b0      	adds	r3, #176	@ 0xb0
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e01a      	b.n	8006bae <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f9d6 	bl	8007f2e <USBD_LL_GetRxDataSize>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	33b2      	adds	r3, #178	@ 0xb2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	33b0      	adds	r3, #176	@ 0xb0
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e024      	b.n	8006c24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	33b2      	adds	r3, #178	@ 0xb2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d019      	beq.n	8006c22 <USBD_CDC_EP0_RxReady+0x6c>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bf4:	2bff      	cmp	r3, #255	@ 0xff
 8006bf6:	d014      	beq.n	8006c22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	33b2      	adds	r3, #178	@ 0xb2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c10:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	22ff      	movs	r2, #255	@ 0xff
 8006c1e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e009      	b.n	8006c54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	33b2      	adds	r3, #178	@ 0xb2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	33b0      	adds	r3, #176	@ 0xb0
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e008      	b.n	8006c98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	33b0      	adds	r3, #176	@ 0xb0
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e004      	b.n	8006cd4 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	33b0      	adds	r3, #176	@ 0xb0
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	2202      	movs	r2, #2
 8006d02:	2180      	movs	r1, #128	@ 0x80
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fdd1 	bl	80088ac <USBD_CoreGetEPAdd>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <USBD_CDC_TransmitPacket+0x90>)
 8006d10:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e025      	b.n	8006d68 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d11f      	bne.n	8006d66 <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d2e:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <USBD_CDC_TransmitPacket+0x90>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4403      	add	r3, r0
 8006d48:	3318      	adds	r3, #24
 8006d4a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006d4c:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <USBD_CDC_TransmitPacket+0x90>)
 8006d4e:	7819      	ldrb	r1, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f8b0 	bl	8007ec2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000048 	.word	0x20000048

08006d74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	33b0      	adds	r3, #176	@ 0xb0
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2202      	movs	r2, #2
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fd86 	bl	80088ac <USBD_CoreGetEPAdd>
 8006da0:	4603      	mov	r3, r0
 8006da2:	461a      	mov	r2, r3
 8006da4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <USBD_CDC_ReceivePacket+0xa4>)
 8006da6:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	33b0      	adds	r3, #176	@ 0xb0
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e027      	b.n	8006e10 <USBD_CDC_ReceivePacket+0x9c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dc8:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <USBD_CDC_ReceivePacket+0xa4>)
 8006dca:	7819      	ldrb	r1, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 f88e 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8006ddc:	e008      	b.n	8006df0 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <USBD_CDC_ReceivePacket+0xa4>)
 8006de0:	7819      	ldrb	r1, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006de8:	2340      	movs	r3, #64	@ 0x40
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 f884 	bl	8007ef8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  USBD_CDC_SetTxBuffer(pdev, hcdc->RxBuffer, sizeof(hcdc->RxBuffer), CDC_InstID);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <USBD_CDC_ReceivePacket+0xa8>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff ff2f 	bl	8006c60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_TransmitPacket(pdev,CDC_InstID);
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <USBD_CDC_ReceivePacket+0xa8>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff69 	bl	8006ce0 <USBD_CDC_TransmitPacket>
  return (uint8_t)USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000049 	.word	0x20000049
 8006e1c:	200007dc 	.word	0x200007dc

08006e20 <TEMPLATE_Init>:
 *         Initializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Init(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 8006e24:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <TEMPLATE_Init+0x2c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <TEMPLATE_Init+0x30>)
 8006e2c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBuffer, sizeof("MY CDC is Working!\r\n"), CDC_InstID);
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <TEMPLATE_Init+0x2c>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2215      	movs	r2, #21
 8006e36:	4907      	ldr	r1, [pc, #28]	@ (8006e54 <TEMPLATE_Init+0x34>)
 8006e38:	4805      	ldr	r0, [pc, #20]	@ (8006e50 <TEMPLATE_Init+0x30>)
 8006e3a:	f7ff ff11 	bl	8006c60 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 8006e3e:	4906      	ldr	r1, [pc, #24]	@ (8006e58 <TEMPLATE_Init+0x38>)
 8006e40:	4803      	ldr	r0, [pc, #12]	@ (8006e50 <TEMPLATE_Init+0x30>)
 8006e42:	f7ff ff2f 	bl	8006ca4 <USBD_CDC_SetRxBuffer>

	return (USBD_OK);
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	200007dc 	.word	0x200007dc
 8006e50:	20000498 	.word	0x20000498
 8006e54:	20000068 	.word	0x20000068
 8006e58:	200007e8 	.word	0x200007e8

08006e5c <TEMPLATE_DeInit>:
 *         DeInitializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_DeInit(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
	/*
     Add your deinitialization code here
	 */
	return (0);
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <TEMPLATE_Control>:
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80bb      	strh	r3, [r7, #4]
	UNUSED(length);

	switch (cmd)
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b23      	cmp	r3, #35	@ 0x23
 8006e80:	f200 8098 	bhi.w	8006fb4 <TEMPLATE_Control+0x148>
 8006e84:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <TEMPLATE_Control+0x20>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006fb5 	.word	0x08006fb5
 8006e90:	08006fb5 	.word	0x08006fb5
 8006e94:	08006fb5 	.word	0x08006fb5
 8006e98:	08006fb5 	.word	0x08006fb5
 8006e9c:	08006fb5 	.word	0x08006fb5
 8006ea0:	08006fb5 	.word	0x08006fb5
 8006ea4:	08006fb5 	.word	0x08006fb5
 8006ea8:	08006fb5 	.word	0x08006fb5
 8006eac:	08006fb5 	.word	0x08006fb5
 8006eb0:	08006fb5 	.word	0x08006fb5
 8006eb4:	08006fb5 	.word	0x08006fb5
 8006eb8:	08006fb5 	.word	0x08006fb5
 8006ebc:	08006fb5 	.word	0x08006fb5
 8006ec0:	08006fb5 	.word	0x08006fb5
 8006ec4:	08006fb5 	.word	0x08006fb5
 8006ec8:	08006fb5 	.word	0x08006fb5
 8006ecc:	08006fb5 	.word	0x08006fb5
 8006ed0:	08006fb5 	.word	0x08006fb5
 8006ed4:	08006fb5 	.word	0x08006fb5
 8006ed8:	08006fb5 	.word	0x08006fb5
 8006edc:	08006fb5 	.word	0x08006fb5
 8006ee0:	08006fb5 	.word	0x08006fb5
 8006ee4:	08006fb5 	.word	0x08006fb5
 8006ee8:	08006fb5 	.word	0x08006fb5
 8006eec:	08006fb5 	.word	0x08006fb5
 8006ef0:	08006fb5 	.word	0x08006fb5
 8006ef4:	08006fb5 	.word	0x08006fb5
 8006ef8:	08006fb5 	.word	0x08006fb5
 8006efc:	08006fb5 	.word	0x08006fb5
 8006f00:	08006fb5 	.word	0x08006fb5
 8006f04:	08006fb5 	.word	0x08006fb5
 8006f08:	08006fb5 	.word	0x08006fb5
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006fb5 	.word	0x08006fb5
 8006f18:	08006fb5 	.word	0x08006fb5
	case CDC_CLEAR_COMM_FEATURE:
		/* Add your code here */
		break;

	case CDC_SET_LINE_CODING:
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	461a      	mov	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	3302      	adds	r3, #2
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	041b      	lsls	r3, r3, #16
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8006f34:	431a      	orrs	r2, r3
				(pbuf[2] << 16) | (pbuf[3] << 24));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	3303      	adds	r3, #3
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	061b      	lsls	r3, r3, #24
 8006f3e:	4313      	orrs	r3, r2
		linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f44:	601a      	str	r2, [r3, #0]
		linecoding.format     = pbuf[4];
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	791a      	ldrb	r2, [r3, #4]
 8006f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f4c:	711a      	strb	r2, [r3, #4]
		linecoding.paritytype = pbuf[5];
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	795a      	ldrb	r2, [r3, #5]
 8006f52:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f54:	715a      	strb	r2, [r3, #5]
		linecoding.datatype   = pbuf[6];
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	799a      	ldrb	r2, [r3, #6]
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f5c:	719a      	strb	r2, [r3, #6]

		/* Add your code here */
		break;
 8006f5e:	e02a      	b.n	8006fb6 <TEMPLATE_Control+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(linecoding.bitrate);
 8006f60:	4b18      	ldr	r3, [pc, #96]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8006f6a:	4b16      	ldr	r3, [pc, #88]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	0a1a      	lsrs	r2, r3, #8
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8006f78:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	0c1a      	lsrs	r2, r3, #16
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	3302      	adds	r3, #2
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8006f86:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	0e1a      	lsrs	r2, r3, #24
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	3303      	adds	r3, #3
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
		pbuf[4] = linecoding.format;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4a0a      	ldr	r2, [pc, #40]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006f9a:	7912      	ldrb	r2, [r2, #4]
 8006f9c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = linecoding.paritytype;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	3305      	adds	r3, #5
 8006fa2:	4a08      	ldr	r2, [pc, #32]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006fa4:	7952      	ldrb	r2, [r2, #5]
 8006fa6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = linecoding.datatype;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	3306      	adds	r3, #6
 8006fac:	4a05      	ldr	r2, [pc, #20]	@ (8006fc4 <TEMPLATE_Control+0x158>)
 8006fae:	7992      	ldrb	r2, [r2, #6]
 8006fb0:	701a      	strb	r2, [r3, #0]

		/* Add your code here */
		break;
 8006fb2:	e000      	b.n	8006fb6 <TEMPLATE_Control+0x14a>
	case CDC_SEND_BREAK:
		/* Add your code here */
		break;

	default:
		break;
 8006fb4:	bf00      	nop
	}

	return (0);
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	20000060 	.word	0x20000060

08006fc8 <TEMPLATE_Receive>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4805      	ldr	r0, [pc, #20]	@ (8006fec <TEMPLATE_Receive+0x24>)
 8006fd6:	f7ff fe65 	bl	8006ca4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006fda:	4804      	ldr	r0, [pc, #16]	@ (8006fec <TEMPLATE_Receive+0x24>)
 8006fdc:	f7ff feca 	bl	8006d74 <USBD_CDC_ReceivePacket>

	//USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);

	return (USBD_OK);
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000498 	.word	0x20000498

08006ff0 <TEMPLATE_TransmitCplt>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]
	int8_t result = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
//	UNUSED(Len);
//	UNUSED(epnum);
//	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len, epnum);
//	result =USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);

	return result;
 8007002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007006:	4618      	mov	r0, r3
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4611      	mov	r1, r2
 800701e:	461a      	mov	r2, r3
 8007020:	460b      	mov	r3, r1
 8007022:	71fb      	strb	r3, [r7, #7]
 8007024:	4613      	mov	r3, r2
 8007026:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d842      	bhi.n	80070b8 <USBD_CMPSIT_AddClass+0xa6>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	212c      	movs	r1, #44	@ 0x2c
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	4413      	add	r3, r2
 8007042:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d135      	bne.n	80070b8 <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	32ae      	adds	r2, #174	@ 0xae
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	202c      	movs	r0, #44	@ 0x2c
 800706c:	fb00 f303 	mul.w	r3, r0, r3
 8007070:	440b      	add	r3, r1
 8007072:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8007076:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	212c      	movs	r1, #44	@ 0x2c
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	4413      	add	r3, r2
 8007088:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800708c:	2201      	movs	r2, #1
 800708e:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	212c      	movs	r1, #44	@ 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80070a4:	79fa      	ldrb	r2, [r7, #7]
 80070a6:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f80b 	bl	80070c4 <USBD_CMPSIT_AddToConfDesc>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e000      	b.n	80070ba <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 80070de:	4b88      	ldr	r3, [pc, #544]	@ (8007300 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4988      	ldr	r1, [pc, #544]	@ (8007304 <USBD_CMPSIT_AddToConfDesc+0x240>)
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f976 	bl	80073d6 <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	212c      	movs	r1, #44	@ 0x2c
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d002      	beq.n	800710a <USBD_CMPSIT_AddToConfDesc+0x46>
 8007104:	2b02      	cmp	r3, #2
 8007106:	d05b      	beq.n	80071c0 <USBD_CMPSIT_AddToConfDesc+0xfc>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 8007108:	e0f4      	b.n	80072f4 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = HID_EPIN_SIZE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	212c      	movs	r1, #44	@ 0x2c
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800711e:	2204      	movs	r2, #4
 8007120:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f928 	bl	8007378 <USBD_CMPSIT_FindFreeIFNbr>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	212c      	movs	r1, #44	@ 0x2c
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8007140:	2201      	movs	r2, #1
 8007142:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	212c      	movs	r1, #44	@ 0x2c
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8007158:	7bfa      	ldrb	r2, [r7, #15]
 800715a:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	212c      	movs	r1, #44	@ 0x2c
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	4413      	add	r3, r2
 800716c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	212c      	movs	r1, #44	@ 0x2c
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	212c      	movs	r1, #44	@ 0x2c
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	7bb9      	ldrb	r1, [r7, #14]
 80071a6:	2203      	movs	r2, #3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f941 	bl	8007430 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_HIDMouseDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 80071ae:	4b54      	ldr	r3, [pc, #336]	@ (8007300 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	2301      	movs	r3, #1
 80071b6:	4a53      	ldr	r2, [pc, #332]	@ (8007304 <USBD_CMPSIT_AddToConfDesc+0x240>)
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9af 	bl	800751c <USBD_CMPSIT_HIDMouseDesc>
      break;
 80071be:	e099      	b.n	80072f4 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	212c      	movs	r1, #44	@ 0x2c
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80071d4:	2240      	movs	r2, #64	@ 0x40
 80071d6:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f8cd 	bl	8007378 <USBD_CMPSIT_FindFreeIFNbr>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	212c      	movs	r1, #44	@ 0x2c
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80071f6:	2202      	movs	r2, #2
 80071f8:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	212c      	movs	r1, #44	@ 0x2c
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800720e:	7bfa      	ldrb	r2, [r7, #15]
 8007210:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007218:	7bfa      	ldrb	r2, [r7, #15]
 800721a:	3201      	adds	r2, #1
 800721c:	b2d0      	uxtb	r0, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	212c      	movs	r1, #44	@ 0x2c
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	4413      	add	r3, r2
 8007228:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 800722c:	4602      	mov	r2, r0
 800722e:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	212c      	movs	r1, #44	@ 0x2c
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8007244:	2203      	movs	r2, #3
 8007246:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	212c      	movs	r1, #44	@ 0x2c
 8007252:	fb01 f303 	mul.w	r3, r1, r3
 8007256:	4413      	add	r3, r2
 8007258:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	212c      	movs	r1, #44	@ 0x2c
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	7bb9      	ldrb	r1, [r7, #14]
 800727a:	2202      	movs	r2, #2
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8d7 	bl	8007430 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	212c      	movs	r1, #44	@ 0x2c
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	212c      	movs	r1, #44	@ 0x2c
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	7bb9      	ldrb	r1, [r7, #14]
 80072b4:	2202      	movs	r2, #2
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8ba 	bl	8007430 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	212c      	movs	r1, #44	@ 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	789b      	ldrb	r3, [r3, #2]
 80072d4:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072d6:	7bb9      	ldrb	r1, [r7, #14]
 80072d8:	2308      	movs	r3, #8
 80072da:	2203      	movs	r2, #3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8a7 	bl	8007430 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 80072e2:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4619      	mov	r1, r3
 80072e8:	2301      	movs	r3, #1
 80072ea:	4a06      	ldr	r2, [pc, #24]	@ (8007304 <USBD_CMPSIT_AddToConfDesc+0x240>)
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9e7 	bl	80076c0 <USBD_CMPSIT_CDCDesc>
      break;
 80072f2:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200000e0 	.word	0x200000e0
 8007304:	20000954 	.word	0x20000954

08007308 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	b29a      	uxth	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 800731a:	4b04      	ldr	r3, [pc, #16]	@ (800732c <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	20000954 	.word	0x20000954
 800732c:	20000828 	.word	0x20000828

08007330 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8007342:	4b04      	ldr	r3, [pc, #16]	@ (8007354 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000954 	.word	0x20000954
 8007354:	20000828 	.word	0x20000828

08007358 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	220a      	movs	r2, #10
 8007364:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8007366:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	200000e4 	.word	0x200000e4

08007378 <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	e017      	b.n	80073ba <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	e005      	b.n	800739c <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3301      	adds	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	212c      	movs	r1, #44	@ 0x2c
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d3ed      	bcc.n	8007390 <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3301      	adds	r3, #1
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d3e1      	bcc.n	800738a <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	b2db      	uxtb	r3, r3
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2209      	movs	r2, #9
 80073e8:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2202      	movs	r2, #2
 80073ee:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	709a      	strb	r2, [r3, #2]
 80073f6:	2200      	movs	r2, #0
 80073f8:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2204      	movs	r2, #4
 800740a:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	22c0      	movs	r2, #192	@ 0xc0
 8007410:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2232      	movs	r2, #50	@ 0x32
 8007416:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f103 0209 	add.w	r2, r3, #9
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	607b      	str	r3, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	72fb      	strb	r3, [r7, #11]
 800743e:	4613      	mov	r3, r2
 8007440:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8007446:	e002      	b.n	800744e <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	3301      	adds	r3, #1
 800744c:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	212c      	movs	r1, #44	@ 0x2c
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	4413      	add	r3, r2
 800745e:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	429a      	cmp	r2, r3
 8007468:	d210      	bcs.n	800748c <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007470:	68f9      	ldr	r1, [r7, #12]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	4413      	add	r3, r2
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4413      	add	r3, r2
 8007480:	33be      	adds	r3, #190	@ 0xbe
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1dd      	bne.n	8007448 <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4413      	add	r3, r2
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	33be      	adds	r3, #190	@ 0xbe
 80074a4:	7afa      	ldrb	r2, [r7, #11]
 80074a6:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80074b0:	68f9      	ldr	r1, [r7, #12]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	4413      	add	r3, r2
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4413      	add	r3, r2
 80074c0:	33be      	adds	r3, #190	@ 0xbe
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	7aba      	ldrb	r2, [r7, #10]
 80074c8:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	b2d8      	uxtb	r0, r3
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	33be      	adds	r3, #190	@ 0xbe
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	4602      	mov	r2, r0
 80074ec:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4413      	add	r3, r2
 8007504:	33be      	adds	r3, #190	@ 0xbe
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	2201      	movs	r2, #1
 800750c:	70da      	strb	r2, [r3, #3]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <USBD_CMPSIT_HIDMouseDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_HIDMouseDesc(USBD_HandleTypeDef *pdev, uint32_t pConf,
                                      __IO uint32_t *Sze, uint8_t speed)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	70fb      	strb	r3, [r7, #3]
  static USBD_IfDescTypeDef *pIfDesc;
  static USBD_EpDescTypeDef *pEpDesc;
  static USBD_HIDDescTypeDef *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	461a      	mov	r2, r3
 8007534:	4b5f      	ldr	r3, [pc, #380]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	4b5e      	ldr	r3, [pc, #376]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2209      	movs	r2, #9
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	4b5c      	ldr	r3, [pc, #368]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2204      	movs	r2, #4
 8007546:	705a      	strb	r2, [r3, #1]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800754e:	4b59      	ldr	r3, [pc, #356]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68f9      	ldr	r1, [r7, #12]
 8007554:	202c      	movs	r0, #44	@ 0x2c
 8007556:	fb00 f202 	mul.w	r2, r0, r2
 800755a:	440a      	add	r2, r1
 800755c:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	709a      	strb	r2, [r3, #2]
 8007564:	4b53      	ldr	r3, [pc, #332]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2200      	movs	r2, #0
 800756a:	70da      	strb	r2, [r3, #3]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	212c      	movs	r1, #44	@ 0x2c
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b4c      	ldr	r3, [pc, #304]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	4b4a      	ldr	r3, [pc, #296]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2203      	movs	r2, #3
 8007590:	715a      	strb	r2, [r3, #5]
 8007592:	4b48      	ldr	r3, [pc, #288]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2201      	movs	r2, #1
 8007598:	719a      	strb	r2, [r3, #6]
 800759a:	4b46      	ldr	r3, [pc, #280]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2202      	movs	r2, #2
 80075a0:	71da      	strb	r2, [r3, #7]
 80075a2:	4b44      	ldr	r3, [pc, #272]	@ (80076b4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	721a      	strb	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f103 0209 	add.w	r2, r3, #9
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	601a      	str	r2, [r3, #0]
                       (uint8_t)(pdev->tclasslist[pdev->classId].NumEps), 0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypeDef *)(pConf + *Sze));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	461a      	mov	r2, r3
 80075c0:	4b3d      	ldr	r3, [pc, #244]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075c2:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypeDef);
 80075c4:	4b3c      	ldr	r3, [pc, #240]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2209      	movs	r2, #9
 80075ca:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 80075cc:	4b3a      	ldr	r3, [pc, #232]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2221      	movs	r2, #33	@ 0x21
 80075d2:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 80075d4:	4b38      	ldr	r3, [pc, #224]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2200      	movs	r2, #0
 80075da:	f042 0211 	orr.w	r2, r2, #17
 80075de:	709a      	strb	r2, [r3, #2]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 80075e8:	4b33      	ldr	r3, [pc, #204]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2200      	movs	r2, #0
 80075ee:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 80075f0:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 80075f8:	4b2f      	ldr	r3, [pc, #188]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2222      	movs	r2, #34	@ 0x22
 80075fe:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = HID_MOUSE_REPORT_DESC_SIZE;
 8007600:	4b2d      	ldr	r3, [pc, #180]	@ (80076b8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2200      	movs	r2, #0
 8007606:	f042 024a 	orr.w	r2, r2, #74	@ 0x4a
 800760a:	71da      	strb	r2, [r3, #7]
 800760c:	2200      	movs	r2, #0
 800760e:	721a      	strb	r2, [r3, #8]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypeDef);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f103 0209 	add.w	r2, r3, #9
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add, USBD_EP_TYPE_INTR, HID_EPIN_SIZE, \
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4413      	add	r3, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4b25      	ldr	r3, [pc, #148]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	4b24      	ldr	r3, [pc, #144]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2207      	movs	r2, #7
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	4b22      	ldr	r3, [pc, #136]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2205      	movs	r2, #5
 8007638:	705a      	strb	r2, [r3, #1]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007640:	4b1e      	ldr	r3, [pc, #120]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	202c      	movs	r0, #44	@ 0x2c
 8007648:	fb00 f202 	mul.w	r2, r0, r2
 800764c:	440a      	add	r2, r1
 800764e:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8007652:	7812      	ldrb	r2, [r2, #0]
 8007654:	709a      	strb	r2, [r3, #2]
 8007656:	4b19      	ldr	r3, [pc, #100]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2203      	movs	r2, #3
 800765c:	70da      	strb	r2, [r3, #3]
 800765e:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2200      	movs	r2, #0
 8007664:	f042 0204 	orr.w	r2, r2, #4
 8007668:	711a      	strb	r2, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	715a      	strb	r2, [r3, #5]
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <USBD_CMPSIT_HIDMouseDesc+0x162>
 8007674:	4b11      	ldr	r3, [pc, #68]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2207      	movs	r2, #7
 800767a:	719a      	strb	r2, [r3, #6]
 800767c:	e003      	b.n	8007686 <USBD_CMPSIT_HIDMouseDesc+0x16a>
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	220a      	movs	r2, #10
 8007684:	719a      	strb	r2, [r3, #6]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	1dda      	adds	r2, r3, #7
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
                       HID_HS_BINTERVAL, HID_FS_BINTERVAL);

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 1U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	791a      	ldrb	r2, [r3, #4]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	3201      	adds	r2, #1
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength  = (uint16_t)(*Sze);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	b292      	uxth	r2, r2
 80076a4:	805a      	strh	r2, [r3, #2]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000958 	.word	0x20000958
 80076b8:	2000095c 	.word	0x2000095c
 80076bc:	20000960 	.word	0x20000960

080076c0 <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4413      	add	r3, r2
 80076d6:	461a      	mov	r2, r3
 80076d8:	4b9c      	ldr	r3, [pc, #624]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 80076da:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 80076dc:	4b9b      	ldr	r3, [pc, #620]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2208      	movs	r2, #8
 80076e2:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 80076e4:	4b99      	ldr	r3, [pc, #612]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	220b      	movs	r2, #11
 80076ea:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80076f2:	4b96      	ldr	r3, [pc, #600]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	202c      	movs	r0, #44	@ 0x2c
 80076fa:	fb00 f202 	mul.w	r2, r0, r2
 80076fe:	440a      	add	r2, r1
 8007700:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 8007708:	4b90      	ldr	r3, [pc, #576]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2202      	movs	r2, #2
 800770e:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 8007710:	4b8e      	ldr	r3, [pc, #568]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2202      	movs	r2, #2
 8007716:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 8007718:	4b8c      	ldr	r3, [pc, #560]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2202      	movs	r2, #2
 800771e:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 8007720:	4b8a      	ldr	r3, [pc, #552]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 8007728:	4b88      	ldr	r3, [pc, #544]	@ (800794c <USBD_CMPSIT_CDCDesc+0x28c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2200      	movs	r2, #0
 800772e:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f103 0208 	add.w	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4413      	add	r3, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4b82      	ldr	r3, [pc, #520]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	4b81      	ldr	r3, [pc, #516]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2209      	movs	r2, #9
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	4b7f      	ldr	r3, [pc, #508]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2204      	movs	r2, #4
 8007758:	705a      	strb	r2, [r3, #1]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007760:	4b7b      	ldr	r3, [pc, #492]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	202c      	movs	r0, #44	@ 0x2c
 8007768:	fb00 f202 	mul.w	r2, r0, r2
 800776c:	440a      	add	r2, r1
 800776e:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	709a      	strb	r2, [r3, #2]
 8007776:	4b76      	ldr	r3, [pc, #472]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	70da      	strb	r2, [r3, #3]
 800777e:	4b74      	ldr	r3, [pc, #464]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2201      	movs	r2, #1
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	4b72      	ldr	r3, [pc, #456]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2202      	movs	r2, #2
 800778c:	715a      	strb	r2, [r3, #5]
 800778e:	4b70      	ldr	r3, [pc, #448]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2202      	movs	r2, #2
 8007794:	719a      	strb	r2, [r3, #6]
 8007796:	4b6e      	ldr	r3, [pc, #440]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	71da      	strb	r2, [r3, #7]
 800779e:	4b6c      	ldr	r3, [pc, #432]	@ (8007950 <USBD_CMPSIT_CDCDesc+0x290>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	721a      	strb	r2, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f103 0209 	add.w	r2, r3, #9
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	461a      	mov	r2, r3
 80077bc:	4b65      	ldr	r3, [pc, #404]	@ (8007954 <USBD_CMPSIT_CDCDesc+0x294>)
 80077be:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 80077c0:	4b64      	ldr	r3, [pc, #400]	@ (8007954 <USBD_CMPSIT_CDCDesc+0x294>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2205      	movs	r2, #5
 80077c6:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 80077c8:	4b62      	ldr	r3, [pc, #392]	@ (8007954 <USBD_CMPSIT_CDCDesc+0x294>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2224      	movs	r2, #36	@ 0x24
 80077ce:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 80077d0:	4b60      	ldr	r3, [pc, #384]	@ (8007954 <USBD_CMPSIT_CDCDesc+0x294>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 80077d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007954 <USBD_CMPSIT_CDCDesc+0x294>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2200      	movs	r2, #0
 80077de:	f042 0210 	orr.w	r2, r2, #16
 80077e2:	70da      	strb	r2, [r3, #3]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	1d5a      	adds	r2, r3, #5
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	461a      	mov	r2, r3
 8007800:	4b55      	ldr	r3, [pc, #340]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 8007802:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8007804:	4b54      	ldr	r3, [pc, #336]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2205      	movs	r2, #5
 800780a:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 800780c:	4b52      	ldr	r3, [pc, #328]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2224      	movs	r2, #36	@ 0x24
 8007812:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8007814:	4b50      	ldr	r3, [pc, #320]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2201      	movs	r2, #1
 800781a:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800781c:	4b4e      	ldr	r3, [pc, #312]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800782a:	4b4b      	ldr	r3, [pc, #300]	@ (8007958 <USBD_CMPSIT_CDCDesc+0x298>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	202c      	movs	r0, #44	@ 0x2c
 8007832:	fb00 f202 	mul.w	r2, r0, r2
 8007836:	440a      	add	r2, r1
 8007838:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 800783c:	7812      	ldrb	r2, [r2, #0]
 800783e:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	1d5a      	adds	r2, r3, #5
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	461a      	mov	r2, r3
 8007854:	4b41      	ldr	r3, [pc, #260]	@ (800795c <USBD_CMPSIT_CDCDesc+0x29c>)
 8007856:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8007858:	4b40      	ldr	r3, [pc, #256]	@ (800795c <USBD_CMPSIT_CDCDesc+0x29c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2204      	movs	r2, #4
 800785e:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8007860:	4b3e      	ldr	r3, [pc, #248]	@ (800795c <USBD_CMPSIT_CDCDesc+0x29c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2224      	movs	r2, #36	@ 0x24
 8007866:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8007868:	4b3c      	ldr	r3, [pc, #240]	@ (800795c <USBD_CMPSIT_CDCDesc+0x29c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2202      	movs	r2, #2
 800786e:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 8007870:	4b3a      	ldr	r3, [pc, #232]	@ (800795c <USBD_CMPSIT_CDCDesc+0x29c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2202      	movs	r2, #2
 8007876:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4413      	add	r3, r2
 800788a:	461a      	mov	r2, r3
 800788c:	4b34      	ldr	r3, [pc, #208]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 800788e:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8007890:	4b33      	ldr	r3, [pc, #204]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2205      	movs	r2, #5
 8007896:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8007898:	4b31      	ldr	r3, [pc, #196]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2224      	movs	r2, #36	@ 0x24
 800789e:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 80078a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2206      	movs	r2, #6
 80078a6:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80078ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	202c      	movs	r0, #44	@ 0x2c
 80078b6:	fb00 f202 	mul.w	r2, r0, r2
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80078ca:	4b25      	ldr	r3, [pc, #148]	@ (8007960 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	202c      	movs	r0, #44	@ 0x2c
 80078d2:	fb00 f202 	mul.w	r2, r0, r2
 80078d6:	440a      	add	r2, r1
 80078d8:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1d5a      	adds	r2, r3, #5
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	461a      	mov	r2, r3
 80078f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2207      	movs	r2, #7
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	4b18      	ldr	r3, [pc, #96]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2205      	movs	r2, #5
 8007906:	705a      	strb	r2, [r3, #1]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800790e:	4b15      	ldr	r3, [pc, #84]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	202c      	movs	r0, #44	@ 0x2c
 8007916:	fb00 f202 	mul.w	r2, r0, r2
 800791a:	440a      	add	r2, r1
 800791c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	709a      	strb	r2, [r3, #2]
 8007924:	4b0f      	ldr	r3, [pc, #60]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2203      	movs	r2, #3
 800792a:	70da      	strb	r2, [r3, #3]
 800792c:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	f042 0208 	orr.w	r2, r2, #8
 8007936:	711a      	strb	r2, [r3, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	715a      	strb	r2, [r3, #5]
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d112      	bne.n	8007968 <USBD_CMPSIT_CDCDesc+0x2a8>
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2210      	movs	r2, #16
 8007948:	719a      	strb	r2, [r3, #6]
 800794a:	e011      	b.n	8007970 <USBD_CMPSIT_CDCDesc+0x2b0>
 800794c:	20000964 	.word	0x20000964
 8007950:	20000968 	.word	0x20000968
 8007954:	2000096c 	.word	0x2000096c
 8007958:	20000970 	.word	0x20000970
 800795c:	20000974 	.word	0x20000974
 8007960:	20000978 	.word	0x20000978
 8007964:	2000097c 	.word	0x2000097c
 8007968:	4b73      	ldr	r3, [pc, #460]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2210      	movs	r2, #16
 800796e:	719a      	strb	r2, [r3, #6]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	1dda      	adds	r2, r3, #7
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4413      	add	r3, r2
 8007982:	461a      	mov	r2, r3
 8007984:	4b6d      	ldr	r3, [pc, #436]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	4b6c      	ldr	r3, [pc, #432]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2209      	movs	r2, #9
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	4b6a      	ldr	r3, [pc, #424]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2204      	movs	r2, #4
 8007996:	705a      	strb	r2, [r3, #1]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800799e:	4b67      	ldr	r3, [pc, #412]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	202c      	movs	r0, #44	@ 0x2c
 80079a6:	fb00 f202 	mul.w	r2, r0, r2
 80079aa:	440a      	add	r2, r1
 80079ac:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	709a      	strb	r2, [r3, #2]
 80079b4:	4b61      	ldr	r3, [pc, #388]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	70da      	strb	r2, [r3, #3]
 80079bc:	4b5f      	ldr	r3, [pc, #380]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2202      	movs	r2, #2
 80079c2:	711a      	strb	r2, [r3, #4]
 80079c4:	4b5d      	ldr	r3, [pc, #372]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	220a      	movs	r2, #10
 80079ca:	715a      	strb	r2, [r3, #5]
 80079cc:	4b5b      	ldr	r3, [pc, #364]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	719a      	strb	r2, [r3, #6]
 80079d4:	4b59      	ldr	r3, [pc, #356]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	71da      	strb	r2, [r3, #7]
 80079dc:	4b57      	ldr	r3, [pc, #348]	@ (8007b3c <USBD_CMPSIT_CDCDesc+0x47c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	721a      	strb	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f103 0209 	add.w	r2, r3, #9
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10c      	bne.n	8007a10 <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	212c      	movs	r1, #44	@ 0x2c
 8007a00:	fb01 f303 	mul.w	r3, r1, r3
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a0e:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4413      	add	r3, r2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b47      	ldr	r3, [pc, #284]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	4b46      	ldr	r3, [pc, #280]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2207      	movs	r2, #7
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	4b44      	ldr	r3, [pc, #272]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	705a      	strb	r2, [r3, #1]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007a34:	4b40      	ldr	r3, [pc, #256]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68f9      	ldr	r1, [r7, #12]
 8007a3a:	202c      	movs	r0, #44	@ 0x2c
 8007a3c:	fb00 f202 	mul.w	r2, r0, r2
 8007a40:	440a      	add	r2, r1
 8007a42:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	709a      	strb	r2, [r3, #2]
 8007a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	70da      	strb	r2, [r3, #3]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	212c      	movs	r1, #44	@ 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b33      	ldr	r3, [pc, #204]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	809a      	strh	r2, [r3, #4]
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <USBD_CMPSIT_CDCDesc+0x3c0>
 8007a76:	4b30      	ldr	r3, [pc, #192]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	719a      	strb	r2, [r3, #6]
 8007a7e:	e003      	b.n	8007a88 <USBD_CMPSIT_CDCDesc+0x3c8>
 8007a80:	4b2d      	ldr	r3, [pc, #180]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2200      	movs	r2, #0
 8007a86:	719a      	strb	r2, [r3, #6]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	1dda      	adds	r2, r3, #7
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4b26      	ldr	r3, [pc, #152]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	4b25      	ldr	r3, [pc, #148]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	4b23      	ldr	r3, [pc, #140]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2205      	movs	r2, #5
 8007aae:	705a      	strb	r2, [r3, #1]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007ab6:	4b20      	ldr	r3, [pc, #128]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	202c      	movs	r0, #44	@ 0x2c
 8007abe:	fb00 f202 	mul.w	r2, r0, r2
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	709a      	strb	r2, [r3, #2]
 8007acc:	4b1a      	ldr	r3, [pc, #104]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	70da      	strb	r2, [r3, #3]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	212c      	movs	r1, #44	@ 0x2c
 8007ade:	fb01 f303 	mul.w	r3, r1, r3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b13      	ldr	r3, [pc, #76]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	b292      	uxth	r2, r2
 8007af0:	809a      	strh	r2, [r3, #4]
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <USBD_CMPSIT_CDCDesc+0x442>
 8007af8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2200      	movs	r2, #0
 8007afe:	719a      	strb	r2, [r3, #6]
 8007b00:	e003      	b.n	8007b0a <USBD_CMPSIT_CDCDesc+0x44a>
 8007b02:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <USBD_CMPSIT_CDCDesc+0x478>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2200      	movs	r2, #0
 8007b08:	719a      	strb	r2, [r3, #6]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	1dda      	adds	r2, r3, #7
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	791a      	ldrb	r2, [r3, #4]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3202      	adds	r2, #2
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	b292      	uxth	r2, r2
 8007b28:	805a      	strh	r2, [r3, #2]
}
 8007b2a:	bf00      	nop
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	2000097c 	.word	0x2000097c
 8007b3c:	20000968 	.word	0x20000968

08007b40 <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e026      	b.n	8007ba6 <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	212c      	movs	r1, #44	@ 0x2c
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	7afa      	ldrb	r2, [r7, #11]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d117      	bne.n	8007ba0 <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	212c      	movs	r1, #44	@ 0x2c
 8007b76:	fb01 f303 	mul.w	r3, r1, r3
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8007b80:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d10c      	bne.n	8007ba0 <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d105      	bne.n	8007b9a <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	e00c      	b.n	8007bb4 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3d2      	bcc.n	8007b58 <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 8007bb2:	23ff      	movs	r3, #255	@ 0xff
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_PCD_SetupStageCallback>:
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);

/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f000 fb57 	bl	800828a <USBD_LL_SetupStage>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	440b      	add	r3, r1
 8007c04:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f000 fb91 	bl	8008334 <USBD_LL_DataOutStage>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	440b      	add	r3, r1
 8007c3a:	3328      	adds	r3, #40	@ 0x28
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f000 fc2a 	bl	800849a <USBD_LL_DataInStage>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
	USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fd4e 	bl	80086fe <USBD_LL_SOF>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
	USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]

	if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	79db      	ldrb	r3, [r3, #7]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d001      	beq.n	8007c82 <HAL_PCD_ResetCallback+0x18>
	{
		Error_Handler();
 8007c7e:	f7f8 fc47 	bl	8000510 <Error_Handler>
	}
	/* Set Speed. */
	USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007c88:	7bfa      	ldrb	r2, [r7, #15]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fd26 	bl	80086de <USBD_LL_SetSpeed>

	/* Reset Device. */
	USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fcb0 	bl	80085fe <USBD_LL_Reset>
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a20      	ldr	r2, [pc, #128]	@ (8007d34 <USBD_LL_Init+0x8c>)
 8007cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8007cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <USBD_LL_Init+0x8c>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc

	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 8007cc0:	f7f8 fbb6 	bl	8000430 <MX_USB_PCD_Init>

	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cca:	2320      	movs	r3, #32
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f7fa fe12 	bl	80028f8 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cda:	2360      	movs	r3, #96	@ 0x60
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2180      	movs	r1, #128	@ 0x80
 8007ce0:	f7fa fe0a 	bl	80028f8 <HAL_PCDEx_PMAConfig>

	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cea:	23a0      	movs	r3, #160	@ 0xa0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2181      	movs	r1, #129	@ 0x81
 8007cf0:	f7fa fe02 	bl	80028f8 <HAL_PCDEx_PMAConfig>

	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007cfa:	23e0      	movs	r3, #224	@ 0xe0
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2101      	movs	r1, #1
 8007d00:	f7fa fdfa 	bl	80028f8 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d0a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2182      	movs	r1, #130	@ 0x82
 8007d12:	f7fa fdf1 	bl	80028f8 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d1c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8007d20:	2200      	movs	r2, #0
 8007d22:	2183      	movs	r1, #131	@ 0x83
 8007d24:	f7fa fde8 	bl	80028f8 <HAL_PCDEx_PMAConfig>

	return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200001b8 	.word	0x200001b8

08007d38 <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f9 fabc 	bl	80012c4 <HAL_PCD_Start>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f916 	bl	8007f84 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_OpenEP>:
 * @param  ep_mps: Endpoint Max Packet Size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4603      	mov	r3, r0
 8007d72:	70fb      	strb	r3, [r7, #3]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70bb      	strb	r3, [r7, #2]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007d82:	78bb      	ldrb	r3, [r7, #2]
 8007d84:	883a      	ldrh	r2, [r7, #0]
 8007d86:	78f9      	ldrb	r1, [r7, #3]
 8007d88:	f7f9 fbeb 	bl	8001562 <HAL_PCD_EP_Open>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f8f6 	bl	8007f84 <USBD_Get_USB_Status>
 8007d98:	4603      	mov	r3, r0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	4611      	mov	r1, r2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7f9 fc31 	bl	8001620 <HAL_PCD_EP_Close>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f8dd 	bl	8007f84 <USBD_Get_USB_Status>
 8007dca:	4603      	mov	r3, r0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7f9 fce4 	bl	80017b8 <HAL_PCD_EP_SetStall>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f8c4 	bl	8007f84 <USBD_Get_USB_Status>
 8007dfc:	4603      	mov	r3, r0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e18:	78fa      	ldrb	r2, [r7, #3]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f9 fd1f 	bl	8001860 <HAL_PCD_EP_ClrStall>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f8ab 	bl	8007f84 <USBD_Get_USB_Status>
 8007e2e:	4603      	mov	r3, r0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e4a:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8007e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da0b      	bge.n	8007e6c <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	440b      	add	r3, r1
 8007e66:	3316      	adds	r3, #22
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	e00b      	b.n	8007e84 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	440b      	add	r3, r1
 8007e7e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8007e82:	781b      	ldrb	r3, [r3, #0]
	}
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBD_LL_SetUSBAddress>:
 * @param  dev_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7f9 fb37 	bl	800151a <HAL_PCD_SetAddress>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f866 	bl	8007f84 <USBD_Get_USB_Status>
 8007eb8:	4603      	mov	r3, r0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_Transmit>:
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007ed8:	7af9      	ldrb	r1, [r7, #11]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	f7f9 fc33 	bl	8001748 <HAL_PCD_EP_Transmit>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f84b 	bl	8007f84 <USBD_Get_USB_Status>
 8007eee:	4603      	mov	r3, r0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	460b      	mov	r3, r1
 8007f06:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f0e:	7af9      	ldrb	r1, [r7, #11]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	f7f9 fbce 	bl	80016b4 <HAL_PCD_EP_Receive>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f830 	bl	8007f84 <USBD_Get_USB_Status>
 8007f24:	4603      	mov	r3, r0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f9 fbe7 	bl	8001718 <HAL_PCD_EP_GetRxCount>
 8007f4a:	4603      	mov	r3, r0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_static_malloc>:
 * @brief  Static single allocation.
 * @param  size: Size of allocated memory
 * @retval None
 */
void *USBD_static_malloc(uint32_t size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8007f5c:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <USBD_static_malloc+0x18>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000980 	.word	0x20000980

08007f70 <USBD_static_free>:
 * @brief  Dummy memory free
 * @param  p: Pointer to allocated  memory address
 * @retval None
 */
void USBD_static_free(void *p)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_Get_USB_Status>:
{
	HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]

	switch (hal_status)
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d817      	bhi.n	8007fc8 <USBD_Get_USB_Status+0x44>
 8007f98:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <USBD_Get_USB_Status+0x1c>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fb7 	.word	0x08007fb7
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fc3 	.word	0x08007fc3
	{
	case HAL_OK :
		usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
		break;
 8007fb4:	e00b      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	73fb      	strb	r3, [r7, #15]
		break;
 8007fba:	e008      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
		break;
 8007fc0:	e005      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	73fb      	strb	r3, [r7, #15]
		break;
 8007fc6:	e002      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	73fb      	strb	r3, [r7, #15]
		break;
 8007fcc:	bf00      	nop
	}
	return usb_status;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007ff0:	4827      	ldr	r0, [pc, #156]	@ (8008090 <USBD_Init+0xb4>)
 8007ff2:	f001 fd9d 	bl	8009b30 <iprintf>
 8007ff6:	4827      	ldr	r0, [pc, #156]	@ (8008094 <USBD_Init+0xb8>)
 8007ff8:	f001 fd9a 	bl	8009b30 <iprintf>
 8007ffc:	200a      	movs	r0, #10
 8007ffe:	f001 fda9 	bl	8009b54 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008002:	2303      	movs	r3, #3
 8008004:	e03f      	b.n	8008086 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e021      	b.n	8008050 <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	32ae      	adds	r2, #174	@ 0xae
 8008012:	2100      	movs	r1, #0
 8008014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	33b2      	adds	r3, #178	@ 0xb2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	2200      	movs	r2, #0
 8008024:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	212c      	movs	r1, #44	@ 0x2c
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	4413      	add	r3, r2
 8008032:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	3301      	adds	r3, #1
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d9da      	bls.n	800800c <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	79fa      	ldrb	r2, [r7, #7]
 8008078:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fe14 	bl	8007ca8 <USBD_LL_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	74fb      	strb	r3, [r7, #19]

  return ret;
 8008084:	7cfb      	ldrb	r3, [r7, #19]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	0800a8c0 	.word	0x0800a8c0
 8008094:	0800a8c8 	.word	0x0800a8c8

08008098 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d83d      	bhi.n	8008136 <USBD_RegisterClassComposite+0x9e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d838      	bhi.n	8008136 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d02a      	beq.n	8008120 <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	32ae      	adds	r2, #174	@ 0xae
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	212c      	movs	r1, #44	@ 0x2c
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 80080f6:	79fa      	ldrb	r2, [r7, #7]
 80080f8:	2300      	movs	r3, #0
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7fe ff88 	bl	8007012 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 800811e:	e00a      	b.n	8008136 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 8008120:	480e      	ldr	r0, [pc, #56]	@ (800815c <USBD_RegisterClassComposite+0xc4>)
 8008122:	f001 fd05 	bl	8009b30 <iprintf>
 8008126:	480e      	ldr	r0, [pc, #56]	@ (8008160 <USBD_RegisterClassComposite+0xc8>)
 8008128:	f001 fd02 	bl	8009b30 <iprintf>
 800812c:	200a      	movs	r0, #10
 800812e:	f001 fd11 	bl	8009b54 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800813c:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <USBD_RegisterClassComposite+0xcc>)
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	f107 0214 	add.w	r2, r7, #20
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	0800a8c0 	.word	0x0800a8c0
 8008160:	0800a8e0 	.word	0x0800a8e0
 8008164:	200000a8 	.word	0x200000a8

08008168 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fddd 	bl	8007d38 <USBD_LL_Start>
 800817e:	4603      	mov	r3, r0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	e027      	b.n	8008204 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	212c      	movs	r1, #44	@ 0x2c
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	4413      	add	r3, r2
 80081c0:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d119      	bne.n	80081fe <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	32ae      	adds	r2, #174	@ 0xae
 80081d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	32ae      	adds	r2, #174	@ 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3301      	adds	r3, #1
 8008202:	60bb      	str	r3, [r7, #8]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d9d4      	bls.n	80081b4 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	e027      	b.n	800827a <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	212c      	movs	r1, #44	@ 0x2c
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d119      	bne.n	8008274 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	32ae      	adds	r2, #174	@ 0xae
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d012      	beq.n	8008274 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	32ae      	adds	r2, #174	@ 0xae
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	3301      	adds	r3, #1
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d9d4      	bls.n	800822a <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f001 f94a 	bl	8009536 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d01a      	beq.n	80082fc <USBD_LL_SetupStage+0x72>
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d822      	bhi.n	8008310 <USBD_LL_SetupStage+0x86>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <USBD_LL_SetupStage+0x4a>
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d00a      	beq.n	80082e8 <USBD_LL_SetupStage+0x5e>
 80082d2:	e01d      	b.n	8008310 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb67 	bl	80089b0 <USBD_StdDevReq>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e020      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fbcf 	bl	8008a94 <USBD_StdItfReq>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
      break;
 80082fa:	e016      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fc31 	bl	8008b6c <USBD_StdEPReq>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
      break;
 800830e:	e00c      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008316:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800831a:	b2db      	uxtb	r3, r3
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fd58 	bl	8007dd4 <USBD_LL_StallEP>
 8008324:	4603      	mov	r3, r0
 8008326:	73fb      	strb	r3, [r7, #15]
      break;
 8008328:	bf00      	nop
  }

  return ret;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	460b      	mov	r3, r1
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d16e      	bne.n	800842a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800835a:	2b03      	cmp	r3, #3
 800835c:	f040 8098 	bne.w	8008490 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d913      	bls.n	8008394 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	1ad2      	subs	r2, r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4293      	cmp	r3, r2
 8008384:	bf28      	it	cs
 8008386:	4613      	movcs	r3, r2
 8008388:	461a      	mov	r2, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f001 fad5 	bl	800993c <USBD_CtlContinueRx>
 8008392:	e07d      	b.n	8008490 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d014      	beq.n	80083cc <USBD_LL_DataOutStage+0x98>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d81d      	bhi.n	80083e2 <USBD_LL_DataOutStage+0xae>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <USBD_LL_DataOutStage+0x7c>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d003      	beq.n	80083b6 <USBD_LL_DataOutStage+0x82>
 80083ae:	e018      	b.n	80083e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75bb      	strb	r3, [r7, #22]
            break;
 80083b4:	e018      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	4619      	mov	r1, r3
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f9da 	bl	800877a <USBD_CoreFindIF>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75bb      	strb	r3, [r7, #22]
            break;
 80083ca:	e00d      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fa1b 	bl	8008812 <USBD_CoreFindEP>
 80083dc:	4603      	mov	r3, r0
 80083de:	75bb      	strb	r3, [r7, #22]
            break;
 80083e0:	e002      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75bb      	strb	r3, [r7, #22]
            break;
 80083e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083e8:	7dbb      	ldrb	r3, [r7, #22]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d819      	bhi.n	8008422 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d113      	bne.n	8008422 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083fa:	7dba      	ldrb	r2, [r7, #22]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	32ae      	adds	r2, #174	@ 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800840a:	7dba      	ldrb	r2, [r7, #22]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008412:	7dba      	ldrb	r2, [r7, #22]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	32ae      	adds	r2, #174	@ 0xae
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f001 fa9b 	bl	800995e <USBD_CtlSendStatus>
 8008428:	e032      	b.n	8008490 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 f9ec 	bl	8008812 <USBD_CoreFindEP>
 800843a:	4603      	mov	r3, r0
 800843c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800843e:	7dbb      	ldrb	r3, [r7, #22]
 8008440:	2bff      	cmp	r3, #255	@ 0xff
 8008442:	d025      	beq.n	8008490 <USBD_LL_DataOutStage+0x15c>
 8008444:	7dbb      	ldrb	r3, [r7, #22]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d822      	bhi.n	8008490 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d117      	bne.n	8008486 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008456:	7dba      	ldrb	r2, [r7, #22]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	32ae      	adds	r2, #174	@ 0xae
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00f      	beq.n	8008486 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008466:	7dba      	ldrb	r2, [r7, #22]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800846e:	7dba      	ldrb	r2, [r7, #22]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	32ae      	adds	r2, #174	@ 0xae
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	7afa      	ldrb	r2, [r7, #11]
 800847c:	4611      	mov	r1, r2
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	e000      	b.n	8008492 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	460b      	mov	r3, r1
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d16f      	bne.n	800858e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3314      	adds	r3, #20
 80084b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d15a      	bne.n	8008574 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d914      	bls.n	80084f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	461a      	mov	r2, r3
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 f9fd 	bl	80098e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fd03 	bl	8007ef8 <USBD_LL_PrepareReceive>
 80084f2:	e03f      	b.n	8008574 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d11c      	bne.n	800853a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008508:	429a      	cmp	r2, r3
 800850a:	d316      	bcc.n	800853a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008516:	429a      	cmp	r2, r3
 8008518:	d20f      	bcs.n	800853a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800851a:	2200      	movs	r2, #0
 800851c:	2100      	movs	r1, #0
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f001 f9de 	bl	80098e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800852c:	2300      	movs	r3, #0
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff fce0 	bl	8007ef8 <USBD_LL_PrepareReceive>
 8008538:	e01c      	b.n	8008574 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b03      	cmp	r3, #3
 8008544:	d10f      	bne.n	8008566 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008566:	2180      	movs	r1, #128	@ 0x80
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fc33 	bl	8007dd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 fa08 	bl	8009984 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d03a      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fe02 	bl	8008188 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800858c:	e032      	b.n	80085f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008594:	b2db      	uxtb	r3, r3
 8008596:	4619      	mov	r1, r3
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f93a 	bl	8008812 <USBD_CoreFindEP>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2bff      	cmp	r3, #255	@ 0xff
 80085a6:	d025      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d822      	bhi.n	80085f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d11c      	bne.n	80085f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085ba:	7dfa      	ldrb	r2, [r7, #23]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	32ae      	adds	r2, #174	@ 0xae
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085ca:	7dfa      	ldrb	r2, [r7, #23]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085d2:	7dfa      	ldrb	r2, [r7, #23]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	32ae      	adds	r2, #174	@ 0xae
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	7afa      	ldrb	r2, [r7, #11]
 80085e0:	4611      	mov	r1, r2
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	4798      	blx	r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085ea:	7dbb      	ldrb	r3, [r7, #22]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085f0:	7dbb      	ldrb	r3, [r7, #22]
 80085f2:	e000      	b.n	80085f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008630:	2300      	movs	r3, #0
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	e031      	b.n	800869a <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	212c      	movs	r1, #44	@ 0x2c
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	4413      	add	r3, r2
 8008642:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d123      	bne.n	8008694 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	32ae      	adds	r2, #174	@ 0xae
 8008652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01c      	beq.n	8008694 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	32ae      	adds	r2, #174	@ 0xae
 8008668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	32ae      	adds	r2, #174	@ 0xae
 8008678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6852      	ldr	r2, [r2, #4]
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	4611      	mov	r1, r2
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3301      	adds	r3, #1
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d9ca      	bls.n	8008636 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a0:	2340      	movs	r3, #64	@ 0x40
 80086a2:	2200      	movs	r2, #0
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fb5b 	bl	8007d62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2240      	movs	r2, #64	@ 0x40
 80086b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086bc:	2340      	movs	r3, #64	@ 0x40
 80086be:	2200      	movs	r2, #0
 80086c0:	2180      	movs	r1, #128	@ 0x80
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fb4d 	bl	8007d62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2240      	movs	r2, #64	@ 0x40
 80086d2:	621a      	str	r2, [r3, #32]

  return ret;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d12e      	bne.n	8008770 <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e028      	b.n	800876a <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	212c      	movs	r1, #44	@ 0x2c
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	4413      	add	r3, r2
 8008724:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d11a      	bne.n	8008764 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	32ae      	adds	r2, #174	@ 0xae
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d013      	beq.n	8008764 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	32ae      	adds	r2, #174	@ 0xae
 8008742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	32ae      	adds	r2, #174	@ 0xae
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d9d3      	bls.n	8008718 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e038      	b.n	80087fe <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	212c      	movs	r1, #44	@ 0x2c
 8008792:	fb01 f303 	mul.w	r3, r1, r3
 8008796:	4413      	add	r3, r2
 8008798:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d12a      	bne.n	80087f8 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80087a2:	2300      	movs	r3, #0
 80087a4:	60bb      	str	r3, [r7, #8]
 80087a6:	e01b      	b.n	80087e0 <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	212c      	movs	r1, #44	@ 0x2c
 80087ae:	fb01 f303 	mul.w	r3, r1, r3
 80087b2:	441a      	add	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d10a      	bne.n	80087da <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	32ae      	adds	r2, #174	@ 0xae
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	e015      	b.n	8008806 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	3301      	adds	r3, #1
 80087de:	60bb      	str	r3, [r7, #8]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	212c      	movs	r1, #44	@ 0x2c
 80087e6:	fb01 f303 	mul.w	r3, r1, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3d7      	bcc.n	80087a8 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d9c3      	bls.n	800878c <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8008804:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e039      	b.n	8008898 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	212c      	movs	r1, #44	@ 0x2c
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d12b      	bne.n	8008892 <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	e01c      	b.n	800887a <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	33be      	adds	r3, #190	@ 0xbe
 8008854:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	429a      	cmp	r2, r3
 800885c:	d10a      	bne.n	8008874 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	32ae      	adds	r2, #174	@ 0xae
 8008864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e015      	b.n	80088a0 <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	3301      	adds	r3, #1
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	212c      	movs	r1, #44	@ 0x2c
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	4413      	add	r3, r2
 8008886:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	d3d6      	bcc.n	8008840 <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d9c2      	bls.n	8008824 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800889e:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	70fb      	strb	r3, [r7, #3]
 80088be:	460b      	mov	r3, r1
 80088c0:	70bb      	strb	r3, [r7, #2]
 80088c2:	4613      	mov	r3, r2
 80088c4:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e03f      	b.n	800894c <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 80088cc:	787a      	ldrb	r2, [r7, #1]
 80088ce:	7bf8      	ldrb	r0, [r7, #15]
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4413      	add	r3, r2
 80088dc:	4403      	add	r3, r0
 80088de:	33be      	adds	r3, #190	@ 0xbe
 80088e0:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80088e4:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d12b      	bne.n	8008946 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 80088ee:	787a      	ldrb	r2, [r7, #1]
 80088f0:	7bf8      	ldrb	r0, [r7, #15]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4613      	mov	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	4413      	add	r3, r2
 80088fe:	4403      	add	r3, r0
 8008900:	33be      	adds	r3, #190	@ 0xbe
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	440b      	add	r3, r1
 8008906:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8008908:	78ba      	ldrb	r2, [r7, #2]
 800890a:	429a      	cmp	r2, r3
 800890c:	d11b      	bne.n	8008946 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 800890e:	787a      	ldrb	r2, [r7, #1]
 8008910:	7bf8      	ldrb	r0, [r7, #15]
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	4413      	add	r3, r2
 800891e:	4403      	add	r3, r0
 8008920:	33be      	adds	r3, #190	@ 0xbe
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00c      	beq.n	8008946 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800892c:	787a      	ldrb	r2, [r7, #1]
 800892e:	7bf8      	ldrb	r0, [r7, #15]
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4413      	add	r3, r2
 800893c:	4403      	add	r3, r0
 800893e:	33be      	adds	r3, #190	@ 0xbe
 8008940:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8008944:	e00f      	b.n	8008966 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	3301      	adds	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	7bfa      	ldrb	r2, [r7, #15]
 800894e:	787b      	ldrb	r3, [r7, #1]
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	202c      	movs	r0, #44	@ 0x2c
 8008954:	fb00 f303 	mul.w	r3, r0, r3
 8008958:	440b      	add	r3, r1
 800895a:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3b3      	bcc.n	80088cc <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 8008964:	23ff      	movs	r3, #255	@ 0xff
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008972:	b480      	push	{r7}
 8008974:	b087      	sub	sp, #28
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	3301      	adds	r3, #1
 8008988:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008990:	8a3b      	ldrh	r3, [r7, #16]
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	b21a      	sxth	r2, r3
 8008996:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800899a:	4313      	orrs	r3, r2
 800899c:	b21b      	sxth	r3, r3
 800899e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089a0:	89fb      	ldrh	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c6:	2b40      	cmp	r3, #64	@ 0x40
 80089c8:	d005      	beq.n	80089d6 <USBD_StdDevReq+0x26>
 80089ca:	2b40      	cmp	r3, #64	@ 0x40
 80089cc:	d857      	bhi.n	8008a7e <USBD_StdDevReq+0xce>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00f      	beq.n	80089f2 <USBD_StdDevReq+0x42>
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d153      	bne.n	8008a7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	32ae      	adds	r2, #174	@ 0xae
 80089e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]
      break;
 80089f0:	e04a      	b.n	8008a88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d83b      	bhi.n	8008a72 <USBD_StdDevReq+0xc2>
 80089fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008a00 <USBD_StdDevReq+0x50>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a55 	.word	0x08008a55
 8008a04:	08008a69 	.word	0x08008a69
 8008a08:	08008a73 	.word	0x08008a73
 8008a0c:	08008a5f 	.word	0x08008a5f
 8008a10:	08008a73 	.word	0x08008a73
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a73 	.word	0x08008a73
 8008a20:	08008a4b 	.word	0x08008a4b
 8008a24:	08008a3d 	.word	0x08008a3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa3c 	bl	8008ea8 <USBD_GetDescriptor>
          break;
 8008a30:	e024      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fbdb 	bl	80091f0 <USBD_SetAddress>
          break;
 8008a3a:	e01f      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fc1a 	bl	8009278 <USBD_SetConfig>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
          break;
 8008a48:	e018      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fcbd 	bl	80093cc <USBD_GetConfig>
          break;
 8008a52:	e013      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fcee 	bl	8009438 <USBD_GetStatus>
          break;
 8008a5c:	e00e      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fd1d 	bl	80094a0 <USBD_SetFeature>
          break;
 8008a66:	e009      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fd41 	bl	80094f2 <USBD_ClrFeature>
          break;
 8008a70:	e004      	b.n	8008a7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fd98 	bl	80095aa <USBD_CtlError>
          break;
 8008a7a:	bf00      	nop
      }
      break;
 8008a7c:	e004      	b.n	8008a88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fd92 	bl	80095aa <USBD_CtlError>
      break;
 8008a86:	bf00      	nop
  }

  return ret;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop

08008a94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aaa:	2b40      	cmp	r3, #64	@ 0x40
 8008aac:	d005      	beq.n	8008aba <USBD_StdItfReq+0x26>
 8008aae:	2b40      	cmp	r3, #64	@ 0x40
 8008ab0:	d852      	bhi.n	8008b58 <USBD_StdItfReq+0xc4>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <USBD_StdItfReq+0x26>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d14e      	bne.n	8008b58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d840      	bhi.n	8008b4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	889b      	ldrh	r3, [r3, #4]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d836      	bhi.n	8008b40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff fe4d 	bl	800877a <USBD_CoreFindIF>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
 8008ae6:	2bff      	cmp	r3, #255	@ 0xff
 8008ae8:	d01d      	beq.n	8008b26 <USBD_StdItfReq+0x92>
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d81a      	bhi.n	8008b26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008af0:	7bba      	ldrb	r2, [r7, #14]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	@ 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00f      	beq.n	8008b20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b00:	7bba      	ldrb	r2, [r7, #14]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b08:	7bba      	ldrb	r2, [r7, #14]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	32ae      	adds	r2, #174	@ 0xae
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b1e:	e004      	b.n	8008b2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b20:	2303      	movs	r3, #3
 8008b22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b24:	e001      	b.n	8008b2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d110      	bne.n	8008b54 <USBD_StdItfReq+0xc0>
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10d      	bne.n	8008b54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 ff10 	bl	800995e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b3e:	e009      	b.n	8008b54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fd31 	bl	80095aa <USBD_CtlError>
          break;
 8008b48:	e004      	b.n	8008b54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd2c 	bl	80095aa <USBD_CtlError>
          break;
 8008b52:	e000      	b.n	8008b56 <USBD_StdItfReq+0xc2>
          break;
 8008b54:	bf00      	nop
      }
      break;
 8008b56:	e004      	b.n	8008b62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fd25 	bl	80095aa <USBD_CtlError>
      break;
 8008b60:	bf00      	nop
  }

  return ret;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	889b      	ldrh	r3, [r3, #4]
 8008b7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	d007      	beq.n	8008b9c <USBD_StdEPReq+0x30>
 8008b8c:	2b40      	cmp	r3, #64	@ 0x40
 8008b8e:	f200 817f 	bhi.w	8008e90 <USBD_StdEPReq+0x324>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d02a      	beq.n	8008bec <USBD_StdEPReq+0x80>
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	f040 817a 	bne.w	8008e90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff fe36 	bl	8008812 <USBD_CoreFindEP>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008baa:	7b7b      	ldrb	r3, [r7, #13]
 8008bac:	2bff      	cmp	r3, #255	@ 0xff
 8008bae:	f000 8174 	beq.w	8008e9a <USBD_StdEPReq+0x32e>
 8008bb2:	7b7b      	ldrb	r3, [r7, #13]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f200 8170 	bhi.w	8008e9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bba:	7b7a      	ldrb	r2, [r7, #13]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bc2:	7b7a      	ldrb	r2, [r7, #13]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	32ae      	adds	r2, #174	@ 0xae
 8008bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8163 	beq.w	8008e9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bd4:	7b7a      	ldrb	r2, [r7, #13]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32ae      	adds	r2, #174	@ 0xae
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bea:	e156      	b.n	8008e9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d008      	beq.n	8008c06 <USBD_StdEPReq+0x9a>
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	f300 8145 	bgt.w	8008e84 <USBD_StdEPReq+0x318>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 809b 	beq.w	8008d36 <USBD_StdEPReq+0x1ca>
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d03c      	beq.n	8008c7e <USBD_StdEPReq+0x112>
 8008c04:	e13e      	b.n	8008e84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d002      	beq.n	8008c18 <USBD_StdEPReq+0xac>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d016      	beq.n	8008c44 <USBD_StdEPReq+0xd8>
 8008c16:	e02c      	b.n	8008c72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00d      	beq.n	8008c3a <USBD_StdEPReq+0xce>
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b80      	cmp	r3, #128	@ 0x80
 8008c22:	d00a      	beq.n	8008c3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff f8d3 	bl	8007dd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c2e:	2180      	movs	r1, #128	@ 0x80
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff f8cf 	bl	8007dd4 <USBD_LL_StallEP>
 8008c36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c38:	e020      	b.n	8008c7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fcb4 	bl	80095aa <USBD_CtlError>
              break;
 8008c42:	e01b      	b.n	8008c7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10e      	bne.n	8008c6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <USBD_StdEPReq+0xfe>
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b80      	cmp	r3, #128	@ 0x80
 8008c56:	d008      	beq.n	8008c6a <USBD_StdEPReq+0xfe>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	88db      	ldrh	r3, [r3, #6]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff f8b5 	bl	8007dd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fe77 	bl	800995e <USBD_CtlSendStatus>

              break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc98 	bl	80095aa <USBD_CtlError>
              break;
 8008c7a:	bf00      	nop
          }
          break;
 8008c7c:	e107      	b.n	8008e8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d002      	beq.n	8008c90 <USBD_StdEPReq+0x124>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d016      	beq.n	8008cbc <USBD_StdEPReq+0x150>
 8008c8e:	e04b      	b.n	8008d28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00d      	beq.n	8008cb2 <USBD_StdEPReq+0x146>
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b80      	cmp	r3, #128	@ 0x80
 8008c9a:	d00a      	beq.n	8008cb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7ff f897 	bl	8007dd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ca6:	2180      	movs	r1, #128	@ 0x80
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff f893 	bl	8007dd4 <USBD_LL_StallEP>
 8008cae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cb0:	e040      	b.n	8008d34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fc78 	bl	80095aa <USBD_CtlError>
              break;
 8008cba:	e03b      	b.n	8008d34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	885b      	ldrh	r3, [r3, #2]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d136      	bne.n	8008d32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7ff f897 	bl	8007e06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fe40 	bl	800995e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fd95 	bl	8008812 <USBD_CoreFindEP>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cec:	7b7b      	ldrb	r3, [r7, #13]
 8008cee:	2bff      	cmp	r3, #255	@ 0xff
 8008cf0:	d01f      	beq.n	8008d32 <USBD_StdEPReq+0x1c6>
 8008cf2:	7b7b      	ldrb	r3, [r7, #13]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d81c      	bhi.n	8008d32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008cf8:	7b7a      	ldrb	r2, [r7, #13]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d00:	7b7a      	ldrb	r2, [r7, #13]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32ae      	adds	r2, #174	@ 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d010      	beq.n	8008d32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d10:	7b7a      	ldrb	r2, [r7, #13]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32ae      	adds	r2, #174	@ 0xae
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d26:	e004      	b.n	8008d32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fc3d 	bl	80095aa <USBD_CtlError>
              break;
 8008d30:	e000      	b.n	8008d34 <USBD_StdEPReq+0x1c8>
              break;
 8008d32:	bf00      	nop
          }
          break;
 8008d34:	e0ab      	b.n	8008e8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d002      	beq.n	8008d48 <USBD_StdEPReq+0x1dc>
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d032      	beq.n	8008dac <USBD_StdEPReq+0x240>
 8008d46:	e097      	b.n	8008e78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <USBD_StdEPReq+0x1f2>
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	2b80      	cmp	r3, #128	@ 0x80
 8008d52:	d004      	beq.n	8008d5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fc27 	bl	80095aa <USBD_CtlError>
                break;
 8008d5c:	e091      	b.n	8008e82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da0b      	bge.n	8008d7e <USBD_StdEPReq+0x212>
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	3310      	adds	r3, #16
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	e00b      	b.n	8008d96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	3304      	adds	r3, #4
 8008d96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2202      	movs	r2, #2
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fd80 	bl	80098aa <USBD_CtlSendData>
              break;
 8008daa:	e06a      	b.n	8008e82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da11      	bge.n	8008dd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	f003 020f 	and.w	r2, r3, #15
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	3324      	adds	r3, #36	@ 0x24
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d117      	bne.n	8008dfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fbea 	bl	80095aa <USBD_CtlError>
                  break;
 8008dd6:	e054      	b.n	8008e82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fbd7 	bl	80095aa <USBD_CtlError>
                  break;
 8008dfc:	e041      	b.n	8008e82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	da0b      	bge.n	8008e1e <USBD_StdEPReq+0x2b2>
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	3310      	adds	r3, #16
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	e00b      	b.n	8008e36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	3304      	adds	r3, #4
 8008e36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <USBD_StdEPReq+0x2d8>
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d103      	bne.n	8008e4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e00e      	b.n	8008e6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fe fff1 	bl	8007e38 <USBD_LL_IsStallEP>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fd1a 	bl	80098aa <USBD_CtlSendData>
              break;
 8008e76:	e004      	b.n	8008e82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fb95 	bl	80095aa <USBD_CtlError>
              break;
 8008e80:	bf00      	nop
          }
          break;
 8008e82:	e004      	b.n	8008e8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fb8f 	bl	80095aa <USBD_CtlError>
          break;
 8008e8c:	bf00      	nop
      }
      break;
 8008e8e:	e005      	b.n	8008e9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb89 	bl	80095aa <USBD_CtlError>
      break;
 8008e98:	e000      	b.n	8008e9c <USBD_StdEPReq+0x330>
      break;
 8008e9a:	bf00      	nop
  }

  return ret;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	0a1b      	lsrs	r3, r3, #8
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	f200 8163 	bhi.w	8009194 <USBD_GetDescriptor+0x2ec>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <USBD_GetDescriptor+0x2c>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008ef1 	.word	0x08008ef1
 8008ed8:	08008f09 	.word	0x08008f09
 8008edc:	08008f81 	.word	0x08008f81
 8008ee0:	08009195 	.word	0x08009195
 8008ee4:	08009195 	.word	0x08009195
 8008ee8:	080090f7 	.word	0x080090f7
 8008eec:	0800913f 	.word	0x0800913f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
      break;
 8008f06:	e14d      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7c1b      	ldrb	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11b      	bne.n	8008f48 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 8008f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8009190 <USBD_GetDescriptor+0x2e8>)
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f20:	f107 0208 	add.w	r2, r7, #8
 8008f24:	4610      	mov	r0, r2
 8008f26:	4798      	blx	r3
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	e008      	b.n	8008f3e <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f34:	f107 0208 	add.w	r2, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	2202      	movs	r2, #2
 8008f44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f46:	e12d      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8008f54:	4b8e      	ldr	r3, [pc, #568]	@ (8009190 <USBD_GetDescriptor+0x2e8>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f58:	f107 0208 	add.w	r2, r7, #8
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4798      	blx	r3
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	e008      	b.n	8008f76 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	f107 0208 	add.w	r2, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
      break;
 8008f7e:	e111      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	f200 80ac 	bhi.w	80090e4 <USBD_GetDescriptor+0x23c>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <USBD_GetDescriptor+0xec>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fad 	.word	0x08008fad
 8008f98:	08008fe1 	.word	0x08008fe1
 8008f9c:	08009015 	.word	0x08009015
 8008fa0:	08009049 	.word	0x08009049
 8008fa4:	0800907d 	.word	0x0800907d
 8008fa8:	080090b1 	.word	0x080090b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fce:	e091      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fae9 	bl	80095aa <USBD_CtlError>
            err++;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fde:	e089      	b.n	80090f4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	7c12      	ldrb	r2, [r2, #16]
 8008ff8:	f107 0108 	add.w	r1, r7, #8
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009002:	e077      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 facf 	bl	80095aa <USBD_CtlError>
            err++;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	3301      	adds	r3, #1
 8009010:	72fb      	strb	r3, [r7, #11]
          break;
 8009012:	e06f      	b.n	80090f4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009036:	e05d      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fab5 	bl	80095aa <USBD_CtlError>
            err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
          break;
 8009046:	e055      	b.n	80090f4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7c12      	ldrb	r2, [r2, #16]
 8009060:	f107 0108 	add.w	r1, r7, #8
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
 8009068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906a:	e043      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa9b 	bl	80095aa <USBD_CtlError>
            err++;
 8009074:	7afb      	ldrb	r3, [r7, #11]
 8009076:	3301      	adds	r3, #1
 8009078:	72fb      	strb	r3, [r7, #11]
          break;
 800907a:	e03b      	b.n	80090f4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00b      	beq.n	80090a0 <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	7c12      	ldrb	r2, [r2, #16]
 8009094:	f107 0108 	add.w	r1, r7, #8
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
 800909c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909e:	e029      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa81 	bl	80095aa <USBD_CtlError>
            err++;
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	3301      	adds	r3, #1
 80090ac:	72fb      	strb	r3, [r7, #11]
          break;
 80090ae:	e021      	b.n	80090f4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7c12      	ldrb	r2, [r2, #16]
 80090c8:	f107 0108 	add.w	r1, r7, #8
 80090cc:	4610      	mov	r0, r2
 80090ce:	4798      	blx	r3
 80090d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d2:	e00f      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa67 	bl	80095aa <USBD_CtlError>
            err++;
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	3301      	adds	r3, #1
 80090e0:	72fb      	strb	r3, [r7, #11]
          break;
 80090e2:	e007      	b.n	80090f4 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fa5f 	bl	80095aa <USBD_CtlError>
          err++;
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	3301      	adds	r3, #1
 80090f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090f2:	bf00      	nop
      }
      break;
 80090f4:	e056      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d117      	bne.n	800912e <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d007      	beq.n	800911a <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800910a:	4b21      	ldr	r3, [pc, #132]	@ (8009190 <USBD_GetDescriptor+0x2e8>)
 800910c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800910e:	f107 0208 	add.w	r2, r7, #8
 8009112:	4610      	mov	r0, r2
 8009114:	4798      	blx	r3
 8009116:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009118:	e044      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009122:	f107 0208 	add.w	r2, r7, #8
 8009126:	4610      	mov	r0, r2
 8009128:	4798      	blx	r3
 800912a:	60f8      	str	r0, [r7, #12]
      break;
 800912c:	e03a      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa3a 	bl	80095aa <USBD_CtlError>
        err++;
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	3301      	adds	r3, #1
 800913a:	72fb      	strb	r3, [r7, #11]
      break;
 800913c:	e032      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d11b      	bne.n	800917e <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d007      	beq.n	8009162 <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 8009152:	4b0f      	ldr	r3, [pc, #60]	@ (8009190 <USBD_GetDescriptor+0x2e8>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	4610      	mov	r0, r2
 800915c:	4798      	blx	r3
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	e008      	b.n	8009174 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	f107 0208 	add.w	r2, r7, #8
 800916e:	4610      	mov	r0, r2
 8009170:	4798      	blx	r3
 8009172:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3301      	adds	r3, #1
 8009178:	2207      	movs	r2, #7
 800917a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800917c:	e012      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa12 	bl	80095aa <USBD_CtlError>
        err++;
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	3301      	adds	r3, #1
 800918a:	72fb      	strb	r3, [r7, #11]
      break;
 800918c:	e00a      	b.n	80091a4 <USBD_GetDescriptor+0x2fc>
 800918e:	bf00      	nop
 8009190:	200000a8 	.word	0x200000a8

    default:
      USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa07 	bl	80095aa <USBD_CtlError>
      err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
      break;
 80091a2:	bf00      	nop
  }

  if (err != 0U)
 80091a4:	7afb      	ldrb	r3, [r7, #11]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d11e      	bne.n	80091e8 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 80091b2:	893b      	ldrh	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00e      	beq.n	80091d6 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	88da      	ldrh	r2, [r3, #6]
 80091bc:	893b      	ldrh	r3, [r7, #8]
 80091be:	4293      	cmp	r3, r2
 80091c0:	bf28      	it	cs
 80091c2:	4613      	movcs	r3, r2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091c8:	893b      	ldrh	r3, [r7, #8]
 80091ca:	461a      	mov	r2, r3
 80091cc:	68f9      	ldr	r1, [r7, #12]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb6b 	bl	80098aa <USBD_CtlSendData>
 80091d4:	e009      	b.n	80091ea <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9e6 	bl	80095aa <USBD_CtlError>
 80091de:	e004      	b.n	80091ea <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fbbc 	bl	800995e <USBD_CtlSendStatus>
 80091e6:	e000      	b.n	80091ea <USBD_GetDescriptor+0x342>
    return;
 80091e8:	bf00      	nop
  }
}
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d131      	bne.n	8009266 <USBD_SetAddress+0x76>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d12d      	bne.n	8009266 <USBD_SetAddress+0x76>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009210:	d829      	bhi.n	8009266 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	885b      	ldrh	r3, [r3, #2]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800921c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b03      	cmp	r3, #3
 8009228:	d104      	bne.n	8009234 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9bc 	bl	80095aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	e01d      	b.n	8009270 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7bfa      	ldrb	r2, [r7, #15]
 8009238:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fe fe25 	bl	8007e90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fb89 	bl	800995e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d004      	beq.n	800925c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925a:	e009      	b.n	8009270 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	e004      	b.n	8009270 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f99e 	bl	80095aa <USBD_CtlError>
  }
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	885b      	ldrh	r3, [r3, #2]
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b4e      	ldr	r3, [pc, #312]	@ (80093c8 <USBD_SetConfig+0x150>)
 800928e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009290:	4b4d      	ldr	r3, [pc, #308]	@ (80093c8 <USBD_SetConfig+0x150>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d905      	bls.n	80092a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f985 	bl	80095aa <USBD_CtlError>
    return USBD_FAIL;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e08c      	b.n	80093be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_SetConfig+0x3e>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d029      	beq.n	8009308 <USBD_SetConfig+0x90>
 80092b4:	e075      	b.n	80093a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092b6:	4b44      	ldr	r3, [pc, #272]	@ (80093c8 <USBD_SetConfig+0x150>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d020      	beq.n	8009300 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092be:	4b42      	ldr	r3, [pc, #264]	@ (80093c8 <USBD_SetConfig+0x150>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092c8:	4b3f      	ldr	r3, [pc, #252]	@ (80093c8 <USBD_SetConfig+0x150>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fe ff65 	bl	800819e <USBD_SetClassConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f962 	bl	80095aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092ee:	e065      	b.n	80093bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb34 	bl	800995e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2203      	movs	r2, #3
 80092fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092fe:	e05d      	b.n	80093bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fb2c 	bl	800995e <USBD_CtlSendStatus>
      break;
 8009306:	e059      	b.n	80093bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009308:	4b2f      	ldr	r3, [pc, #188]	@ (80093c8 <USBD_SetConfig+0x150>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d112      	bne.n	8009336 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009318:	4b2b      	ldr	r3, [pc, #172]	@ (80093c8 <USBD_SetConfig+0x150>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009322:	4b29      	ldr	r3, [pc, #164]	@ (80093c8 <USBD_SetConfig+0x150>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7fe ff73 	bl	8008214 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fb15 	bl	800995e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009334:	e042      	b.n	80093bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009336:	4b24      	ldr	r3, [pc, #144]	@ (80093c8 <USBD_SetConfig+0x150>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	429a      	cmp	r2, r3
 8009342:	d02a      	beq.n	800939a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7fe ff61 	bl	8008214 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009352:	4b1d      	ldr	r3, [pc, #116]	@ (80093c8 <USBD_SetConfig+0x150>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800935c:	4b1a      	ldr	r3, [pc, #104]	@ (80093c8 <USBD_SetConfig+0x150>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7fe ff1b 	bl	800819e <USBD_SetClassConfig>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00f      	beq.n	8009392 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f918 	bl	80095aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fe ff46 	bl	8008214 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009390:	e014      	b.n	80093bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fae3 	bl	800995e <USBD_CtlSendStatus>
      break;
 8009398:	e010      	b.n	80093bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fadf 	bl	800995e <USBD_CtlSendStatus>
      break;
 80093a0:	e00c      	b.n	80093bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f900 	bl	80095aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093aa:	4b07      	ldr	r3, [pc, #28]	@ (80093c8 <USBD_SetConfig+0x150>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7fe ff2f 	bl	8008214 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ba:	bf00      	nop
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000994 	.word	0x20000994

080093cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	88db      	ldrh	r3, [r3, #6]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d004      	beq.n	80093e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f8e2 	bl	80095aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093e6:	e023      	b.n	8009430 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	dc02      	bgt.n	80093fa <USBD_GetConfig+0x2e>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dc03      	bgt.n	8009400 <USBD_GetConfig+0x34>
 80093f8:	e015      	b.n	8009426 <USBD_GetConfig+0x5a>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d00b      	beq.n	8009416 <USBD_GetConfig+0x4a>
 80093fe:	e012      	b.n	8009426 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3308      	adds	r3, #8
 800940a:	2201      	movs	r2, #1
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa4b 	bl	80098aa <USBD_CtlSendData>
        break;
 8009414:	e00c      	b.n	8009430 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3304      	adds	r3, #4
 800941a:	2201      	movs	r2, #1
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa43 	bl	80098aa <USBD_CtlSendData>
        break;
 8009424:	e004      	b.n	8009430 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f8be 	bl	80095aa <USBD_CtlError>
        break;
 800942e:	bf00      	nop
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009448:	b2db      	uxtb	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	2b02      	cmp	r3, #2
 800944e:	d81e      	bhi.n	800948e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	88db      	ldrh	r3, [r3, #6]
 8009454:	2b02      	cmp	r3, #2
 8009456:	d004      	beq.n	8009462 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8a5 	bl	80095aa <USBD_CtlError>
        break;
 8009460:	e01a      	b.n	8009498 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d005      	beq.n	800947e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f043 0202 	orr.w	r2, r3, #2
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	330c      	adds	r3, #12
 8009482:	2202      	movs	r2, #2
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa0f 	bl	80098aa <USBD_CtlSendData>
      break;
 800948c:	e004      	b.n	8009498 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f88a 	bl	80095aa <USBD_CtlError>
      break;
 8009496:	bf00      	nop
  }
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	885b      	ldrh	r3, [r3, #2]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d107      	bne.n	80094c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa4f 	bl	800995e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094c0:	e013      	b.n	80094ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d10b      	bne.n	80094e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	889b      	ldrh	r3, [r3, #4]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fa3f 	bl	800995e <USBD_CtlSendStatus>
}
 80094e0:	e003      	b.n	80094ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f860 	bl	80095aa <USBD_CtlError>
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009502:	b2db      	uxtb	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	2b02      	cmp	r3, #2
 8009508:	d80b      	bhi.n	8009522 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d10c      	bne.n	800952c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa1f 	bl	800995e <USBD_CtlSendStatus>
      }
      break;
 8009520:	e004      	b.n	800952c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f840 	bl	80095aa <USBD_CtlError>
      break;
 800952a:	e000      	b.n	800952e <USBD_ClrFeature+0x3c>
      break;
 800952c:	bf00      	nop
  }
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	781a      	ldrb	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7ff fa06 	bl	8008972 <SWAPBYTE>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3301      	adds	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff f9f9 	bl	8008972 <SWAPBYTE>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff f9ec 	bl	8008972 <SWAPBYTE>
 800959a:	4603      	mov	r3, r0
 800959c:	461a      	mov	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	80da      	strh	r2, [r3, #6]
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095b4:	2180      	movs	r1, #128	@ 0x80
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fe fc0c 	bl	8007dd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095bc:	2100      	movs	r1, #0
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7fe fc08 	bl	8007dd4 <USBD_LL_StallEP>
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d036      	beq.n	8009650 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095e6:	6938      	ldr	r0, [r7, #16]
 80095e8:	f000 f836 	bl	8009658 <USBD_GetLen>
 80095ec:	4603      	mov	r3, r0
 80095ee:	3301      	adds	r3, #1
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	4413      	add	r3, r2
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	7812      	ldrb	r2, [r2, #0]
 8009604:	701a      	strb	r2, [r3, #0]
  idx++;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	3301      	adds	r3, #1
 800960a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	4413      	add	r3, r2
 8009612:	2203      	movs	r2, #3
 8009614:	701a      	strb	r2, [r3, #0]
  idx++;
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	3301      	adds	r3, #1
 800961a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800961c:	e013      	b.n	8009646 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4413      	add	r3, r2
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3301      	adds	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
    idx++;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	3301      	adds	r3, #1
 8009634:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4413      	add	r3, r2
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	3301      	adds	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e7      	bne.n	800961e <USBD_GetString+0x52>
 800964e:	e000      	b.n	8009652 <USBD_GetString+0x86>
    return;
 8009650:	bf00      	nop
  }
}
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009668:	e005      	b.n	8009676 <USBD_GetLen+0x1e>
  {
    len++;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	3301      	adds	r3, #1
 800966e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3301      	adds	r3, #1
 8009674:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1f5      	bne.n	800966a <USBD_GetLen+0x12>
  }

  return len;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2212      	movs	r2, #18
 800969c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800969e:	4b03      	ldr	r3, [pc, #12]	@ (80096ac <USBD_Class_DeviceDescriptor+0x20>)
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	2000010c 	.word	0x2000010c

080096b0 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2204      	movs	r2, #4
 80096c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80096c2:	4b03      	ldr	r3, [pc, #12]	@ (80096d0 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20000120 	.word	0x20000120

080096d4 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	6039      	str	r1, [r7, #0]
 80096de:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d105      	bne.n	80096f2 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	4907      	ldr	r1, [pc, #28]	@ (8009708 <USBD_Class_ProductStrDescriptor+0x34>)
 80096ea:	4808      	ldr	r0, [pc, #32]	@ (800970c <USBD_Class_ProductStrDescriptor+0x38>)
 80096ec:	f7ff ff6e 	bl	80095cc <USBD_GetString>
 80096f0:	e004      	b.n	80096fc <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	4904      	ldr	r1, [pc, #16]	@ (8009708 <USBD_Class_ProductStrDescriptor+0x34>)
 80096f6:	4806      	ldr	r0, [pc, #24]	@ (8009710 <USBD_Class_ProductStrDescriptor+0x3c>)
 80096f8:	f7ff ff68 	bl	80095cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80096fc:	4b02      	ldr	r3, [pc, #8]	@ (8009708 <USBD_Class_ProductStrDescriptor+0x34>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000998 	.word	0x20000998
 800970c:	0800a938 	.word	0x0800a938
 8009710:	0800a95c 	.word	0x0800a95c

08009714 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	4904      	ldr	r1, [pc, #16]	@ (8009734 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8009724:	4804      	ldr	r0, [pc, #16]	@ (8009738 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8009726:	f7ff ff51 	bl	80095cc <USBD_GetString>
  return USBD_StrDesc;
 800972a:	4b02      	ldr	r3, [pc, #8]	@ (8009734 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000998 	.word	0x20000998
 8009738:	0800a980 	.word	0x0800a980

0800973c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	221a      	movs	r2, #26
 800974c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800974e:	f000 f843 	bl	80097d8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8009752:	4b02      	ldr	r3, [pc, #8]	@ (800975c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000124 	.word	0x20000124

08009760 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4907      	ldr	r1, [pc, #28]	@ (8009794 <USBD_Class_ConfigStrDescriptor+0x34>)
 8009776:	4808      	ldr	r0, [pc, #32]	@ (8009798 <USBD_Class_ConfigStrDescriptor+0x38>)
 8009778:	f7ff ff28 	bl	80095cc <USBD_GetString>
 800977c:	e004      	b.n	8009788 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	4904      	ldr	r1, [pc, #16]	@ (8009794 <USBD_Class_ConfigStrDescriptor+0x34>)
 8009782:	4805      	ldr	r0, [pc, #20]	@ (8009798 <USBD_Class_ConfigStrDescriptor+0x38>)
 8009784:	f7ff ff22 	bl	80095cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009788:	4b02      	ldr	r3, [pc, #8]	@ (8009794 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000998 	.word	0x20000998
 8009798:	0800a994 	.word	0x0800a994

0800979c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4907      	ldr	r1, [pc, #28]	@ (80097d0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80097b2:	4808      	ldr	r0, [pc, #32]	@ (80097d4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80097b4:	f7ff ff0a 	bl	80095cc <USBD_GetString>
 80097b8:	e004      	b.n	80097c4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4904      	ldr	r1, [pc, #16]	@ (80097d0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80097be:	4805      	ldr	r0, [pc, #20]	@ (80097d4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80097c0:	f7ff ff04 	bl	80095cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000998 	.word	0x20000998
 80097d4:	0800a9b4 	.word	0x0800a9b4

080097d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80097de:	4b0f      	ldr	r3, [pc, #60]	@ (800981c <Get_SerialNum+0x44>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80097e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009820 <Get_SerialNum+0x48>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80097ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009824 <Get_SerialNum+0x4c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80097fe:	2208      	movs	r2, #8
 8009800:	4909      	ldr	r1, [pc, #36]	@ (8009828 <Get_SerialNum+0x50>)
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f814 	bl	8009830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8009808:	2204      	movs	r2, #4
 800980a:	4908      	ldr	r1, [pc, #32]	@ (800982c <Get_SerialNum+0x54>)
 800980c:	68b8      	ldr	r0, [r7, #8]
 800980e:	f000 f80f 	bl	8009830 <IntToUnicode>
  }
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	08fff800 	.word	0x08fff800
 8009820:	08fff804 	.word	0x08fff804
 8009824:	08fff808 	.word	0x08fff808
 8009828:	20000126 	.word	0x20000126
 800982c:	20000136 	.word	0x20000136

08009830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]
 8009846:	e025      	b.n	8009894 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	0f1b      	lsrs	r3, r3, #28
 800984c:	2b09      	cmp	r3, #9
 800984e:	d80a      	bhi.n	8009866 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0f1b      	lsrs	r3, r3, #28
 8009854:	b2da      	uxtb	r2, r3
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	440b      	add	r3, r1
 800985e:	3230      	adds	r2, #48	@ 0x30
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	e009      	b.n	800987a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	0f1b      	lsrs	r3, r3, #28
 800986a:	b2da      	uxtb	r2, r3
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	440b      	add	r3, r1
 8009874:	3237      	adds	r2, #55	@ 0x37
 8009876:	b2d2      	uxtb	r2, r2
 8009878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	3301      	adds	r3, #1
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4413      	add	r3, r2
 800988a:	2200      	movs	r2, #0
 800988c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	3301      	adds	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
 8009894:	7dfa      	ldrb	r2, [r7, #23]
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	429a      	cmp	r2, r3
 800989a:	d3d5      	bcc.n	8009848 <IntToUnicode+0x18>
  }
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	60f8      	str	r0, [r7, #12]
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	2100      	movs	r1, #0
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7fe faf6 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	2100      	movs	r1, #0
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7fe fae5 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2203      	movs	r2, #3
 8009912:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	2100      	movs	r1, #0
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7fe fae3 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7fe fad2 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2204      	movs	r2, #4
 800996a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800996e:	2300      	movs	r3, #0
 8009970:	2200      	movs	r2, #0
 8009972:	2100      	movs	r1, #0
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe faa4 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2205      	movs	r2, #5
 8009990:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009994:	2300      	movs	r3, #0
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7fe faac 	bl	8007ef8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <std>:
 80099ac:	2300      	movs	r3, #0
 80099ae:	b510      	push	{r4, lr}
 80099b0:	4604      	mov	r4, r0
 80099b2:	6083      	str	r3, [r0, #8]
 80099b4:	8181      	strh	r1, [r0, #12]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6643      	str	r3, [r0, #100]	@ 0x64
 80099ba:	81c2      	strh	r2, [r0, #14]
 80099bc:	2208      	movs	r2, #8
 80099be:	6183      	str	r3, [r0, #24]
 80099c0:	e9c0 3300 	strd	r3, r3, [r0]
 80099c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c8:	305c      	adds	r0, #92	@ 0x5c
 80099ca:	f000 f90e 	bl	8009bea <memset>
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <std+0x58>)
 80099d0:	6224      	str	r4, [r4, #32]
 80099d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <std+0x5c>)
 80099d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099d8:	4b0c      	ldr	r3, [pc, #48]	@ (8009a0c <std+0x60>)
 80099da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a10 <std+0x64>)
 80099de:	6323      	str	r3, [r4, #48]	@ 0x30
 80099e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <std+0x68>)
 80099e2:	429c      	cmp	r4, r3
 80099e4:	d006      	beq.n	80099f4 <std+0x48>
 80099e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099ea:	4294      	cmp	r4, r2
 80099ec:	d002      	beq.n	80099f4 <std+0x48>
 80099ee:	33d0      	adds	r3, #208	@ 0xd0
 80099f0:	429c      	cmp	r4, r3
 80099f2:	d105      	bne.n	8009a00 <std+0x54>
 80099f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099fc:	f000 b96e 	b.w	8009cdc <__retarget_lock_init_recursive>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	bf00      	nop
 8009a04:	08009b65 	.word	0x08009b65
 8009a08:	08009b87 	.word	0x08009b87
 8009a0c:	08009bbf 	.word	0x08009bbf
 8009a10:	08009be3 	.word	0x08009be3
 8009a14:	20000a98 	.word	0x20000a98

08009a18 <stdio_exit_handler>:
 8009a18:	4a02      	ldr	r2, [pc, #8]	@ (8009a24 <stdio_exit_handler+0xc>)
 8009a1a:	4903      	ldr	r1, [pc, #12]	@ (8009a28 <stdio_exit_handler+0x10>)
 8009a1c:	4803      	ldr	r0, [pc, #12]	@ (8009a2c <stdio_exit_handler+0x14>)
 8009a1e:	f000 b869 	b.w	8009af4 <_fwalk_sglue>
 8009a22:	bf00      	nop
 8009a24:	20000140 	.word	0x20000140
 8009a28:	0800a585 	.word	0x0800a585
 8009a2c:	20000150 	.word	0x20000150

08009a30 <cleanup_stdio>:
 8009a30:	6841      	ldr	r1, [r0, #4]
 8009a32:	4b0c      	ldr	r3, [pc, #48]	@ (8009a64 <cleanup_stdio+0x34>)
 8009a34:	4299      	cmp	r1, r3
 8009a36:	b510      	push	{r4, lr}
 8009a38:	4604      	mov	r4, r0
 8009a3a:	d001      	beq.n	8009a40 <cleanup_stdio+0x10>
 8009a3c:	f000 fda2 	bl	800a584 <_fflush_r>
 8009a40:	68a1      	ldr	r1, [r4, #8]
 8009a42:	4b09      	ldr	r3, [pc, #36]	@ (8009a68 <cleanup_stdio+0x38>)
 8009a44:	4299      	cmp	r1, r3
 8009a46:	d002      	beq.n	8009a4e <cleanup_stdio+0x1e>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fd9b 	bl	800a584 <_fflush_r>
 8009a4e:	68e1      	ldr	r1, [r4, #12]
 8009a50:	4b06      	ldr	r3, [pc, #24]	@ (8009a6c <cleanup_stdio+0x3c>)
 8009a52:	4299      	cmp	r1, r3
 8009a54:	d004      	beq.n	8009a60 <cleanup_stdio+0x30>
 8009a56:	4620      	mov	r0, r4
 8009a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5c:	f000 bd92 	b.w	800a584 <_fflush_r>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	bf00      	nop
 8009a64:	20000a98 	.word	0x20000a98
 8009a68:	20000b00 	.word	0x20000b00
 8009a6c:	20000b68 	.word	0x20000b68

08009a70 <global_stdio_init.part.0>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <global_stdio_init.part.0+0x30>)
 8009a74:	2104      	movs	r1, #4
 8009a76:	4c0b      	ldr	r4, [pc, #44]	@ (8009aa4 <global_stdio_init.part.0+0x34>)
 8009a78:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa8 <global_stdio_init.part.0+0x38>)
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f7ff ff94 	bl	80099ac <std>
 8009a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a88:	2201      	movs	r2, #1
 8009a8a:	2109      	movs	r1, #9
 8009a8c:	f7ff ff8e 	bl	80099ac <std>
 8009a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a94:	2202      	movs	r2, #2
 8009a96:	2112      	movs	r1, #18
 8009a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9c:	f7ff bf86 	b.w	80099ac <std>
 8009aa0:	20000bd0 	.word	0x20000bd0
 8009aa4:	20000a98 	.word	0x20000a98
 8009aa8:	08009a19 	.word	0x08009a19

08009aac <__sfp_lock_acquire>:
 8009aac:	4801      	ldr	r0, [pc, #4]	@ (8009ab4 <__sfp_lock_acquire+0x8>)
 8009aae:	f000 b916 	b.w	8009cde <__retarget_lock_acquire_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	20000bd9 	.word	0x20000bd9

08009ab8 <__sfp_lock_release>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	@ (8009ac0 <__sfp_lock_release+0x8>)
 8009aba:	f000 b911 	b.w	8009ce0 <__retarget_lock_release_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20000bd9 	.word	0x20000bd9

08009ac4 <__sinit>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	f7ff fff0 	bl	8009aac <__sfp_lock_acquire>
 8009acc:	6a23      	ldr	r3, [r4, #32]
 8009ace:	b11b      	cbz	r3, 8009ad8 <__sinit+0x14>
 8009ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad4:	f7ff bff0 	b.w	8009ab8 <__sfp_lock_release>
 8009ad8:	4b04      	ldr	r3, [pc, #16]	@ (8009aec <__sinit+0x28>)
 8009ada:	6223      	str	r3, [r4, #32]
 8009adc:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <__sinit+0x2c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1f5      	bne.n	8009ad0 <__sinit+0xc>
 8009ae4:	f7ff ffc4 	bl	8009a70 <global_stdio_init.part.0>
 8009ae8:	e7f2      	b.n	8009ad0 <__sinit+0xc>
 8009aea:	bf00      	nop
 8009aec:	08009a31 	.word	0x08009a31
 8009af0:	20000bd0 	.word	0x20000bd0

08009af4 <_fwalk_sglue>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	4607      	mov	r7, r0
 8009afa:	4688      	mov	r8, r1
 8009afc:	4614      	mov	r4, r2
 8009afe:	2600      	movs	r6, #0
 8009b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b04:	f1b9 0901 	subs.w	r9, r9, #1
 8009b08:	d505      	bpl.n	8009b16 <_fwalk_sglue+0x22>
 8009b0a:	6824      	ldr	r4, [r4, #0]
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	d1f7      	bne.n	8009b00 <_fwalk_sglue+0xc>
 8009b10:	4630      	mov	r0, r6
 8009b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d907      	bls.n	8009b2c <_fwalk_sglue+0x38>
 8009b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b20:	3301      	adds	r3, #1
 8009b22:	d003      	beq.n	8009b2c <_fwalk_sglue+0x38>
 8009b24:	4629      	mov	r1, r5
 8009b26:	4638      	mov	r0, r7
 8009b28:	47c0      	blx	r8
 8009b2a:	4306      	orrs	r6, r0
 8009b2c:	3568      	adds	r5, #104	@ 0x68
 8009b2e:	e7e9      	b.n	8009b04 <_fwalk_sglue+0x10>

08009b30 <iprintf>:
 8009b30:	b40f      	push	{r0, r1, r2, r3}
 8009b32:	b507      	push	{r0, r1, r2, lr}
 8009b34:	4906      	ldr	r1, [pc, #24]	@ (8009b50 <iprintf+0x20>)
 8009b36:	ab04      	add	r3, sp, #16
 8009b38:	6808      	ldr	r0, [r1, #0]
 8009b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3e:	6881      	ldr	r1, [r0, #8]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	f000 f9f1 	bl	8009f28 <_vfiprintf_r>
 8009b46:	b003      	add	sp, #12
 8009b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b4c:	b004      	add	sp, #16
 8009b4e:	4770      	bx	lr
 8009b50:	2000014c 	.word	0x2000014c

08009b54 <putchar>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	@ (8009b60 <putchar+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	6882      	ldr	r2, [r0, #8]
 8009b5c:	f000 bd3a 	b.w	800a5d4 <_putc_r>
 8009b60:	2000014c 	.word	0x2000014c

08009b64 <__sread>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	460c      	mov	r4, r1
 8009b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6c:	f000 f868 	bl	8009c40 <_read_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	bfab      	itete	ge
 8009b74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b76:	89a3      	ldrhlt	r3, [r4, #12]
 8009b78:	181b      	addge	r3, r3, r0
 8009b7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b7e:	bfac      	ite	ge
 8009b80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b82:	81a3      	strhlt	r3, [r4, #12]
 8009b84:	bd10      	pop	{r4, pc}

08009b86 <__swrite>:
 8009b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8a:	461f      	mov	r7, r3
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	4605      	mov	r5, r0
 8009b90:	460c      	mov	r4, r1
 8009b92:	05db      	lsls	r3, r3, #23
 8009b94:	4616      	mov	r6, r2
 8009b96:	d505      	bpl.n	8009ba4 <__swrite+0x1e>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f83c 	bl	8009c1c <_lseek_r>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bac:	4628      	mov	r0, r5
 8009bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	f000 b853 	b.w	8009c64 <_write_r>

08009bbe <__sseek>:
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc6:	f000 f829 	bl	8009c1c <_lseek_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	bf15      	itete	ne
 8009bd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bda:	81a3      	strheq	r3, [r4, #12]
 8009bdc:	bf18      	it	ne
 8009bde:	81a3      	strhne	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__sclose>:
 8009be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be6:	f000 b809 	b.w	8009bfc <_close_r>

08009bea <memset>:
 8009bea:	4402      	add	r2, r0
 8009bec:	4603      	mov	r3, r0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d100      	bne.n	8009bf4 <memset+0xa>
 8009bf2:	4770      	bx	lr
 8009bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf8:	e7f9      	b.n	8009bee <memset+0x4>
	...

08009bfc <_close_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4d05      	ldr	r5, [pc, #20]	@ (8009c18 <_close_r+0x1c>)
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f6 fd45 	bl	8000696 <_close>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_close_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_close_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20000bd4 	.word	0x20000bd4

08009c1c <_lseek_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4d06      	ldr	r5, [pc, #24]	@ (8009c3c <_lseek_r+0x20>)
 8009c22:	4608      	mov	r0, r1
 8009c24:	4611      	mov	r1, r2
 8009c26:	2200      	movs	r2, #0
 8009c28:	602a      	str	r2, [r5, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f7f6 fd5a 	bl	80006e4 <_lseek>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_lseek_r+0x1e>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_lseek_r+0x1e>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	20000bd4 	.word	0x20000bd4

08009c40 <_read_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4604      	mov	r4, r0
 8009c44:	4d06      	ldr	r5, [pc, #24]	@ (8009c60 <_read_r+0x20>)
 8009c46:	4608      	mov	r0, r1
 8009c48:	4611      	mov	r1, r2
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	602a      	str	r2, [r5, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f7f6 fce8 	bl	8000624 <_read>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_read_r+0x1e>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_read_r+0x1e>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20000bd4 	.word	0x20000bd4

08009c64 <_write_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	4d06      	ldr	r5, [pc, #24]	@ (8009c84 <_write_r+0x20>)
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	2200      	movs	r2, #0
 8009c70:	602a      	str	r2, [r5, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f7f6 fcf3 	bl	800065e <_write>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_write_r+0x1e>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_write_r+0x1e>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	20000bd4 	.word	0x20000bd4

08009c88 <__errno>:
 8009c88:	4b01      	ldr	r3, [pc, #4]	@ (8009c90 <__errno+0x8>)
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	2000014c 	.word	0x2000014c

08009c94 <__libc_init_array>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	4d0d      	ldr	r5, [pc, #52]	@ (8009ccc <__libc_init_array+0x38>)
 8009c98:	2600      	movs	r6, #0
 8009c9a:	4c0d      	ldr	r4, [pc, #52]	@ (8009cd0 <__libc_init_array+0x3c>)
 8009c9c:	1b64      	subs	r4, r4, r5
 8009c9e:	10a4      	asrs	r4, r4, #2
 8009ca0:	42a6      	cmp	r6, r4
 8009ca2:	d109      	bne.n	8009cb8 <__libc_init_array+0x24>
 8009ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8009cd4 <__libc_init_array+0x40>)
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	4c0b      	ldr	r4, [pc, #44]	@ (8009cd8 <__libc_init_array+0x44>)
 8009caa:	f000 fdfd 	bl	800a8a8 <_init>
 8009cae:	1b64      	subs	r4, r4, r5
 8009cb0:	10a4      	asrs	r4, r4, #2
 8009cb2:	42a6      	cmp	r6, r4
 8009cb4:	d105      	bne.n	8009cc2 <__libc_init_array+0x2e>
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}
 8009cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	4798      	blx	r3
 8009cc0:	e7ee      	b.n	8009ca0 <__libc_init_array+0xc>
 8009cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc6:	3601      	adds	r6, #1
 8009cc8:	4798      	blx	r3
 8009cca:	e7f2      	b.n	8009cb2 <__libc_init_array+0x1e>
 8009ccc:	0800aa18 	.word	0x0800aa18
 8009cd0:	0800aa18 	.word	0x0800aa18
 8009cd4:	0800aa18 	.word	0x0800aa18
 8009cd8:	0800aa1c 	.word	0x0800aa1c

08009cdc <__retarget_lock_init_recursive>:
 8009cdc:	4770      	bx	lr

08009cde <__retarget_lock_acquire_recursive>:
 8009cde:	4770      	bx	lr

08009ce0 <__retarget_lock_release_recursive>:
 8009ce0:	4770      	bx	lr
	...

08009ce4 <_free_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	d041      	beq.n	8009d70 <_free_r+0x8c>
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f0c      	subs	r4, r1, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfb8      	it	lt
 8009cf6:	18e4      	addlt	r4, r4, r3
 8009cf8:	f000 f8e0 	bl	8009ebc <__malloc_lock>
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <_free_r+0x90>)
 8009cfe:	6813      	ldr	r3, [r2, #0]
 8009d00:	b933      	cbnz	r3, 8009d10 <_free_r+0x2c>
 8009d02:	6063      	str	r3, [r4, #4]
 8009d04:	6014      	str	r4, [r2, #0]
 8009d06:	4628      	mov	r0, r5
 8009d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d0c:	f000 b8dc 	b.w	8009ec8 <__malloc_unlock>
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	d908      	bls.n	8009d26 <_free_r+0x42>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	1821      	adds	r1, r4, r0
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf01      	itttt	eq
 8009d1c:	6819      	ldreq	r1, [r3, #0]
 8009d1e:	685b      	ldreq	r3, [r3, #4]
 8009d20:	1809      	addeq	r1, r1, r0
 8009d22:	6021      	streq	r1, [r4, #0]
 8009d24:	e7ed      	b.n	8009d02 <_free_r+0x1e>
 8009d26:	461a      	mov	r2, r3
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	b10b      	cbz	r3, 8009d30 <_free_r+0x4c>
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	d9fa      	bls.n	8009d26 <_free_r+0x42>
 8009d30:	6811      	ldr	r1, [r2, #0]
 8009d32:	1850      	adds	r0, r2, r1
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d10b      	bne.n	8009d50 <_free_r+0x6c>
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	4401      	add	r1, r0
 8009d3c:	1850      	adds	r0, r2, r1
 8009d3e:	6011      	str	r1, [r2, #0]
 8009d40:	4283      	cmp	r3, r0
 8009d42:	d1e0      	bne.n	8009d06 <_free_r+0x22>
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4408      	add	r0, r1
 8009d4a:	6053      	str	r3, [r2, #4]
 8009d4c:	6010      	str	r0, [r2, #0]
 8009d4e:	e7da      	b.n	8009d06 <_free_r+0x22>
 8009d50:	d902      	bls.n	8009d58 <_free_r+0x74>
 8009d52:	230c      	movs	r3, #12
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	e7d6      	b.n	8009d06 <_free_r+0x22>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	1821      	adds	r1, r4, r0
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf02      	ittt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	1809      	addeq	r1, r1, r0
 8009d66:	6063      	str	r3, [r4, #4]
 8009d68:	bf08      	it	eq
 8009d6a:	6021      	streq	r1, [r4, #0]
 8009d6c:	6054      	str	r4, [r2, #4]
 8009d6e:	e7ca      	b.n	8009d06 <_free_r+0x22>
 8009d70:	bd38      	pop	{r3, r4, r5, pc}
 8009d72:	bf00      	nop
 8009d74:	20000be0 	.word	0x20000be0

08009d78 <sbrk_aligned>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009db8 <sbrk_aligned+0x40>)
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	4605      	mov	r5, r0
 8009d80:	6831      	ldr	r1, [r6, #0]
 8009d82:	b911      	cbnz	r1, 8009d8a <sbrk_aligned+0x12>
 8009d84:	f000 fcee 	bl	800a764 <_sbrk_r>
 8009d88:	6030      	str	r0, [r6, #0]
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 fce9 	bl	800a764 <_sbrk_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d103      	bne.n	8009d9e <sbrk_aligned+0x26>
 8009d96:	f04f 34ff 	mov.w	r4, #4294967295
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	bd70      	pop	{r4, r5, r6, pc}
 8009d9e:	1cc4      	adds	r4, r0, #3
 8009da0:	f024 0403 	bic.w	r4, r4, #3
 8009da4:	42a0      	cmp	r0, r4
 8009da6:	d0f8      	beq.n	8009d9a <sbrk_aligned+0x22>
 8009da8:	1a21      	subs	r1, r4, r0
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 fcda 	bl	800a764 <_sbrk_r>
 8009db0:	3001      	adds	r0, #1
 8009db2:	d1f2      	bne.n	8009d9a <sbrk_aligned+0x22>
 8009db4:	e7ef      	b.n	8009d96 <sbrk_aligned+0x1e>
 8009db6:	bf00      	nop
 8009db8:	20000bdc 	.word	0x20000bdc

08009dbc <_malloc_r>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	1ccd      	adds	r5, r1, #3
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	f025 0503 	bic.w	r5, r5, #3
 8009dc8:	3508      	adds	r5, #8
 8009dca:	2d0c      	cmp	r5, #12
 8009dcc:	bf38      	it	cc
 8009dce:	250c      	movcc	r5, #12
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	db01      	blt.n	8009dd8 <_malloc_r+0x1c>
 8009dd4:	42a9      	cmp	r1, r5
 8009dd6:	d904      	bls.n	8009de2 <_malloc_r+0x26>
 8009dd8:	230c      	movs	r3, #12
 8009dda:	6033      	str	r3, [r6, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009eb8 <_malloc_r+0xfc>
 8009de6:	f000 f869 	bl	8009ebc <__malloc_lock>
 8009dea:	f8d8 3000 	ldr.w	r3, [r8]
 8009dee:	461c      	mov	r4, r3
 8009df0:	bb44      	cbnz	r4, 8009e44 <_malloc_r+0x88>
 8009df2:	4629      	mov	r1, r5
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff ffbf 	bl	8009d78 <sbrk_aligned>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	d158      	bne.n	8009eb2 <_malloc_r+0xf6>
 8009e00:	f8d8 4000 	ldr.w	r4, [r8]
 8009e04:	4627      	mov	r7, r4
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d143      	bne.n	8009e92 <_malloc_r+0xd6>
 8009e0a:	2c00      	cmp	r4, #0
 8009e0c:	d04b      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	4639      	mov	r1, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	eb04 0903 	add.w	r9, r4, r3
 8009e18:	f000 fca4 	bl	800a764 <_sbrk_r>
 8009e1c:	4581      	cmp	r9, r0
 8009e1e:	d142      	bne.n	8009ea6 <_malloc_r+0xea>
 8009e20:	6821      	ldr	r1, [r4, #0]
 8009e22:	4630      	mov	r0, r6
 8009e24:	1a6d      	subs	r5, r5, r1
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7ff ffa6 	bl	8009d78 <sbrk_aligned>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d03a      	beq.n	8009ea6 <_malloc_r+0xea>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	442b      	add	r3, r5
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	f8d8 3000 	ldr.w	r3, [r8]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	bb62      	cbnz	r2, 8009e98 <_malloc_r+0xdc>
 8009e3e:	f8c8 7000 	str.w	r7, [r8]
 8009e42:	e00f      	b.n	8009e64 <_malloc_r+0xa8>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	1b52      	subs	r2, r2, r5
 8009e48:	d420      	bmi.n	8009e8c <_malloc_r+0xd0>
 8009e4a:	2a0b      	cmp	r2, #11
 8009e4c:	d917      	bls.n	8009e7e <_malloc_r+0xc2>
 8009e4e:	1961      	adds	r1, r4, r5
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	6025      	str	r5, [r4, #0]
 8009e54:	bf18      	it	ne
 8009e56:	6059      	strne	r1, [r3, #4]
 8009e58:	6863      	ldr	r3, [r4, #4]
 8009e5a:	bf08      	it	eq
 8009e5c:	f8c8 1000 	streq.w	r1, [r8]
 8009e60:	5162      	str	r2, [r4, r5]
 8009e62:	604b      	str	r3, [r1, #4]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 f82f 	bl	8009ec8 <__malloc_unlock>
 8009e6a:	f104 000b 	add.w	r0, r4, #11
 8009e6e:	1d23      	adds	r3, r4, #4
 8009e70:	f020 0007 	bic.w	r0, r0, #7
 8009e74:	1ac2      	subs	r2, r0, r3
 8009e76:	bf1c      	itt	ne
 8009e78:	1a1b      	subne	r3, r3, r0
 8009e7a:	50a3      	strne	r3, [r4, r2]
 8009e7c:	e7af      	b.n	8009dde <_malloc_r+0x22>
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	bf0c      	ite	eq
 8009e84:	f8c8 2000 	streq.w	r2, [r8]
 8009e88:	605a      	strne	r2, [r3, #4]
 8009e8a:	e7eb      	b.n	8009e64 <_malloc_r+0xa8>
 8009e8c:	4623      	mov	r3, r4
 8009e8e:	6864      	ldr	r4, [r4, #4]
 8009e90:	e7ae      	b.n	8009df0 <_malloc_r+0x34>
 8009e92:	463c      	mov	r4, r7
 8009e94:	687f      	ldr	r7, [r7, #4]
 8009e96:	e7b6      	b.n	8009e06 <_malloc_r+0x4a>
 8009e98:	461a      	mov	r2, r3
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d1fb      	bne.n	8009e98 <_malloc_r+0xdc>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	6053      	str	r3, [r2, #4]
 8009ea4:	e7de      	b.n	8009e64 <_malloc_r+0xa8>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f000 f80c 	bl	8009ec8 <__malloc_unlock>
 8009eb0:	e794      	b.n	8009ddc <_malloc_r+0x20>
 8009eb2:	6005      	str	r5, [r0, #0]
 8009eb4:	e7d6      	b.n	8009e64 <_malloc_r+0xa8>
 8009eb6:	bf00      	nop
 8009eb8:	20000be0 	.word	0x20000be0

08009ebc <__malloc_lock>:
 8009ebc:	4801      	ldr	r0, [pc, #4]	@ (8009ec4 <__malloc_lock+0x8>)
 8009ebe:	f7ff bf0e 	b.w	8009cde <__retarget_lock_acquire_recursive>
 8009ec2:	bf00      	nop
 8009ec4:	20000bd8 	.word	0x20000bd8

08009ec8 <__malloc_unlock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__malloc_unlock+0x8>)
 8009eca:	f7ff bf09 	b.w	8009ce0 <__retarget_lock_release_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20000bd8 	.word	0x20000bd8

08009ed4 <__sfputc_r>:
 8009ed4:	6893      	ldr	r3, [r2, #8]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	6093      	str	r3, [r2, #8]
 8009edc:	b410      	push	{r4}
 8009ede:	da08      	bge.n	8009ef2 <__sfputc_r+0x1e>
 8009ee0:	6994      	ldr	r4, [r2, #24]
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	db01      	blt.n	8009eea <__sfputc_r+0x16>
 8009ee6:	290a      	cmp	r1, #10
 8009ee8:	d103      	bne.n	8009ef2 <__sfputc_r+0x1e>
 8009eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eee:	f000 bba5 	b.w	800a63c <__swbuf_r>
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	1c58      	adds	r0, r3, #1
 8009ef6:	6010      	str	r0, [r2, #0]
 8009ef8:	4608      	mov	r0, r1
 8009efa:	7019      	strb	r1, [r3, #0]
 8009efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <__sfputs_r>:
 8009f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	4614      	mov	r4, r2
 8009f0a:	18d5      	adds	r5, r2, r3
 8009f0c:	42ac      	cmp	r4, r5
 8009f0e:	d101      	bne.n	8009f14 <__sfputs_r+0x12>
 8009f10:	2000      	movs	r0, #0
 8009f12:	e007      	b.n	8009f24 <__sfputs_r+0x22>
 8009f14:	463a      	mov	r2, r7
 8009f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ffda 	bl	8009ed4 <__sfputc_r>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d1f3      	bne.n	8009f0c <__sfputs_r+0xa>
 8009f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f28 <_vfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	b09d      	sub	sp, #116	@ 0x74
 8009f30:	4614      	mov	r4, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	4606      	mov	r6, r0
 8009f36:	b118      	cbz	r0, 8009f40 <_vfiprintf_r+0x18>
 8009f38:	6a03      	ldr	r3, [r0, #32]
 8009f3a:	b90b      	cbnz	r3, 8009f40 <_vfiprintf_r+0x18>
 8009f3c:	f7ff fdc2 	bl	8009ac4 <__sinit>
 8009f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x2a>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7ff fec6 	bl	8009cde <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x34>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b99b      	cbnz	r3, 8009f84 <_vfiprintf_r+0x5c>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 fbaa 	bl	800a6b8 <__swsetup_r>
 8009f64:	b170      	cbz	r0, 8009f84 <_vfiprintf_r+0x5c>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d504      	bpl.n	8009f76 <_vfiprintf_r+0x4e>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	@ 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	0598      	lsls	r0, r3, #22
 8009f7a:	d4f7      	bmi.n	8009f6c <_vfiprintf_r+0x44>
 8009f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f7e:	f7ff feaf 	bl	8009ce0 <__retarget_lock_release_recursive>
 8009f82:	e7f3      	b.n	8009f6c <_vfiprintf_r+0x44>
 8009f84:	2300      	movs	r3, #0
 8009f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f8a:	f04f 0901 	mov.w	r9, #1
 8009f8e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a144 <_vfiprintf_r+0x21c>
 8009f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f94:	2320      	movs	r3, #32
 8009f96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f9a:	2330      	movs	r3, #48	@ 0x30
 8009f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	469a      	mov	sl, r3
 8009fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa8:	b10a      	cbz	r2, 8009fae <_vfiprintf_r+0x86>
 8009faa:	2a25      	cmp	r2, #37	@ 0x25
 8009fac:	d1f9      	bne.n	8009fa2 <_vfiprintf_r+0x7a>
 8009fae:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb2:	d00b      	beq.n	8009fcc <_vfiprintf_r+0xa4>
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ffa1 	bl	8009f02 <__sfputs_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f000 80a7 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc8:	445a      	add	r2, fp
 8009fca:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 809f 	beq.w	800a114 <_vfiprintf_r+0x1ec>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fdc:	f10a 0a01 	add.w	sl, sl, #1
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	9307      	str	r3, [sp, #28]
 8009fe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fe8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	4854      	ldr	r0, [pc, #336]	@ (800a144 <_vfiprintf_r+0x21c>)
 8009ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff8:	f000 fbc4 	bl	800a784 <memchr>
 8009ffc:	9a04      	ldr	r2, [sp, #16]
 8009ffe:	b9d8      	cbnz	r0, 800a038 <_vfiprintf_r+0x110>
 800a000:	06d1      	lsls	r1, r2, #27
 800a002:	bf44      	itt	mi
 800a004:	2320      	movmi	r3, #32
 800a006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a00a:	0713      	lsls	r3, r2, #28
 800a00c:	bf44      	itt	mi
 800a00e:	232b      	movmi	r3, #43	@ 0x2b
 800a010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b2a      	cmp	r3, #42	@ 0x2a
 800a01a:	d015      	beq.n	800a048 <_vfiprintf_r+0x120>
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	4621      	mov	r1, r4
 800a028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02c:	3b30      	subs	r3, #48	@ 0x30
 800a02e:	2b09      	cmp	r3, #9
 800a030:	d94b      	bls.n	800a0ca <_vfiprintf_r+0x1a2>
 800a032:	b1b0      	cbz	r0, 800a062 <_vfiprintf_r+0x13a>
 800a034:	9207      	str	r2, [sp, #28]
 800a036:	e014      	b.n	800a062 <_vfiprintf_r+0x13a>
 800a038:	eba0 0308 	sub.w	r3, r0, r8
 800a03c:	46a2      	mov	sl, r4
 800a03e:	fa09 f303 	lsl.w	r3, r9, r3
 800a042:	4313      	orrs	r3, r2
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	e7d2      	b.n	8009fee <_vfiprintf_r+0xc6>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d19      	adds	r1, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	9103      	str	r1, [sp, #12]
 800a052:	bfbb      	ittet	lt
 800a054:	425b      	neglt	r3, r3
 800a056:	f042 0202 	orrlt.w	r2, r2, #2
 800a05a:	9307      	strge	r3, [sp, #28]
 800a05c:	9307      	strlt	r3, [sp, #28]
 800a05e:	bfb8      	it	lt
 800a060:	9204      	strlt	r2, [sp, #16]
 800a062:	7823      	ldrb	r3, [r4, #0]
 800a064:	2b2e      	cmp	r3, #46	@ 0x2e
 800a066:	d10a      	bne.n	800a07e <_vfiprintf_r+0x156>
 800a068:	7863      	ldrb	r3, [r4, #1]
 800a06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a06c:	d132      	bne.n	800a0d4 <_vfiprintf_r+0x1ac>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	3402      	adds	r4, #2
 800a072:	1d1a      	adds	r2, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a07a:	9203      	str	r2, [sp, #12]
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a154 <_vfiprintf_r+0x22c>
 800a082:	2203      	movs	r2, #3
 800a084:	7821      	ldrb	r1, [r4, #0]
 800a086:	4650      	mov	r0, sl
 800a088:	f000 fb7c 	bl	800a784 <memchr>
 800a08c:	b138      	cbz	r0, 800a09e <_vfiprintf_r+0x176>
 800a08e:	eba0 000a 	sub.w	r0, r0, sl
 800a092:	2240      	movs	r2, #64	@ 0x40
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	3401      	adds	r4, #1
 800a098:	4082      	lsls	r2, r0
 800a09a:	4313      	orrs	r3, r2
 800a09c:	9304      	str	r3, [sp, #16]
 800a09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a2:	2206      	movs	r2, #6
 800a0a4:	4828      	ldr	r0, [pc, #160]	@ (800a148 <_vfiprintf_r+0x220>)
 800a0a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0aa:	f000 fb6b 	bl	800a784 <memchr>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d03f      	beq.n	800a132 <_vfiprintf_r+0x20a>
 800a0b2:	4b26      	ldr	r3, [pc, #152]	@ (800a14c <_vfiprintf_r+0x224>)
 800a0b4:	bb1b      	cbnz	r3, 800a0fe <_vfiprintf_r+0x1d6>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c4:	443b      	add	r3, r7
 800a0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c8:	e76a      	b.n	8009fa0 <_vfiprintf_r+0x78>
 800a0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	e7a8      	b.n	800a026 <_vfiprintf_r+0xfe>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	3401      	adds	r4, #1
 800a0d8:	f04f 0c0a 	mov.w	ip, #10
 800a0dc:	4619      	mov	r1, r3
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0e6:	3a30      	subs	r2, #48	@ 0x30
 800a0e8:	2a09      	cmp	r2, #9
 800a0ea:	d903      	bls.n	800a0f4 <_vfiprintf_r+0x1cc>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d0c6      	beq.n	800a07e <_vfiprintf_r+0x156>
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	e7c4      	b.n	800a07e <_vfiprintf_r+0x156>
 800a0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f0      	b.n	800a0e0 <_vfiprintf_r+0x1b8>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	462a      	mov	r2, r5
 800a102:	a904      	add	r1, sp, #16
 800a104:	4630      	mov	r0, r6
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	4b11      	ldr	r3, [pc, #68]	@ (800a150 <_vfiprintf_r+0x228>)
 800a10a:	f3af 8000 	nop.w
 800a10e:	4607      	mov	r7, r0
 800a110:	1c78      	adds	r0, r7, #1
 800a112:	d1d6      	bne.n	800a0c2 <_vfiprintf_r+0x19a>
 800a114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a116:	07d9      	lsls	r1, r3, #31
 800a118:	d405      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_vfiprintf_r+0x1fe>
 800a120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a122:	f7ff fddd 	bl	8009ce0 <__retarget_lock_release_recursive>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	065b      	lsls	r3, r3, #25
 800a12a:	f53f af1f 	bmi.w	8009f6c <_vfiprintf_r+0x44>
 800a12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a130:	e71e      	b.n	8009f70 <_vfiprintf_r+0x48>
 800a132:	ab03      	add	r3, sp, #12
 800a134:	462a      	mov	r2, r5
 800a136:	a904      	add	r1, sp, #16
 800a138:	4630      	mov	r0, r6
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	4b04      	ldr	r3, [pc, #16]	@ (800a150 <_vfiprintf_r+0x228>)
 800a13e:	f000 f87d 	bl	800a23c <_printf_i>
 800a142:	e7e4      	b.n	800a10e <_vfiprintf_r+0x1e6>
 800a144:	0800a9e4 	.word	0x0800a9e4
 800a148:	0800a9ee 	.word	0x0800a9ee
 800a14c:	00000000 	.word	0x00000000
 800a150:	08009f03 	.word	0x08009f03
 800a154:	0800a9ea 	.word	0x0800a9ea

0800a158 <_printf_common>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	4616      	mov	r6, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	688a      	ldr	r2, [r1, #8]
 800a162:	4607      	mov	r7, r0
 800a164:	690b      	ldr	r3, [r1, #16]
 800a166:	460c      	mov	r4, r1
 800a168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a178:	b10a      	cbz	r2, 800a17e <_printf_common+0x26>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	0699      	lsls	r1, r3, #26
 800a182:	bf42      	ittt	mi
 800a184:	6833      	ldrmi	r3, [r6, #0]
 800a186:	3302      	addmi	r3, #2
 800a188:	6033      	strmi	r3, [r6, #0]
 800a18a:	6825      	ldr	r5, [r4, #0]
 800a18c:	f015 0506 	ands.w	r5, r5, #6
 800a190:	d106      	bne.n	800a1a0 <_printf_common+0x48>
 800a192:	f104 0a19 	add.w	sl, r4, #25
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	6832      	ldr	r2, [r6, #0]
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc2b      	bgt.n	800a1f8 <_printf_common+0xa0>
 800a1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	3b00      	subs	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	0692      	lsls	r2, r2, #26
 800a1ae:	d430      	bmi.n	800a212 <_printf_common+0xba>
 800a1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c8      	blx	r9
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d023      	beq.n	800a206 <_printf_common+0xae>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	341a      	adds	r4, #26
 800a1c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a1c6:	f003 0306 	and.w	r3, r3, #6
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	bf0a      	itet	eq
 800a1ce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a1d2:	2500      	movne	r5, #0
 800a1d4:	6833      	ldreq	r3, [r6, #0]
 800a1d6:	f04f 0600 	mov.w	r6, #0
 800a1da:	bf08      	it	eq
 800a1dc:	1aed      	subeq	r5, r5, r3
 800a1de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a1e2:	bf08      	it	eq
 800a1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bfc4      	itt	gt
 800a1ec:	1a9b      	subgt	r3, r3, r2
 800a1ee:	18ed      	addgt	r5, r5, r3
 800a1f0:	42b5      	cmp	r5, r6
 800a1f2:	d11a      	bne.n	800a22a <_printf_common+0xd2>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e008      	b.n	800a20a <_printf_common+0xb2>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	4638      	mov	r0, r7
 800a200:	47c8      	blx	r9
 800a202:	3001      	adds	r0, #1
 800a204:	d103      	bne.n	800a20e <_printf_common+0xb6>
 800a206:	f04f 30ff 	mov.w	r0, #4294967295
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	3501      	adds	r5, #1
 800a210:	e7c1      	b.n	800a196 <_printf_common+0x3e>
 800a212:	18e1      	adds	r1, r4, r3
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	2030      	movs	r0, #48	@ 0x30
 800a218:	3302      	adds	r3, #2
 800a21a:	4422      	add	r2, r4
 800a21c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a228:	e7c2      	b.n	800a1b0 <_printf_common+0x58>
 800a22a:	2301      	movs	r3, #1
 800a22c:	4622      	mov	r2, r4
 800a22e:	4641      	mov	r1, r8
 800a230:	4638      	mov	r0, r7
 800a232:	47c8      	blx	r9
 800a234:	3001      	adds	r0, #1
 800a236:	d0e6      	beq.n	800a206 <_printf_common+0xae>
 800a238:	3601      	adds	r6, #1
 800a23a:	e7d9      	b.n	800a1f0 <_printf_common+0x98>

0800a23c <_printf_i>:
 800a23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	7e0f      	ldrb	r7, [r1, #24]
 800a242:	4691      	mov	r9, r2
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	2f78      	cmp	r7, #120	@ 0x78
 800a24a:	469a      	mov	sl, r3
 800a24c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a24e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a252:	d807      	bhi.n	800a264 <_printf_i+0x28>
 800a254:	2f62      	cmp	r7, #98	@ 0x62
 800a256:	d80a      	bhi.n	800a26e <_printf_i+0x32>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	f000 80d2 	beq.w	800a402 <_printf_i+0x1c6>
 800a25e:	2f58      	cmp	r7, #88	@ 0x58
 800a260:	f000 80b9 	beq.w	800a3d6 <_printf_i+0x19a>
 800a264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a26c:	e03a      	b.n	800a2e4 <_printf_i+0xa8>
 800a26e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a272:	2b15      	cmp	r3, #21
 800a274:	d8f6      	bhi.n	800a264 <_printf_i+0x28>
 800a276:	a101      	add	r1, pc, #4	@ (adr r1, 800a27c <_printf_i+0x40>)
 800a278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a265 	.word	0x0800a265
 800a288:	0800a265 	.word	0x0800a265
 800a28c:	0800a265 	.word	0x0800a265
 800a290:	0800a265 	.word	0x0800a265
 800a294:	0800a2e9 	.word	0x0800a2e9
 800a298:	0800a265 	.word	0x0800a265
 800a29c:	0800a265 	.word	0x0800a265
 800a2a0:	0800a265 	.word	0x0800a265
 800a2a4:	0800a265 	.word	0x0800a265
 800a2a8:	0800a3e9 	.word	0x0800a3e9
 800a2ac:	0800a313 	.word	0x0800a313
 800a2b0:	0800a3a3 	.word	0x0800a3a3
 800a2b4:	0800a265 	.word	0x0800a265
 800a2b8:	0800a265 	.word	0x0800a265
 800a2bc:	0800a40b 	.word	0x0800a40b
 800a2c0:	0800a265 	.word	0x0800a265
 800a2c4:	0800a313 	.word	0x0800a313
 800a2c8:	0800a265 	.word	0x0800a265
 800a2cc:	0800a265 	.word	0x0800a265
 800a2d0:	0800a3ab 	.word	0x0800a3ab
 800a2d4:	6833      	ldr	r3, [r6, #0]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6032      	str	r2, [r6, #0]
 800a2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e09d      	b.n	800a424 <_printf_i+0x1e8>
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	6820      	ldr	r0, [r4, #0]
 800a2ec:	1d19      	adds	r1, r3, #4
 800a2ee:	6031      	str	r1, [r6, #0]
 800a2f0:	0606      	lsls	r6, r0, #24
 800a2f2:	d501      	bpl.n	800a2f8 <_printf_i+0xbc>
 800a2f4:	681d      	ldr	r5, [r3, #0]
 800a2f6:	e003      	b.n	800a300 <_printf_i+0xc4>
 800a2f8:	0645      	lsls	r5, r0, #25
 800a2fa:	d5fb      	bpl.n	800a2f4 <_printf_i+0xb8>
 800a2fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a300:	2d00      	cmp	r5, #0
 800a302:	da03      	bge.n	800a30c <_printf_i+0xd0>
 800a304:	232d      	movs	r3, #45	@ 0x2d
 800a306:	426d      	negs	r5, r5
 800a308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a30c:	4859      	ldr	r0, [pc, #356]	@ (800a474 <_printf_i+0x238>)
 800a30e:	230a      	movs	r3, #10
 800a310:	e011      	b.n	800a336 <_printf_i+0xfa>
 800a312:	6821      	ldr	r1, [r4, #0]
 800a314:	6833      	ldr	r3, [r6, #0]
 800a316:	0608      	lsls	r0, r1, #24
 800a318:	f853 5b04 	ldr.w	r5, [r3], #4
 800a31c:	d402      	bmi.n	800a324 <_printf_i+0xe8>
 800a31e:	0649      	lsls	r1, r1, #25
 800a320:	bf48      	it	mi
 800a322:	b2ad      	uxthmi	r5, r5
 800a324:	2f6f      	cmp	r7, #111	@ 0x6f
 800a326:	6033      	str	r3, [r6, #0]
 800a328:	4852      	ldr	r0, [pc, #328]	@ (800a474 <_printf_i+0x238>)
 800a32a:	bf14      	ite	ne
 800a32c:	230a      	movne	r3, #10
 800a32e:	2308      	moveq	r3, #8
 800a330:	2100      	movs	r1, #0
 800a332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a336:	6866      	ldr	r6, [r4, #4]
 800a338:	2e00      	cmp	r6, #0
 800a33a:	60a6      	str	r6, [r4, #8]
 800a33c:	bfa2      	ittt	ge
 800a33e:	6821      	ldrge	r1, [r4, #0]
 800a340:	f021 0104 	bicge.w	r1, r1, #4
 800a344:	6021      	strge	r1, [r4, #0]
 800a346:	b90d      	cbnz	r5, 800a34c <_printf_i+0x110>
 800a348:	2e00      	cmp	r6, #0
 800a34a:	d04b      	beq.n	800a3e4 <_printf_i+0x1a8>
 800a34c:	4616      	mov	r6, r2
 800a34e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a352:	fb03 5711 	mls	r7, r3, r1, r5
 800a356:	5dc7      	ldrb	r7, [r0, r7]
 800a358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a35c:	462f      	mov	r7, r5
 800a35e:	460d      	mov	r5, r1
 800a360:	42bb      	cmp	r3, r7
 800a362:	d9f4      	bls.n	800a34e <_printf_i+0x112>
 800a364:	2b08      	cmp	r3, #8
 800a366:	d10b      	bne.n	800a380 <_printf_i+0x144>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	07df      	lsls	r7, r3, #31
 800a36c:	d508      	bpl.n	800a380 <_printf_i+0x144>
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	6861      	ldr	r1, [r4, #4]
 800a372:	4299      	cmp	r1, r3
 800a374:	bfde      	ittt	le
 800a376:	2330      	movle	r3, #48	@ 0x30
 800a378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a37c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a380:	1b92      	subs	r2, r2, r6
 800a382:	6122      	str	r2, [r4, #16]
 800a384:	464b      	mov	r3, r9
 800a386:	aa03      	add	r2, sp, #12
 800a388:	4621      	mov	r1, r4
 800a38a:	4640      	mov	r0, r8
 800a38c:	f8cd a000 	str.w	sl, [sp]
 800a390:	f7ff fee2 	bl	800a158 <_printf_common>
 800a394:	3001      	adds	r0, #1
 800a396:	d14a      	bne.n	800a42e <_printf_i+0x1f2>
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	b004      	add	sp, #16
 800a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	f043 0320 	orr.w	r3, r3, #32
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	2778      	movs	r7, #120	@ 0x78
 800a3ac:	4832      	ldr	r0, [pc, #200]	@ (800a478 <_printf_i+0x23c>)
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3b4:	061f      	lsls	r7, r3, #24
 800a3b6:	6831      	ldr	r1, [r6, #0]
 800a3b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3bc:	d402      	bmi.n	800a3c4 <_printf_i+0x188>
 800a3be:	065f      	lsls	r7, r3, #25
 800a3c0:	bf48      	it	mi
 800a3c2:	b2ad      	uxthmi	r5, r5
 800a3c4:	6031      	str	r1, [r6, #0]
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	bf44      	itt	mi
 800a3ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ce:	6023      	strmi	r3, [r4, #0]
 800a3d0:	b11d      	cbz	r5, 800a3da <_printf_i+0x19e>
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	e7ac      	b.n	800a330 <_printf_i+0xf4>
 800a3d6:	4827      	ldr	r0, [pc, #156]	@ (800a474 <_printf_i+0x238>)
 800a3d8:	e7e9      	b.n	800a3ae <_printf_i+0x172>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f023 0320 	bic.w	r3, r3, #32
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	e7f6      	b.n	800a3d2 <_printf_i+0x196>
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	e7bd      	b.n	800a364 <_printf_i+0x128>
 800a3e8:	6833      	ldr	r3, [r6, #0]
 800a3ea:	6825      	ldr	r5, [r4, #0]
 800a3ec:	1d18      	adds	r0, r3, #4
 800a3ee:	6961      	ldr	r1, [r4, #20]
 800a3f0:	6030      	str	r0, [r6, #0]
 800a3f2:	062e      	lsls	r6, r5, #24
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	d501      	bpl.n	800a3fc <_printf_i+0x1c0>
 800a3f8:	6019      	str	r1, [r3, #0]
 800a3fa:	e002      	b.n	800a402 <_printf_i+0x1c6>
 800a3fc:	0668      	lsls	r0, r5, #25
 800a3fe:	d5fb      	bpl.n	800a3f8 <_printf_i+0x1bc>
 800a400:	8019      	strh	r1, [r3, #0]
 800a402:	2300      	movs	r3, #0
 800a404:	4616      	mov	r6, r2
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	e7bc      	b.n	800a384 <_printf_i+0x148>
 800a40a:	6833      	ldr	r3, [r6, #0]
 800a40c:	2100      	movs	r1, #0
 800a40e:	1d1a      	adds	r2, r3, #4
 800a410:	6032      	str	r2, [r6, #0]
 800a412:	681e      	ldr	r6, [r3, #0]
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	4630      	mov	r0, r6
 800a418:	f000 f9b4 	bl	800a784 <memchr>
 800a41c:	b108      	cbz	r0, 800a422 <_printf_i+0x1e6>
 800a41e:	1b80      	subs	r0, r0, r6
 800a420:	6060      	str	r0, [r4, #4]
 800a422:	6863      	ldr	r3, [r4, #4]
 800a424:	6123      	str	r3, [r4, #16]
 800a426:	2300      	movs	r3, #0
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a42c:	e7aa      	b.n	800a384 <_printf_i+0x148>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d0ad      	beq.n	800a398 <_printf_i+0x15c>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	079b      	lsls	r3, r3, #30
 800a440:	d413      	bmi.n	800a46a <_printf_i+0x22e>
 800a442:	68e0      	ldr	r0, [r4, #12]
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	4298      	cmp	r0, r3
 800a448:	bfb8      	it	lt
 800a44a:	4618      	movlt	r0, r3
 800a44c:	e7a6      	b.n	800a39c <_printf_i+0x160>
 800a44e:	2301      	movs	r3, #1
 800a450:	4632      	mov	r2, r6
 800a452:	4649      	mov	r1, r9
 800a454:	4640      	mov	r0, r8
 800a456:	47d0      	blx	sl
 800a458:	3001      	adds	r0, #1
 800a45a:	d09d      	beq.n	800a398 <_printf_i+0x15c>
 800a45c:	3501      	adds	r5, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	9903      	ldr	r1, [sp, #12]
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	42ab      	cmp	r3, r5
 800a466:	dcf2      	bgt.n	800a44e <_printf_i+0x212>
 800a468:	e7eb      	b.n	800a442 <_printf_i+0x206>
 800a46a:	2500      	movs	r5, #0
 800a46c:	f104 0619 	add.w	r6, r4, #25
 800a470:	e7f5      	b.n	800a45e <_printf_i+0x222>
 800a472:	bf00      	nop
 800a474:	0800a9f5 	.word	0x0800a9f5
 800a478:	0800aa06 	.word	0x0800aa06

0800a47c <__sflush_r>:
 800a47c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	0716      	lsls	r6, r2, #28
 800a486:	4605      	mov	r5, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	d454      	bmi.n	800a536 <__sflush_r+0xba>
 800a48c:	684b      	ldr	r3, [r1, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dc02      	bgt.n	800a498 <__sflush_r+0x1c>
 800a492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd48      	ble.n	800a52a <__sflush_r+0xae>
 800a498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	d045      	beq.n	800a52a <__sflush_r+0xae>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4a4:	682f      	ldr	r7, [r5, #0]
 800a4a6:	6a21      	ldr	r1, [r4, #32]
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	d030      	beq.n	800a50e <__sflush_r+0x92>
 800a4ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	0759      	lsls	r1, r3, #29
 800a4b2:	d505      	bpl.n	800a4c0 <__sflush_r+0x44>
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ba:	b10b      	cbz	r3, 800a4c0 <__sflush_r+0x44>
 800a4bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4c4:	6a21      	ldr	r1, [r4, #32]
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b0      	blx	r6
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	d106      	bne.n	800a4de <__sflush_r+0x62>
 800a4d0:	6829      	ldr	r1, [r5, #0]
 800a4d2:	291d      	cmp	r1, #29
 800a4d4:	d82b      	bhi.n	800a52e <__sflush_r+0xb2>
 800a4d6:	4a2a      	ldr	r2, [pc, #168]	@ (800a580 <__sflush_r+0x104>)
 800a4d8:	410a      	asrs	r2, r1
 800a4da:	07d6      	lsls	r6, r2, #31
 800a4dc:	d427      	bmi.n	800a52e <__sflush_r+0xb2>
 800a4de:	2200      	movs	r2, #0
 800a4e0:	04d9      	lsls	r1, r3, #19
 800a4e2:	6062      	str	r2, [r4, #4]
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	6022      	str	r2, [r4, #0]
 800a4e8:	d504      	bpl.n	800a4f4 <__sflush_r+0x78>
 800a4ea:	1c42      	adds	r2, r0, #1
 800a4ec:	d101      	bne.n	800a4f2 <__sflush_r+0x76>
 800a4ee:	682b      	ldr	r3, [r5, #0]
 800a4f0:	b903      	cbnz	r3, 800a4f4 <__sflush_r+0x78>
 800a4f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4f6:	602f      	str	r7, [r5, #0]
 800a4f8:	b1b9      	cbz	r1, 800a52a <__sflush_r+0xae>
 800a4fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4fe:	4299      	cmp	r1, r3
 800a500:	d002      	beq.n	800a508 <__sflush_r+0x8c>
 800a502:	4628      	mov	r0, r5
 800a504:	f7ff fbee 	bl	8009ce4 <_free_r>
 800a508:	2300      	movs	r3, #0
 800a50a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a50c:	e00d      	b.n	800a52a <__sflush_r+0xae>
 800a50e:	2301      	movs	r3, #1
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	4602      	mov	r2, r0
 800a516:	1c50      	adds	r0, r2, #1
 800a518:	d1c9      	bne.n	800a4ae <__sflush_r+0x32>
 800a51a:	682b      	ldr	r3, [r5, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0c6      	beq.n	800a4ae <__sflush_r+0x32>
 800a520:	2b1d      	cmp	r3, #29
 800a522:	d001      	beq.n	800a528 <__sflush_r+0xac>
 800a524:	2b16      	cmp	r3, #22
 800a526:	d11d      	bne.n	800a564 <__sflush_r+0xe8>
 800a528:	602f      	str	r7, [r5, #0]
 800a52a:	2000      	movs	r0, #0
 800a52c:	e021      	b.n	800a572 <__sflush_r+0xf6>
 800a52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a532:	b21b      	sxth	r3, r3
 800a534:	e01a      	b.n	800a56c <__sflush_r+0xf0>
 800a536:	690f      	ldr	r7, [r1, #16]
 800a538:	2f00      	cmp	r7, #0
 800a53a:	d0f6      	beq.n	800a52a <__sflush_r+0xae>
 800a53c:	0793      	lsls	r3, r2, #30
 800a53e:	680e      	ldr	r6, [r1, #0]
 800a540:	600f      	str	r7, [r1, #0]
 800a542:	bf0c      	ite	eq
 800a544:	694b      	ldreq	r3, [r1, #20]
 800a546:	2300      	movne	r3, #0
 800a548:	eba6 0807 	sub.w	r8, r6, r7
 800a54c:	608b      	str	r3, [r1, #8]
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	ddea      	ble.n	800a52a <__sflush_r+0xae>
 800a554:	4643      	mov	r3, r8
 800a556:	463a      	mov	r2, r7
 800a558:	6a21      	ldr	r1, [r4, #32]
 800a55a:	4628      	mov	r0, r5
 800a55c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a55e:	47b0      	blx	r6
 800a560:	2800      	cmp	r0, #0
 800a562:	dc08      	bgt.n	800a576 <__sflush_r+0xfa>
 800a564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a576:	4407      	add	r7, r0
 800a578:	eba8 0800 	sub.w	r8, r8, r0
 800a57c:	e7e7      	b.n	800a54e <__sflush_r+0xd2>
 800a57e:	bf00      	nop
 800a580:	dfbffffe 	.word	0xdfbffffe

0800a584 <_fflush_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	690b      	ldr	r3, [r1, #16]
 800a588:	4605      	mov	r5, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	b913      	cbnz	r3, 800a594 <_fflush_r+0x10>
 800a58e:	2500      	movs	r5, #0
 800a590:	4628      	mov	r0, r5
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	b118      	cbz	r0, 800a59e <_fflush_r+0x1a>
 800a596:	6a03      	ldr	r3, [r0, #32]
 800a598:	b90b      	cbnz	r3, 800a59e <_fflush_r+0x1a>
 800a59a:	f7ff fa93 	bl	8009ac4 <__sinit>
 800a59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0f3      	beq.n	800a58e <_fflush_r+0xa>
 800a5a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5a8:	07d0      	lsls	r0, r2, #31
 800a5aa:	d404      	bmi.n	800a5b6 <_fflush_r+0x32>
 800a5ac:	0599      	lsls	r1, r3, #22
 800a5ae:	d402      	bmi.n	800a5b6 <_fflush_r+0x32>
 800a5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5b2:	f7ff fb94 	bl	8009cde <__retarget_lock_acquire_recursive>
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	f7ff ff5f 	bl	800a47c <__sflush_r>
 800a5be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	07da      	lsls	r2, r3, #31
 800a5c4:	d4e4      	bmi.n	800a590 <_fflush_r+0xc>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	059b      	lsls	r3, r3, #22
 800a5ca:	d4e1      	bmi.n	800a590 <_fflush_r+0xc>
 800a5cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ce:	f7ff fb87 	bl	8009ce0 <__retarget_lock_release_recursive>
 800a5d2:	e7dd      	b.n	800a590 <_fflush_r+0xc>

0800a5d4 <_putc_r>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4606      	mov	r6, r0
 800a5dc:	b118      	cbz	r0, 800a5e6 <_putc_r+0x12>
 800a5de:	6a03      	ldr	r3, [r0, #32]
 800a5e0:	b90b      	cbnz	r3, 800a5e6 <_putc_r+0x12>
 800a5e2:	f7ff fa6f 	bl	8009ac4 <__sinit>
 800a5e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5e8:	07d8      	lsls	r0, r3, #31
 800a5ea:	d405      	bmi.n	800a5f8 <_putc_r+0x24>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	0599      	lsls	r1, r3, #22
 800a5f0:	d402      	bmi.n	800a5f8 <_putc_r+0x24>
 800a5f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5f4:	f7ff fb73 	bl	8009cde <__retarget_lock_acquire_recursive>
 800a5f8:	68a3      	ldr	r3, [r4, #8]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	60a3      	str	r3, [r4, #8]
 800a600:	da05      	bge.n	800a60e <_putc_r+0x3a>
 800a602:	69a2      	ldr	r2, [r4, #24]
 800a604:	4293      	cmp	r3, r2
 800a606:	db12      	blt.n	800a62e <_putc_r+0x5a>
 800a608:	b2eb      	uxtb	r3, r5
 800a60a:	2b0a      	cmp	r3, #10
 800a60c:	d00f      	beq.n	800a62e <_putc_r+0x5a>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	701d      	strb	r5, [r3, #0]
 800a616:	b2ed      	uxtb	r5, r5
 800a618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a61a:	07da      	lsls	r2, r3, #31
 800a61c:	d405      	bmi.n	800a62a <_putc_r+0x56>
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	059b      	lsls	r3, r3, #22
 800a622:	d402      	bmi.n	800a62a <_putc_r+0x56>
 800a624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a626:	f7ff fb5b 	bl	8009ce0 <__retarget_lock_release_recursive>
 800a62a:	4628      	mov	r0, r5
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	4629      	mov	r1, r5
 800a630:	4622      	mov	r2, r4
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f802 	bl	800a63c <__swbuf_r>
 800a638:	4605      	mov	r5, r0
 800a63a:	e7ed      	b.n	800a618 <_putc_r+0x44>

0800a63c <__swbuf_r>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	460e      	mov	r6, r1
 800a640:	4614      	mov	r4, r2
 800a642:	4605      	mov	r5, r0
 800a644:	b118      	cbz	r0, 800a64e <__swbuf_r+0x12>
 800a646:	6a03      	ldr	r3, [r0, #32]
 800a648:	b90b      	cbnz	r3, 800a64e <__swbuf_r+0x12>
 800a64a:	f7ff fa3b 	bl	8009ac4 <__sinit>
 800a64e:	69a3      	ldr	r3, [r4, #24]
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	071a      	lsls	r2, r3, #28
 800a656:	d501      	bpl.n	800a65c <__swbuf_r+0x20>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	b943      	cbnz	r3, 800a66e <__swbuf_r+0x32>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 f82a 	bl	800a6b8 <__swsetup_r>
 800a664:	b118      	cbz	r0, 800a66e <__swbuf_r+0x32>
 800a666:	f04f 37ff 	mov.w	r7, #4294967295
 800a66a:	4638      	mov	r0, r7
 800a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	b2f6      	uxtb	r6, r6
 800a672:	6922      	ldr	r2, [r4, #16]
 800a674:	4637      	mov	r7, r6
 800a676:	1a98      	subs	r0, r3, r2
 800a678:	6963      	ldr	r3, [r4, #20]
 800a67a:	4283      	cmp	r3, r0
 800a67c:	dc05      	bgt.n	800a68a <__swbuf_r+0x4e>
 800a67e:	4621      	mov	r1, r4
 800a680:	4628      	mov	r0, r5
 800a682:	f7ff ff7f 	bl	800a584 <_fflush_r>
 800a686:	2800      	cmp	r0, #0
 800a688:	d1ed      	bne.n	800a666 <__swbuf_r+0x2a>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	60a3      	str	r3, [r4, #8]
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	6022      	str	r2, [r4, #0]
 800a696:	701e      	strb	r6, [r3, #0]
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	6962      	ldr	r2, [r4, #20]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d004      	beq.n	800a6aa <__swbuf_r+0x6e>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	07db      	lsls	r3, r3, #31
 800a6a4:	d5e1      	bpl.n	800a66a <__swbuf_r+0x2e>
 800a6a6:	2e0a      	cmp	r6, #10
 800a6a8:	d1df      	bne.n	800a66a <__swbuf_r+0x2e>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7ff ff69 	bl	800a584 <_fflush_r>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0d9      	beq.n	800a66a <__swbuf_r+0x2e>
 800a6b6:	e7d6      	b.n	800a666 <__swbuf_r+0x2a>

0800a6b8 <__swsetup_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4b29      	ldr	r3, [pc, #164]	@ (800a760 <__swsetup_r+0xa8>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	b118      	cbz	r0, 800a6cc <__swsetup_r+0x14>
 800a6c4:	6a03      	ldr	r3, [r0, #32]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <__swsetup_r+0x14>
 800a6c8:	f7ff f9fc 	bl	8009ac4 <__sinit>
 800a6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d0:	0719      	lsls	r1, r3, #28
 800a6d2:	d422      	bmi.n	800a71a <__swsetup_r+0x62>
 800a6d4:	06da      	lsls	r2, r3, #27
 800a6d6:	d407      	bmi.n	800a6e8 <__swsetup_r+0x30>
 800a6d8:	2209      	movs	r2, #9
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	e033      	b.n	800a750 <__swsetup_r+0x98>
 800a6e8:	0758      	lsls	r0, r3, #29
 800a6ea:	d512      	bpl.n	800a712 <__swsetup_r+0x5a>
 800a6ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6ee:	b141      	cbz	r1, 800a702 <__swsetup_r+0x4a>
 800a6f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d002      	beq.n	800a6fe <__swsetup_r+0x46>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f7ff faf3 	bl	8009ce4 <_free_r>
 800a6fe:	2300      	movs	r3, #0
 800a700:	6363      	str	r3, [r4, #52]	@ 0x34
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	2300      	movs	r3, #0
 800a70c:	6063      	str	r3, [r4, #4]
 800a70e:	6923      	ldr	r3, [r4, #16]
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f043 0308 	orr.w	r3, r3, #8
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	6923      	ldr	r3, [r4, #16]
 800a71c:	b94b      	cbnz	r3, 800a732 <__swsetup_r+0x7a>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a728:	d003      	beq.n	800a732 <__swsetup_r+0x7a>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4628      	mov	r0, r5
 800a72e:	f000 f85c 	bl	800a7ea <__smakebuf_r>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	f013 0201 	ands.w	r2, r3, #1
 800a73a:	d00a      	beq.n	800a752 <__swsetup_r+0x9a>
 800a73c:	2200      	movs	r2, #0
 800a73e:	60a2      	str	r2, [r4, #8]
 800a740:	6962      	ldr	r2, [r4, #20]
 800a742:	4252      	negs	r2, r2
 800a744:	61a2      	str	r2, [r4, #24]
 800a746:	6922      	ldr	r2, [r4, #16]
 800a748:	b942      	cbnz	r2, 800a75c <__swsetup_r+0xa4>
 800a74a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a74e:	d1c5      	bne.n	800a6dc <__swsetup_r+0x24>
 800a750:	bd38      	pop	{r3, r4, r5, pc}
 800a752:	0799      	lsls	r1, r3, #30
 800a754:	bf58      	it	pl
 800a756:	6962      	ldrpl	r2, [r4, #20]
 800a758:	60a2      	str	r2, [r4, #8]
 800a75a:	e7f4      	b.n	800a746 <__swsetup_r+0x8e>
 800a75c:	2000      	movs	r0, #0
 800a75e:	e7f7      	b.n	800a750 <__swsetup_r+0x98>
 800a760:	2000014c 	.word	0x2000014c

0800a764 <_sbrk_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	2300      	movs	r3, #0
 800a768:	4d05      	ldr	r5, [pc, #20]	@ (800a780 <_sbrk_r+0x1c>)
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f5 ffc6 	bl	8000700 <_sbrk>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_sbrk_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_sbrk_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	20000bd4 	.word	0x20000bd4

0800a784 <memchr>:
 800a784:	b2c9      	uxtb	r1, r1
 800a786:	4603      	mov	r3, r0
 800a788:	4402      	add	r2, r0
 800a78a:	b510      	push	{r4, lr}
 800a78c:	4293      	cmp	r3, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	d101      	bne.n	800a796 <memchr+0x12>
 800a792:	2000      	movs	r0, #0
 800a794:	e003      	b.n	800a79e <memchr+0x1a>
 800a796:	7804      	ldrb	r4, [r0, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	428c      	cmp	r4, r1
 800a79c:	d1f6      	bne.n	800a78c <memchr+0x8>
 800a79e:	bd10      	pop	{r4, pc}

0800a7a0 <__swhatbuf_r>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a8:	b096      	sub	sp, #88	@ 0x58
 800a7aa:	4615      	mov	r5, r2
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	da0c      	bge.n	800a7cc <__swhatbuf_r+0x2c>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7ba:	bf14      	ite	ne
 800a7bc:	2340      	movne	r3, #64	@ 0x40
 800a7be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	6031      	str	r1, [r6, #0]
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	b016      	add	sp, #88	@ 0x58
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	466a      	mov	r2, sp
 800a7ce:	f000 f849 	bl	800a864 <_fstat_r>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	dbed      	blt.n	800a7b2 <__swhatbuf_r+0x12>
 800a7d6:	9901      	ldr	r1, [sp, #4]
 800a7d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7e0:	4259      	negs	r1, r3
 800a7e2:	4159      	adcs	r1, r3
 800a7e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7e8:	e7eb      	b.n	800a7c2 <__swhatbuf_r+0x22>

0800a7ea <__smakebuf_r>:
 800a7ea:	898b      	ldrh	r3, [r1, #12]
 800a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ee:	079d      	lsls	r5, r3, #30
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	d507      	bpl.n	800a806 <__smakebuf_r+0x1c>
 800a7f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	6123      	str	r3, [r4, #16]
 800a7fe:	2301      	movs	r3, #1
 800a800:	6163      	str	r3, [r4, #20]
 800a802:	b003      	add	sp, #12
 800a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a806:	ab01      	add	r3, sp, #4
 800a808:	466a      	mov	r2, sp
 800a80a:	f7ff ffc9 	bl	800a7a0 <__swhatbuf_r>
 800a80e:	9f00      	ldr	r7, [sp, #0]
 800a810:	4605      	mov	r5, r0
 800a812:	4630      	mov	r0, r6
 800a814:	4639      	mov	r1, r7
 800a816:	f7ff fad1 	bl	8009dbc <_malloc_r>
 800a81a:	b948      	cbnz	r0, 800a830 <__smakebuf_r+0x46>
 800a81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d4ee      	bmi.n	800a802 <__smakebuf_r+0x18>
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	f043 0302 	orr.w	r3, r3, #2
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	e7e2      	b.n	800a7f6 <__smakebuf_r+0xc>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	6020      	str	r0, [r4, #0]
 800a834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a838:	81a3      	strh	r3, [r4, #12]
 800a83a:	9b01      	ldr	r3, [sp, #4]
 800a83c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a840:	b15b      	cbz	r3, 800a85a <__smakebuf_r+0x70>
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	4630      	mov	r0, r6
 800a848:	f000 f81e 	bl	800a888 <_isatty_r>
 800a84c:	b128      	cbz	r0, 800a85a <__smakebuf_r+0x70>
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	f043 0301 	orr.w	r3, r3, #1
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	431d      	orrs	r5, r3
 800a85e:	81a5      	strh	r5, [r4, #12]
 800a860:	e7cf      	b.n	800a802 <__smakebuf_r+0x18>
	...

0800a864 <_fstat_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	2300      	movs	r3, #0
 800a868:	4d06      	ldr	r5, [pc, #24]	@ (800a884 <_fstat_r+0x20>)
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	f7f5 ff1c 	bl	80006ae <_fstat>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	d102      	bne.n	800a880 <_fstat_r+0x1c>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	b103      	cbz	r3, 800a880 <_fstat_r+0x1c>
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	bf00      	nop
 800a884:	20000bd4 	.word	0x20000bd4

0800a888 <_isatty_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	2300      	movs	r3, #0
 800a88c:	4d05      	ldr	r5, [pc, #20]	@ (800a8a4 <_isatty_r+0x1c>)
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f5 ff1b 	bl	80006ce <_isatty>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_isatty_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_isatty_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20000bd4 	.word	0x20000bd4

0800a8a8 <_init>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr

0800a8b4 <_fini>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr
